2020-04-19 08:50:49.279  INFO 17768 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 17768 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-19 08:50:49.279 DEBUG 17768 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-19 08:50:49.279  INFO 17768 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-19 08:50:49.311  INFO 17768 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-19 08:50:49.311  INFO 17768 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-19 08:50:50.592  INFO 17768 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-19 08:50:50.623  INFO 17768 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-19 08:50:50.623  INFO 17768 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-19 08:50:50.748  INFO 17768 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-19 08:50:50.748  INFO 17768 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1437 ms
2020-04-19 08:50:51.191  INFO 17768 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-19 08:50:51.847  INFO 17768 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-19 08:50:54.372  INFO 17768 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-19 08:50:55.075  INFO 17768 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-19 08:50:55.137  INFO 17768 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-19 08:50:55.153  INFO 17768 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 6.929 seconds (JVM running for 8.278)
2020-04-19 08:51:02.061  INFO 17768 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 08:51:02.061  INFO 17768 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-19 08:51:02.071  INFO 17768 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-19 08:51:04.543 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.A.listRecommendArticles          : ==>  Preparing: select id, title, summary, cover, category_id from t_article where recommend = 1 and published = 1 
2020-04-19 08:51:04.569 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectList    : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 5 
2020-04-19 08:51:04.572 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.A.listRecommendArticles          : ==> Parameters: 
2020-04-19 08:51:04.573 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectList    : ==> Parameters: true(Boolean), true(Boolean)
2020-04-19 08:51:04.599 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 08:51:04.602 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 08:51:04.611 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectList    : <==      Total: 5
2020-04-19 08:51:04.618 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 08:51:04.620 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 0(Long), 6(Long)
2020-04-19 08:51:04.661 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.A.listRecommendArticles          : <==      Total: 4
2020-04-19 08:51:04.664 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : <==      Total: 6
2020-04-19 08:51:04.687 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.688 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 08:51:04.690 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.690 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.690 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:04.692 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:04.708 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 08:51:04.725 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 08:51:04.728 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.729 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:04.731 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.732 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:04.733 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 08:51:04.735 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 08:51:04.736 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:04.736 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 08:51:04.737 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:04.738 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:04.739 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 08:51:04.740 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 08:51:15.490 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 08:51:15.491 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 6(Long), 6(Long)
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : <==      Total: 2
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:15.492 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:15.507 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:15.507 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:15.507 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 08:51:15.507 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 08:51:17.555 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 08:51:17.555 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 08:51:17.557 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 08:51:17.559 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 0(Long), 6(Long)
2020-04-19 08:51:17.574 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : <==      Total: 6
2020-04-19 08:51:17.576 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:17.576 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:17.579 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:17.581 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:17.581 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 08:51:17.586 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 08:51:17.589 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:17.590 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:17.592 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:17.594 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:17.594 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 08:51:17.600 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 08:51:17.603 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:17.604 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:17.607 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:17.609 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:17.610 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 08:51:17.613 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 08:51:17.622 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:17.622 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:17.626 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:17.630 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:17.631 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 08:51:17.636 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 08:51:17.639 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:17.639 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 08:51:17.642 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:17.643 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:17.643 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 08:51:17.648 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 08:51:17.651 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 08:51:17.652 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 08:51:17.655 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 08:51:17.656 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 08:51:17.656 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 08:51:17.659 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:41:23.517 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:41:23.520 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:41:23.532 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:41:23.539  INFO 17768 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 38ms, description = 初始化后台主页}
2020-04-19 09:41:23.542  INFO 17768 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:41:26.322 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:41:26.322 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:41:26.323 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:41:26.323 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:41:26.330 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:41:26.331 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:47:24.274 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:47:24.275 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:47:24.279 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:47:24.279  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-19 09:47:24.279  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:47:27.560 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:47:27.560 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:47:27.560 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:47:27.560 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:47:27.562 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:47:27.563 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:48:04.540 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 09:48:04.545 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 3(Long), 2020-04-19 09:48:04.523(Timestamp), 2020-04-19 09:48:04.523(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 09:48:04.565 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 09:48:04.571 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 09:48:04.572 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1027(Long), 1(Long)
2020-04-19 09:48:04.575 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 09:50:19.599 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:50:19.600 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:50:19.603 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:50:19.603  INFO 17768 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-19 09:50:19.603  INFO 17768 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:50:19.744 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:50:19.744 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:50:19.746 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:50:19.747 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:50:19.748 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:50:19.749 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:50:52.527 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 09:50:52.529 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 09:50:52.526(Timestamp), 2020-04-19 09:50:52.526(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 09:50:52.533 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 09:50:52.534 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 09:50:52.535 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1028(Long), 1(Long)
2020-04-19 09:50:52.536 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 09:50:53.859 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 09:50:53.859 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 09:50:53.861 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 09:50:53.861 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 09:50:53.874 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : <==      Total: 10
2020-04-19 09:50:53.892 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.892 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:50:53.893 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.896 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.896 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:50:53.898 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:50:53.899 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.899 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 09:50:53.901 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.903 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.904 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 09:50:53.906 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:50:53.907 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.907 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:50:53.908 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.909 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.909 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 09:50:53.910 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:50:53.910 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.910 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:50:53.911 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.911 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.911 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 09:50:53.912 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:50:53.913 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.913 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:50:53.914 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.915 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.915 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 09:50:53.916 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:50:53.918 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.919 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:50:53.922 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.923 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.923 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 09:50:53.925 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:50:53.926 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.926 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:50:53.927 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.928 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.928 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 09:50:53.929 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:50:53.930 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.930 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:50:53.931 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.931 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.931 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 09:50:53.932 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:50:53.933 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.933 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:50:53.936 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.939 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.939 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1027(Long)
2020-04-19 09:50:53.940 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:50:53.941 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:50:53.941 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:50:53.943 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:50:53.943 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:50:53.944 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1028(Long)
2020-04-19 09:50:53.945 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:50:53.946 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 09:50:53.946 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 09:50:53.947 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 09:51:06.293 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.deleteById    : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-04-19 09:51:06.293 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.deleteById    : ==> Parameters: 1028(Long)
2020-04-19 09:51:06.298 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.deleteById    : <==    Updates: 1
2020-04-19 09:51:24.538 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 09:51:24.540 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-19 09:51:24.536(Timestamp), 2020-04-19 09:51:24.536(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 09:51:24.547 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 09:51:24.548 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 09:51:24.549 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1029(Long), 1(Long)
2020-04-19 09:51:24.553 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 09:51:33.442 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:51:33.442 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:51:33.446 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:51:33.446  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-19 09:51:33.446  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:51:33.587 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 09:51:33.587 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 09:51:33.589 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 09:51:33.589 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 09:51:33.602 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : <==      Total: 10
2020-04-19 09:51:33.603 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.603 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:33.604 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.604 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.605 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:51:33.606 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:51:33.607 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.608 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 09:51:33.612 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.613 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.613 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 09:51:33.614 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:33.615 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.615 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:51:33.616 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.617 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.617 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 09:51:33.618 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:33.619 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.619 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:33.619 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.620 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.620 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 09:51:33.621 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:51:33.621 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.622 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:33.622 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.623 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.623 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 09:51:33.625 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:51:33.628 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.628 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:33.629 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.631 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.631 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 09:51:33.632 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:51:33.634 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.634 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:33.635 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.635 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.636 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 09:51:33.637 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:33.638 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.638 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:33.639 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.640 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.640 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 09:51:33.643 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:33.645 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.645 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:51:33.647 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.647 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.647 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1027(Long)
2020-04-19 09:51:33.648 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:33.649 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:33.649 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:33.650 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:33.651 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:33.651 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1029(Long)
2020-04-19 09:51:33.653 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:33.654 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 09:51:33.654 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 09:51:33.655 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 09:51:45.048 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 09:51:45.048 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 09:51:45.049 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 09:51:45.049 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 09:51:45.057 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageForAdmin             : <==      Total: 10
2020-04-19 09:51:45.058 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.058 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:45.060 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.060 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.061 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:51:45.062 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:51:45.063 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.063 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 09:51:45.063 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.064 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.064 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 09:51:45.065 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:45.065 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.066 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:51:45.066 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.067 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.067 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 09:51:45.068 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:45.068 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.068 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:45.069 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.069 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.069 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 09:51:45.070 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:51:45.071 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.071 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:45.074 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.075 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.076 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 09:51:45.078 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:51:45.079 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.079 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:45.080 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.080 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.081 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 09:51:45.082 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:51:45.082 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.082 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:45.083 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.084 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.084 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 09:51:45.085 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:45.086 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.086 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:45.087 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.087 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.088 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 09:51:45.092 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:45.093 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.093 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:51:45.094 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.094 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.095 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1027(Long)
2020-04-19 09:51:45.096 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:45.096 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:51:45.096 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:51:45.097 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:51:45.098 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:45.098 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1029(Long)
2020-04-19 09:51:45.099 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:45.099 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 09:51:45.100 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 09:51:45.100 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 09:51:49.854 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.deleteById    : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-04-19 09:51:49.854 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.deleteById    : ==> Parameters: 1029(Long)
2020-04-19 09:51:49.857 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.deleteById    : <==    Updates: 1
2020-04-19 09:51:56.095 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:51:56.096 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1027(Long)
2020-04-19 09:51:56.103 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:51:56.105 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:51:56.105 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1027(Long)
2020-04-19 09:51:56.107 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:51:56.237 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:51:56.238 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:51:56.238 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:51:56.238 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:51:56.241 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:51:56.242 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:53:27.450 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:53:27.450 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:53:27.453 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:53:27.454  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-19 09:53:27.454  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:53:27.753 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 09:53:27.754 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 09:53:27.756 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 09:53:27.757 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 09:53:27.770 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : <==      Total: 9
2020-04-19 09:53:27.772 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.773 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:53:27.774 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.775 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.776 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:53:27.778 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:53:27.779 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.779 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 09:53:27.783 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.786 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.786 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 09:53:27.788 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:53:27.790 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.790 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:53:27.791 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.792 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.792 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 09:53:27.794 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:53:27.794 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.794 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:53:27.796 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.805 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.805 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 09:53:27.807 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:53:27.808 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.808 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:53:27.809 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.810 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.810 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 09:53:27.813 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:53:27.814 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.815 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:53:27.818 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.819 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.819 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 09:53:27.822 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:53:27.823 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.823 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:53:27.825 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.826 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.826 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 09:53:27.829 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:53:27.832 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.832 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:53:27.835 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.836 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.837 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 09:53:27.839 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:53:27.840 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:53:27.840 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:53:27.841 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:53:27.843 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:27.843 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1027(Long)
2020-04-19 09:53:27.845 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:53:27.846 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 09:53:27.847 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 09:53:27.852 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 09:53:30.643 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:53:30.643 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:53:30.646 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:53:30.647 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:53:30.648 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:53:30.650 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:53:30.741 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:53:30.741 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:53:30.741 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:53:30.741 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:53:30.742 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:53:30.742 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:54:26.987 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:54:26.987 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:54:26.988 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:54:26.989  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-19 09:54:26.989  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:54:27.169 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 09:54:27.169 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 09:54:27.170 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 09:54:27.171 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 09:54:27.175 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : <==      Total: 9
2020-04-19 09:54:27.176 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.176 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:54:27.176 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.177 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.177 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:54:27.178 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:54:27.178 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.178 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 09:54:27.179 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.179 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.180 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 09:54:27.181 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:54:27.182 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.182 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:54:27.183 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.184 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.184 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 09:54:27.185 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:54:27.185 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.186 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:54:27.186 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.187 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.187 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 09:54:27.188 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:54:27.188 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.188 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:54:27.189 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.190 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.190 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 09:54:27.192 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:54:27.193 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.193 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:54:27.195 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.196 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.196 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 09:54:27.198 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:54:27.199 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.199 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:54:27.200 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.201 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.201 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 09:54:27.203 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:54:27.204 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.204 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:54:27.205 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.205 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.206 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 09:54:27.206 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:54:27.207 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:54:27.207 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:54:27.208 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:54:27.208 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:27.208 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1027(Long)
2020-04-19 09:54:27.209 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:54:27.210 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 09:54:27.210 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 09:54:27.211 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 09:54:40.567 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:54:40.567 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:54:40.568 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:54:40.569 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:54:40.569 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:54:40.570 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:54:40.701 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:54:40.702 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:54:40.702 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:54:40.702 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:54:40.702 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:54:40.703 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:56:20.941 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:56:20.942 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:56:20.943 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:56:20.943  INFO 17768 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-19 09:56:20.943  INFO 17768 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:56:20.969 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:56:20.969 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:56:20.973 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:56:20.974 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:56:20.975 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:56:20.976 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:56:21.206 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:56:21.208 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:56:21.209 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:56:21.210 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:56:21.211 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:56:21.212 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:56:45.211 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:56:45.211 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:56:45.213 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:56:45.214  INFO 17768 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-19 09:56:45.214  INFO 17768 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:56:45.260 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:56:45.260 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:56:45.263 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:56:45.264 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:56:45.265 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:56:45.268 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:56:45.543 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:56:45.544 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:56:45.544 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:56:45.544 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:56:45.546 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:56:45.546 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:57:52.836 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:57:52.836 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:57:52.838 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:57:52.838  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-19 09:57:52.838  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:57:52.871 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:57:52.871 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:57:52.873 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:57:52.874 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:57:52.874 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:57:52.876 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:57:53.136 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:57:53.137 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:57:53.138 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:57:53.139 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:57:53.139 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:57:53.141 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:57:57.110 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:57:57.111 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:57:57.112 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:57:57.112  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 2ms, description = 初始化后台主页}
2020-04-19 09:57:57.112  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:57:57.141 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:57:57.141 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:57:57.143 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:57:57.144 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:57:57.144 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:57:57.146 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:57:57.340 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:57:57.340 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:57:57.341 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:57:57.341 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:57:57.342 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:57:57.342 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:58:24.877 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:58:24.877 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:58:24.879 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:58:24.879  INFO 17768 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-19 09:58:24.879  INFO 17768 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:58:24.910 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:58:24.910 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:58:24.913 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:58:24.914 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:24.914 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:58:24.916 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:58:25.125 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:58:25.126 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:58:25.132 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:58:25.133 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:58:25.133 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:58:25.135 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:58:27.396 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:58:27.397 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:58:27.398 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:58:27.398  INFO 17768 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-19 09:58:27.398  INFO 17768 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:58:27.426 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:58:27.426 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:58:27.428 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:58:27.428 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:27.428 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:58:27.430 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:58:27.586 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:58:27.586 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:58:27.587 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:58:27.587 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:58:27.588 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:58:27.591 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:58:38.591 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:58:38.591 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:58:38.592 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:58:38.593  INFO 17768 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-19 09:58:38.593  INFO 17768 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:58:38.808 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:58:38.808 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:58:38.808 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:58:38.808 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:58:38.810 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:58:38.810 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:58:42.612 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 09:58:42.612 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 09:58:42.613 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 09:58:42.613 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 09:58:42.618 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageForAdmin             : <==      Total: 9
2020-04-19 09:58:42.619 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.620 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:58:42.623 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.624 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.624 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:58:42.625 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:58:42.626 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.626 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 09:58:42.628 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.629 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.629 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 09:58:42.630 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:58:42.631 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.632 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:58:42.633 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.634 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.634 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 09:58:42.636 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:58:42.639 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.639 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:58:42.641 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.642 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.642 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 09:58:42.644 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:58:42.644 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.644 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:58:42.645 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.645 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.645 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 09:58:42.646 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:58:42.647 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.647 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:58:42.647 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.648 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.648 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 09:58:42.649 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 09:58:42.649 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.649 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:58:42.650 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.650 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.650 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 09:58:42.651 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:58:42.651 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.652 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 09:58:42.654 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.656 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.657 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 09:58:42.659 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:58:42.660 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 09:58:42.660 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 09:58:42.661 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 09:58:42.662 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:42.662 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1027(Long)
2020-04-19 09:58:42.663 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 09:58:42.663 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 09:58:42.664 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 09:58:42.664 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 09:58:43.740 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:58:43.740 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:58:43.741 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:58:43.742 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:58:43.742 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:58:43.744 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:58:43.816 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:58:43.816 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:58:43.816 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:58:43.816 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:58:43.817 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 09:58:43.818 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:59:05.154 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 09:59:05.155 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 09:59:05.157 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 09:59:05.157  INFO 17768 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-19 09:59:05.157  INFO 17768 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 09:59:05.202 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 09:59:05.203 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 09:59:05.205 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 09:59:05.206 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 09:59:05.207 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 09:59:05.209 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 09:59:05.467 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 09:59:05.468 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 09:59:05.469 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 09:59:05.470 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 09:59:05.470 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 09:59:05.471 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:03:21.292 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:03:21.292 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:03:21.293 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:03:21.293  INFO 17768 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-19 10:03:21.293  INFO 17768 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:03:21.316 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:03:21.318 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-19 10:03:21.321 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:03:21.322 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:03:21.322 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:03:21.323 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:03:21.480 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:03:21.480 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:03:21.480 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:03:21.480 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:03:21.481 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:03:21.481 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:05:05.347 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:05:05.347 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:05:05.347 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:05:05.347 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:05:05.347 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:05:05.348 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:05:06.238 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:05:06.238 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:05:06.240 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:05:06.240  INFO 17768 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-19 10:05:06.240  INFO 17768 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:05:06.485 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:05:06.485 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:05:06.485 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:05:06.485 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:05:06.487 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:05:06.487 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:05:50.686 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:05:50.687 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 2(Long), 2020-04-19 10:05:50.684(Timestamp), 2020-04-19 10:05:50.684(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 10:05:50.689 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:05:50.690 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:05:50.690 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1030(Long), 3(Long)
2020-04-19 10:05:50.691 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:06:16.062 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:06:16.063 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:06:16.064 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:06:16.064 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:06:16.069 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : <==      Total: 10
2020-04-19 10:06:16.070 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.070 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:06:16.072 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.072 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.073 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:06:16.076 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:06:16.077 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.078 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:06:16.079 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.079 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.079 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:06:16.081 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:06:16.081 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.081 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:06:16.082 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.082 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.082 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:06:16.083 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:06:16.084 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.084 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:06:16.084 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.085 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.085 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:06:16.086 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:06:16.086 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.086 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:06:16.087 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.087 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.087 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:06:16.088 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:06:16.088 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.088 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:06:16.089 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.089 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.089 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:06:16.091 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:06:16.092 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.093 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:06:16.094 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.094 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.095 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:06:16.096 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:06:16.096 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.096 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:06:16.097 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.098 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.098 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:06:16.099 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:06:16.099 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.099 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:06:16.100 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.100 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.100 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1027(Long)
2020-04-19 10:06:16.101 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:06:16.102 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:06:16.102 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:06:16.103 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:06:16.103 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:16.103 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1030(Long)
2020-04-19 10:06:16.104 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:06:16.104 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:06:16.104 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:06:16.105 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:06:19.448 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:06:19.448 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1030(Long)
2020-04-19 10:06:19.449 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:06:19.450 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:06:19.450 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1030(Long)
2020-04-19 10:06:19.452 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:06:19.543 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:06:19.544 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:06:19.544 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:06:19.544 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:06:19.545 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:06:19.546 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:11:52.962 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:11:52.963 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:11:52.964 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:11:52.965  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-19 10:11:52.965  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:11:53.001 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:11:53.002 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1030(Long)
2020-04-19 10:11:53.003 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:11:53.004 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:11:53.004 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1030(Long)
2020-04-19 10:11:53.006 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:11:53.230 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:11:53.231 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:11:53.232 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:11:53.233 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:11:53.234 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:11:53.235 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:12:06.899 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:12:06.899 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:12:06.899 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:12:06.899 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:12:06.900 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:12:06.900 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:15:01.113 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:15:01.117 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), false(Boolean), true(Boolean), 3(Long), 2020-04-19 10:15:01.11(Timestamp), 2020-04-19 10:15:01.11(Timestamp), 2(Integer)
2020-04-19 10:15:01.119 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:15:01.120 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:15:01.120 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1031(Long), 2(Long)
2020-04-19 10:15:01.121 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:15:02.354 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:15:02.354 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:15:02.355 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:15:02.355 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:15:02.359 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : <==      Total: 9
2020-04-19 10:15:02.360 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.360 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:15:02.362 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.365 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.365 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:15:02.366 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:15:02.367 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.367 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:15:02.368 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.368 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.368 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:15:02.369 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:15:02.369 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.369 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:15:02.370 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.370 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.370 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:15:02.371 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:15:02.373 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.373 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:15:02.375 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.376 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.377 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:15:02.379 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:15:02.381 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.382 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:15:02.384 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.384 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.385 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:15:02.386 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:15:02.387 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.387 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:15:02.387 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.388 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.388 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:15:02.389 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:15:02.389 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.389 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:15:02.390 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.390 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.390 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:15:02.391 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:15:02.392 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.392 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:15:02.392 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.393 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.393 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:15:02.394 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:15:02.394 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:15:02.394 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:15:02.396 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:15:02.398 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:02.399 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1031(Long)
2020-04-19 10:15:02.401 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:15:02.402 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:15:02.402 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:15:02.403 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:15:04.791 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:15:04.791 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1031(Long)
2020-04-19 10:15:04.792 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:15:04.793 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:15:04.793 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1031(Long)
2020-04-19 10:15:04.795 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:15:04.883 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:15:04.883 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:15:04.883 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:15:04.883 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:15:04.884 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:15:04.884 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:16:31.339 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:16:31.339 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:16:31.341 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:16:31.342  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-19 10:16:31.342  INFO 17768 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:16:31.531 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:16:31.531 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:16:31.532 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:16:31.532 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:16:31.532 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:16:31.533 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:17:00.355 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:17:00.356 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 10:17:00.354(Timestamp), 2020-04-19 10:17:00.354(Timestamp), 3(Integer)
2020-04-19 10:17:00.361 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:17:00.362 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:17:00.363 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1032(Long), 2(Long)
2020-04-19 10:17:00.364 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:18:05.407 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:18:05.407 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:18:05.409 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:18:05.409 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:18:05.419 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : <==      Total: 10
2020-04-19 10:18:05.422 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.422 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:18:05.423 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.424 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.424 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:18:05.426 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:18:05.427 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.427 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:18:05.428 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.429 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.429 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:18:05.431 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:18:05.431 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.432 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:18:05.432 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.433 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.433 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:18:05.435 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:18:05.436 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.437 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:18:05.440 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.440 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.440 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:18:05.442 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:18:05.442 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.442 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:18:05.443 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.444 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.444 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:18:05.445 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:18:05.445 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.445 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:18:05.446 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.446 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.446 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:18:05.447 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:18:05.448 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.448 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:18:05.448 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.448 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.448 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:18:05.450 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:18:05.452 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.452 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:18:05.455 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.456 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.456 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:18:05.458 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:18:05.458 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.458 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:18:05.459 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.460 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.460 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1031(Long)
2020-04-19 10:18:05.461 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:18:05.461 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:18:05.461 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:18:05.462 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:18:05.462 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:05.462 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1032(Long)
2020-04-19 10:18:05.463 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:18:05.463 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:18:05.463 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:18:05.464 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:18:17.358 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:18:17.359 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1032(Long)
2020-04-19 10:18:17.361 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:18:17.362 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:18:17.363 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1032(Long)
2020-04-19 10:18:17.364 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:18:17.478 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:18:17.478 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:18:17.479 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:18:17.480 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:18:17.480 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:18:17.482 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:18:33.388 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:18:33.389 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 10:18:33.387(Timestamp), 2020-04-19 10:18:33.387(Timestamp), 3(Integer)
2020-04-19 10:18:33.392 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:18:33.393 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:18:33.394 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1033(Long), 2(Long)
2020-04-19 10:18:33.395 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:18:47.216 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:18:47.219 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 10:18:47.215(Timestamp), 2020-04-19 10:18:47.215(Timestamp), 3(Integer)
2020-04-19 10:18:47.224 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:18:47.226 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:18:47.226 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1034(Long), 2(Long)
2020-04-19 10:18:47.227 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:19:30.975 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:19:30.975 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:19:30.977 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:19:30.978  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-19 10:19:30.978  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:19:33.838 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:19:33.838 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:19:33.839 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:19:33.839 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:19:33.848 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageForAdmin             : <==      Total: 8
2020-04-19 10:19:33.849 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:19:33.849 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:19:33.850 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:19:33.851 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:19:33.851 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:19:33.853 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:19:33.854 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:19:33.854 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:19:33.855 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:19:33.856 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:19:33.857 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:19:33.858 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:19:33.859 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:19:33.859 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:19:33.859 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:19:33.860 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:19:33.860 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:19:33.861 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:19:33.864 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:19:33.865 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:19:33.867 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:19:33.868 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:19:33.868 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:19:33.870 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:19:33.871 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:19:33.871 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:19:33.872 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:19:33.873 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:19:33.873 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:19:33.874 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:19:33.875 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:19:33.875 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:19:33.876 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:19:33.877 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:19:33.877 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:19:33.880 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:19:33.881 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:19:33.881 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:19:33.882 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:19:33.883 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:19:33.883 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:19:33.885 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:19:33.885 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:19:33.886 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:19:33.886 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:19:33.887 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:19:33.887 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:19:33.888 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:19:33.889 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:19:33.890 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:19:33.890 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:19:35.498 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:19:35.498 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:19:35.499 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:19:35.499 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:19:35.500 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:19:35.500 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:20:04.344 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:20:04.345 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 10:20:04.343(Timestamp), 2020-04-19 10:20:04.343(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 10:20:04.349 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:20:04.350 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:20:04.350 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1035(Long), 2(Long)
2020-04-19 10:20:04.351 DEBUG 17768 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:20:26.714 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:20:26.714 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 26(Long)
2020-04-19 10:20:26.717 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:20:26.723 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:26.723 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:20:26.725 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:20:26.911 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:20:26.911 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:20:26.911 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:20:26.911 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:20:26.911 DEBUG 17768 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:20:26.912 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:20:34.144 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:20:34.145 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 10:20:34.143(Timestamp), 2020-04-19 10:20:34.143(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 10:20:34.148 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:20:34.149 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:20:34.149 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1036(Long), 2(Long)
2020-04-19 10:20:34.150 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:20:38.502 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:20:38.502 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:20:38.503 DEBUG 17768 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:20:38.503  INFO 17768 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-19 10:20:38.503  INFO 17768 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:20:38.818 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:20:38.818 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:20:38.821 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:20:38.821 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:20:38.827 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : <==      Total: 10
2020-04-19 10:20:38.830 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.830 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:20:38.833 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.834 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.835 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:20:38.836 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:20:38.837 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.838 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:20:38.839 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.840 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.840 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:20:38.842 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:20:38.843 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.843 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:20:38.844 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.845 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.846 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:20:38.850 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:20:38.851 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.852 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:20:38.853 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.854 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.855 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:20:38.856 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:20:38.856 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.856 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:20:38.858 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.859 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.859 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:20:38.861 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:20:38.862 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.863 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:20:38.867 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.868 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.868 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:20:38.871 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:20:38.872 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.872 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:20:38.873 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.874 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.874 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:20:38.875 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:20:38.875 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.875 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:20:38.876 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.877 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.877 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:20:38.878 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:20:38.878 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.879 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:20:38.883 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.884 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.885 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1035(Long)
2020-04-19 10:20:38.886 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:20:38.887 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:20:38.887 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:20:38.888 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:20:38.888 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:20:38.888 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1036(Long)
2020-04-19 10:20:38.889 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:20:38.890 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:20:38.890 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:20:38.891 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:21:26.127 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:21:26.127 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:21:26.129 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:21:26.130  INFO 17768 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-19 10:21:26.130  INFO 17768 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:21:26.491 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:21:26.491 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:21:26.492 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:21:26.493 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:21:26.498 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageForAdmin             : <==      Total: 10
2020-04-19 10:21:26.499 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.499 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:21:26.501 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.503 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.504 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:21:26.507 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:21:26.508 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.508 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:21:26.509 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.509 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.509 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:21:26.511 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:21:26.511 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.511 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:21:26.512 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.513 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.514 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:21:26.515 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:21:26.516 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.516 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:21:26.517 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.517 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.517 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:21:26.519 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:21:26.521 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.521 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:21:26.523 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.524 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.524 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:21:26.525 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:21:26.526 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.526 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:21:26.527 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.528 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.528 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:21:26.532 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:21:26.533 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.533 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:21:26.535 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.537 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.538 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:21:26.539 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:21:26.540 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.540 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:21:26.541 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.541 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.541 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:21:26.542 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:21:26.542 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.543 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:21:26.543 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.544 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.544 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1035(Long)
2020-04-19 10:21:26.544 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:21:26.545 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:21:26.545 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:21:26.545 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:21:26.546 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:21:26.546 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1036(Long)
2020-04-19 10:21:26.546 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:21:26.547 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:21:26.547 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:21:26.547 DEBUG 17768 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:21:29.782 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:21:29.783 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:21:29.785 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:21:29.786 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:21:29.787 DEBUG 17768 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:21:29.789 DEBUG 17768 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:22:12.676 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:22:12.677 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: # Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 3(Long), 2020-04-19 10:22:12.675(Timestamp), 2020-04-19 10:22:12.675(Timestamp), 2(Integer), true(Boolean), true(Boolean)
2020-04-19 10:22:12.680 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:22:12.681 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:22:12.681 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1037(Long), 1(Long)
2020-04-19 10:22:12.682 DEBUG 17768 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:22:14.238 ERROR 17768 --- [http-nio-8888-exec-10] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8888-exec-10] Exception processing template "admin/article/article-list&rad=0.8234044173638151": Error resolving template [admin/article/article-list&rad=0.8234044173638151], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/article/article-list&rad=0.8234044173638151], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-04-19 10:22:14.243 ERROR 17768 --- [http-nio-8888-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/article/article-list&rad=0.8234044173638151], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/article/article-list&rad=0.8234044173638151], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-04-19 10:24:44.200 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:24:44.200 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:24:44.201 DEBUG 17768 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:24:44.202  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 2ms, description = 初始化后台主页}
2020-04-19 10:24:44.202  INFO 17768 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:24:44.477 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:24:44.478 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:24:44.479 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:24:44.479 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:24:44.479 DEBUG 17768 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:24:44.480 DEBUG 17768 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:26:30.729  INFO 12472 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12472 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-19 10:26:30.733 DEBUG 12472 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-19 10:26:30.733  INFO 12472 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-19 10:26:30.783  INFO 12472 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-19 10:26:30.784  INFO 12472 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-19 10:26:32.694  INFO 12472 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-19 10:26:32.709  INFO 12472 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-19 10:26:32.709  INFO 12472 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-19 10:26:32.858  INFO 12472 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-19 10:26:32.859  INFO 12472 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2075 ms
2020-04-19 10:26:33.251  INFO 12472 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-19 10:26:33.637  INFO 12472 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-19 10:26:33.891  INFO 7072 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 7072 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-19 10:26:33.894 DEBUG 7072 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-19 10:26:33.895  INFO 7072 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-19 10:26:33.940  INFO 7072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-19 10:26:33.940  INFO 7072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-19 10:26:34.615  INFO 12472 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-19 10:26:34.892  INFO 12472 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-19 10:26:34.943  INFO 12472 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-19 10:26:34.946  INFO 12472 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 4.966 seconds (JVM running for 5.917)
2020-04-19 10:26:35.222  INFO 7072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-19 10:26:35.230  INFO 7072 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-19 10:26:35.230  INFO 7072 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-19 10:26:35.363  INFO 7072 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-19 10:26:35.363  INFO 7072 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1423 ms
2020-04-19 10:26:35.577  INFO 7072 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-19 10:26:35.956  INFO 7072 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-19 10:26:36.803  INFO 7072 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-19 10:26:37.156  WARN 7072 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : Unable to start LiveReload server
2020-04-19 10:26:37.198  INFO 7072 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-19 10:26:37.203  INFO 7072 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-19 10:26:37.210 ERROR 7072 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8888 was already in use.

Action:

Identify and stop the process that's listening on port 8888 or configure this application to listen on another port.

2020-04-19 10:26:37.212  INFO 7072 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-19 10:26:37.215  INFO 7072 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-19 10:26:44.048  INFO 12472 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 10:26:44.048  INFO 12472 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-19 10:26:44.059  INFO 12472 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-19 10:26:44.575 DEBUG 12472 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:26:44.594 DEBUG 12472 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:26:44.610 DEBUG 12472 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:26:44.613  INFO 12472 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 108ms, description = 初始化后台主页}
2020-04-19 10:26:44.614  INFO 12472 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:26:45.016 DEBUG 12472 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:26:45.016 DEBUG 12472 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:26:45.022 DEBUG 12472 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:26:45.028 DEBUG 12472 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:26:45.029 DEBUG 12472 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:26:45.036 DEBUG 12472 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:26:56.563  INFO 8764 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 8764 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-19 10:26:56.568 DEBUG 8764 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-19 10:26:56.569  INFO 8764 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-19 10:26:56.631  INFO 8764 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-19 10:26:56.632  INFO 8764 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-19 10:26:58.401  INFO 8764 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-19 10:26:58.416  INFO 8764 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-19 10:26:58.417  INFO 8764 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-19 10:26:58.555  INFO 8764 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-19 10:26:58.556  INFO 8764 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1924 ms
2020-04-19 10:26:58.872  INFO 8764 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-19 10:26:59.153  INFO 8764 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-19 10:27:00.035  INFO 8764 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-19 10:27:00.334  INFO 8764 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-19 10:27:00.392  INFO 8764 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-19 10:27:00.395  INFO 8764 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 4.667 seconds (JVM running for 6.189)
2020-04-19 10:27:31.396  INFO 8764 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 10:27:31.396  INFO 8764 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-19 10:27:31.404  INFO 8764 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-19 10:29:01.293  INFO 8764 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-19 10:29:01.297  INFO 8764 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-19 10:29:01.311 DEBUG 8764 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:29:01.345 DEBUG 8764 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: # Mybatis中两种级联方式的介绍和性能对比(String), <h1 id="h1-mybatis-"><a name="Mybatis中两种级联方式的介绍和性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Mybatis中两种级联方式的介绍和性能对比</h1><h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 10:29:01.209(Timestamp), 2020-04-19 10:29:01.209(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 10:29:01.356 DEBUG 8764 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:29:01.366 DEBUG 8764 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:29:01.367 DEBUG 8764 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1038(Long), 1(Long)
2020-04-19 10:29:01.369 DEBUG 8764 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:29:07.119  INFO 984 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 984 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-19 10:29:07.121 DEBUG 984 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-19 10:29:07.122  INFO 984 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-19 10:29:07.166  INFO 984 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-19 10:29:07.166  INFO 984 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-19 10:29:08.288  INFO 984 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-19 10:29:08.294  INFO 984 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-19 10:29:08.295  INFO 984 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-19 10:29:08.365  INFO 984 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-19 10:29:08.365  INFO 984 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1199 ms
2020-04-19 10:29:08.599  INFO 984 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-19 10:29:08.879  INFO 984 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-19 10:29:09.694  INFO 984 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-19 10:29:09.961  INFO 984 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-19 10:29:10.009  INFO 984 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-19 10:29:10.012  INFO 984 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.607 seconds (JVM running for 4.516)
2020-04-19 10:29:10.050  INFO 984 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 10:29:10.050  INFO 984 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-19 10:29:10.060  INFO 984 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-19 10:29:10.809 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:29:10.833 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:29:10.857 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:29:10.861  INFO 984 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 127.0.0.1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 170ms, description = 初始化后台主页}
2020-04-19 10:29:10.862  INFO 984 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:29:11.602 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:29:11.604 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:29:11.614 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:29:11.617 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:29:11.618 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:29:11.635 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:29:43.263 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, text_content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:29:43.267 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: # Mybatis中两种级联方式的介绍和性能对比(String), <h1 id="h1-mybatis-"><a name="Mybatis中两种级联方式的介绍和性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Mybatis中两种级联方式的介绍和性能对比</h1><h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), # Mybatis中两种级联方式的介绍和性能对比

##基本介绍

最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：

![avatar](http://q8rsjstig.bkt.clouddn.com/note/1.png)

注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：

- 基于分层次查询的
- 基于SQL表连接的

这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。

- 基于分层次查询的

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" column="category_id"                 select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    
</resultMap>

<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>

<select id="selectArticleById1" parameterType="long" resultMap="resultMap1">
    select id, title, category_id from t_article where id = #{id}
</select>
```

- 基于SQL表连接的

```xml
<resultMap id="resultMap2" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" javaType="site.alanliang.geekblog.domain.Category">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </association>
    
</resultMap>

<select id="selectArticleById2" parameterType="long" resultMap="resultMap2">
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
</select>
```

注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？

查过资料后，我终于明白了：

分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。

基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。

我们做个测试，测试代码如下：

```java
@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
```

测试结果如下：

![avatar](http://q8rsjstig.bkt.clouddn.com/note/3.png)

![avatar](http://q8rsjstig.bkt.clouddn.com/note/4.png)

结果显而易见。

## 过程分析

- 基于分层次查询

我认为的大致过程是这样的。首先，测试中执行代码：

```java
 Article article = articleMapper.selectArticleById1(7L);
```

Mybatis会找到相应mapper文件中的这部分代码：

```xml
<select id="selectArticleById1" parameterType="long" resultMap="resultMap1">
    select id, title, category_id from t_article where id = #{id}
</select>
```

Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" column="category_id"                 select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    
</resultMap>
```

中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：

```xml
<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>
```

接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。

- 基于SQL表连接

这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。

##性能对比

首先我们先了解一下数据库表的结构和对应POJO对象：

###数据库表结构如下：

![avatat](http://q8rsjstig.bkt.clouddn.com/note/2.png)

###POJO - Article(文章)如下：

```java
@Data
@TableName("t_article")
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
	...
    @TableField(exist = false)
    private Category category;
    
    @TableField(exist = false)
    private List<Tag> tagList;
}

```

### POJO - Category(分类)如下：

```java
@Data
@TableName("t_category")
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;
    
    private String name;
    ...
}

```

### POJO - Tag(标签)如下：

```java
@Data
@TableName("t_tag")
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
	
    ...
}

```

### POJO - ArticleTag(文章标签关联)如下：

```java
@Data
@TableName("t_article_tag")
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}

```

需要特别说明一下的是，这里用到的`@Data`注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，`@TableName`、`@TableId`和 `@TableField`是MyBatisPlus提供的注解，其中`@TableName("t_article")`指明该实体类(Article)对应数据库表t_article，`@TableId(type = IdType.AUTO)`指定该属性(id)是对应表的注解，主键策略为ID自增。`@TableField(exist = false)`指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 https://mp.baomidou.com/guide/annotation.html

从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.alanliang.geekblog.mapper.ArticleMapper">
    <resultMap id="adminListResultMap" type="site.alanliang.geekblog.domain.Article">
        <id property="id" column="id"/>
       	...
        <association property="category" column="category_id"
                     select="site.alanliang.geekblog.mapper.CategoryMapper.selectByCid"/>
        <collection property="tagList" column="id" select="site.alanliang.geekblog.mapper.TagMapper.selectByArticleId"/>
    </resultMap>
</mapper>
```

其中\<association\>标签配置了Article与Category的级联关系，\<collection\>配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：

级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。

级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。

Mybatis中有3种级联：

- 鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。
- 一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。
- 一对多（collection）：比如班级和学生就是一种一对多的级联。

看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。

关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：

- 分层查询

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <association property="category" column="category_id"
               select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    <collection property="tagList" column="id" 		             	select="site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId"/>
</resultMap>

<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>

<select id="listTagsByArticleId" resultType="site.alanliang.geekblog.domain.Tag">
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
</select>

<select id="listArticles1" resultMap="resultMap1">
    select id, title, category_id
    from t_article
</select>
```

```java
@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List<Article> articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println("-----执行时间为"+(endTime-startTime)+"ms-----");
    System.out.println(articles);
}
```

3次执行结果：

```
-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
```

- 分层查询

```xml
<resultMap id="resultMap2" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <association property="category" javaType="site.alanliang.geekblog.domain.Category">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </association>
    <collection property="tagList" ofType="site.alanliang.geekblog.domain.Tag">
        <id property="id" column="id"/>
        <id property="name" column="name"/>
    </collection>
</resultMap>
```

```xml
<select id="listArticles2" resultMap="resultMap2">
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
</select>
```

```java
@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List<Article> articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println("-----执行时间为"+(endTime-startTime)+"ms-----");
    System.out.println(articles);
}
```

```
-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
```

这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。

原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。

分层查询的时间分别是：

```
-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
```

连接查询的时间分别是：

```
-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
```

这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。

## 总结

- 分层查询

  优点：SQL语句简单，容易理解和维护；

  缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）

- 连接查询

  优点：消除了N+1问题，在进行大量数据查询时效率比较高

  缺点：SQL语句复杂，不易理解和维护。

总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。

以上结论均基于个人的理解和总结，如果有不当之处还望指正！

(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 10:29:43.251(Timestamp), 2020-04-19 10:29:43.251(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 10:29:43.274 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:29:43.280 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:29:43.280 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1039(Long), 1(Long)
2020-04-19 10:29:43.282 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:29:44.674 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:29:44.675 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:29:44.683 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:29:44.684 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:29:44.743 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageForAdmin             : <==      Total: 13
2020-04-19 10:29:44.754 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.755 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.756 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.757 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.758 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:29:44.760 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:29:44.760 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.761 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:29:44.763 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.765 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.766 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:29:44.767 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.768 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.768 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:29:44.769 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.770 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.770 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:29:44.771 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.771 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.772 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.773 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.773 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.773 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:29:44.775 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:29:44.776 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.777 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.778 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.780 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.781 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:29:44.784 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:29:44.786 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.786 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.787 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.788 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.789 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:29:44.790 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:29:44.791 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.791 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.792 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.792 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.792 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:29:44.793 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.794 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.794 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.796 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.797 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.797 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:29:44.800 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.800 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.801 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.801 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.802 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.802 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1035(Long)
2020-04-19 10:29:44.803 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.804 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.804 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.805 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.805 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.805 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1036(Long)
2020-04-19 10:29:44.806 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.807 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.807 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:29:44.808 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.808 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.808 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1037(Long)
2020-04-19 10:29:44.809 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.810 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.810 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.813 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.814 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.815 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1038(Long)
2020-04-19 10:29:44.817 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.817 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:29:44.817 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:29:44.818 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:29:44.819 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:44.819 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:29:44.820 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:44.821 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:29:44.821 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:29:44.822 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:29:57.498 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:29:57.499 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1039(Long)
2020-04-19 10:29:57.503 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:29:57.506 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:29:57.506 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:29:57.508 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:29:57.667 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:29:57.667 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:29:57.667 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:29:57.667 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:29:57.669 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:29:57.671 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:30:17.200 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.ArticleMapper.deleteBatchIds     : ==>  Preparing: DELETE FROM t_article WHERE id IN ( ? , ? , ? , ? ) 
2020-04-19 10:30:17.200 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.ArticleMapper.deleteBatchIds     : ==> Parameters: 1035(Long), 1036(Long), 1037(Long), 1038(Long)
2020-04-19 10:30:17.205 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.ArticleMapper.deleteBatchIds     : <==    Updates: 4
2020-04-19 10:30:17.228 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:30:17.229 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:30:17.230 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:30:17.230 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:30:17.244 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageForAdmin             : <==      Total: 9
2020-04-19 10:30:17.245 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.245 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:17.247 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.248 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.248 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:30:17.251 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:30:17.252 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.252 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:30:17.253 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.255 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.255 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:30:17.257 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:17.258 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.258 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:30:17.260 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.263 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.264 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:30:17.266 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:17.268 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.268 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:17.268 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.269 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.269 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:30:17.270 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:17.271 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.271 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:17.272 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.272 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.273 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:30:17.274 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:17.275 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.275 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:17.277 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.277 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.277 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:30:17.277 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:17.278 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.278 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:17.279 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.279 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.279 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:30:17.280 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:17.281 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.281 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:17.282 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.282 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.282 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:30:17.283 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:17.283 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:17.284 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:17.284 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:17.285 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:17.285 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:30:17.286 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:17.288 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:30:17.288 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:30:17.289 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:30:37.487 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.listRecommendArticles          : ==>  Preparing: select id, title, summary, cover, category_id from t_article where recommend = 1 and published = 1 
2020-04-19 10:30:37.487 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.listRecommendArticles          : ==> Parameters: 
2020-04-19 10:30:37.489 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectList    : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 5 
2020-04-19 10:30:37.490 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectList    : ==> Parameters: true(Boolean), true(Boolean)
2020-04-19 10:30:37.491 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectList    : <==      Total: 5
2020-04-19 10:30:37.495 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.listRecommendArticles          : <==      Total: 5
2020-04-19 10:30:37.501 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.501 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 10:30:37.501 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:30:37.502 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 10:30:37.503 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.504 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.504 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:30:37.504 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 10:30:37.505 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 0(Long), 6(Long)
2020-04-19 10:30:37.506 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.507 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.507 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.508 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.509 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.510 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.510 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.511 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.511 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.512 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.513 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.A.listArticlesByPage             : <==      Total: 6
2020-04-19 10:30:37.521 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.521 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.522 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.522 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:37.523 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:30:37.526 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:37.527 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.528 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.529 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.530 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:37.531 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:30:37.536 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:37.537 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.537 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.539 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.540 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:37.540 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:30:37.542 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:37.544 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.544 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.546 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.547 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:37.547 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:30:37.551 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:37.552 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.553 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.555 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.556 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:37.556 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:30:37.558 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:37.560 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:37.560 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:37.562 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:37.563 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:37.563 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:30:37.566 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:44.935 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 10:30:44.937 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 10:30:44.941 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 10:30:44.942 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 6(Long), 6(Long)
2020-04-19 10:30:44.945 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.A.listArticlesByPage             : <==      Total: 3
2020-04-19 10:30:44.948 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:44.948 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:30:44.950 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:44.954 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:44.954 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:30:44.956 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:44.957 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:44.958 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:30:44.959 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:44.959 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:44.960 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:30:44.961 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:44.963 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:44.963 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:44.967 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:44.969 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:44.969 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:30:44.971 DEBUG 984 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:30:48.064 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 10:30:48.065 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 10:30:48.068 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 10:30:48.068 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 0(Long), 6(Long)
2020-04-19 10:30:48.075 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.A.listArticlesByPage             : <==      Total: 6
2020-04-19 10:30:48.076 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:48.076 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:48.077 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:48.077 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:48.078 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:30:48.080 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:48.085 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:48.086 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:48.094 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:48.095 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:48.096 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:30:48.098 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:48.100 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:48.100 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:48.102 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:48.103 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:48.104 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:30:48.106 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:48.107 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:48.107 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:48.108 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:48.109 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:48.109 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:30:48.111 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:48.112 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:48.112 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:48.113 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:48.115 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:48.115 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:30:48.117 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:48.118 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:48.119 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:48.120 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:48.121 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:48.121 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:30:48.123 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:49.705 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 10:30:49.706 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 10:30:49.707 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 10:30:49.708 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 6(Long), 6(Long)
2020-04-19 10:30:49.711 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.A.listArticlesByPage             : <==      Total: 3
2020-04-19 10:30:49.712 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:49.714 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:30:49.715 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:49.716 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:49.716 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:30:49.720 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:49.720 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:49.721 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:30:49.722 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:49.722 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:49.722 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:30:49.723 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:49.724 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:49.724 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:49.724 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:49.725 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:49.725 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:30:49.726 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:30:59.413 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.listRecommendArticles          : ==>  Preparing: select id, title, summary, cover, category_id from t_article where recommend = 1 and published = 1 
2020-04-19 10:30:59.414 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.listRecommendArticles          : ==> Parameters: 
2020-04-19 10:30:59.415 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectList    : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 5 
2020-04-19 10:30:59.415 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectList    : ==> Parameters: true(Boolean), true(Boolean)
2020-04-19 10:30:59.417 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectList    : <==      Total: 5
2020-04-19 10:30:59.418 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.listRecommendArticles          : <==      Total: 5
2020-04-19 10:30:59.420 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.420 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:30:59.421 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.421 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 10:30:59.422 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 10:30:59.423 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.423 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:30:59.423 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.424 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.424 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.425 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.426 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.426 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.427 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.427 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 10:30:59.428 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 0(Long), 6(Long)
2020-04-19 10:30:59.428 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.429 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.429 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.433 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.A.listArticlesByPage             : <==      Total: 6
2020-04-19 10:30:59.434 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.435 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.436 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.437 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:59.437 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:30:59.439 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:59.439 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.440 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.441 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.441 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:59.441 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:30:59.443 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:59.444 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.445 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.446 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.447 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:59.447 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:30:59.449 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:30:59.449 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.450 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.450 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.451 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:59.451 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:30:59.453 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:59.454 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.455 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.457 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.458 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:59.458 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:30:59.459 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:30:59.461 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:30:59.461 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:30:59.463 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:30:59.464 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:30:59.464 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:30:59.466 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:34:24.940 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-19 10:34:24.941 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-19 10:34:24.944 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 7
2020-04-19 10:34:24.945  INFO 984 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-19 10:34:24.945  INFO 984 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/admin/api/user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/admin/api/article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/admin/api/article/article-list, target=null, child=null), MenuVo(id=6, pid=1, title=分类管理, icon=fa fa-bookmark, href=/admin/api/category/category-list, target=null, child=null), MenuVo(id=7, pid=1, title=标签管理, icon=fa fa-tags, href=/admin/api/tag/tag-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/admin/api/home/dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/admin/layuimini/images/logo.png)),[]>
2020-04-19 10:34:25.156 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:34:25.156 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:34:25.158 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:34:25.158 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:34:25.170 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageForAdmin             : <==      Total: 9
2020-04-19 10:34:25.171 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.171 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:34:25.172 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.172 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.172 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:34:25.174 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:34:25.174 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.175 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:34:25.175 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.176 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.176 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:34:25.180 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:34:25.183 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.183 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:34:25.184 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.185 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.185 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:34:25.186 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:34:25.186 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.187 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:34:25.187 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.188 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.188 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:34:25.189 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:34:25.189 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.189 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:34:25.190 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.191 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.191 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:34:25.192 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:34:25.193 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.193 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:34:25.197 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.198 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.198 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:34:25.199 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:34:25.200 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.200 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:34:25.201 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.201 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.201 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:34:25.202 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:34:25.203 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.204 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:34:25.205 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.206 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.206 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:34:25.208 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:34:25.209 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:34:25.209 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:34:25.213 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:34:25.214 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:34:25.214 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:34:25.216 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:34:25.217 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:34:25.217 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:34:25.219 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:34:26.781 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:34:26.782 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:34:26.782 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:34:26.783 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:34:26.783 DEBUG 984 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:34:26.784 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:36:32.851 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, content, text_content, cover, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 10:36:32.853 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/3.png" alt="avatar"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://q8rsjstig.bkt.clouddn.com/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 

##基本介绍

最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：

![avatar](http://q8rsjstig.bkt.clouddn.com/note/1.png)

注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：

- 基于分层次查询的
- 基于SQL表连接的

这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。

- 基于分层次查询的

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" column="category_id"                 select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    
</resultMap>

<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>

<select id="selectArticleById1" parameterType="long" resultMap="resultMap1">
    select id, title, category_id from t_article where id = #{id}
</select>
```

- 基于SQL表连接的

```xml
<resultMap id="resultMap2" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" javaType="site.alanliang.geekblog.domain.Category">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </association>
    
</resultMap>

<select id="selectArticleById2" parameterType="long" resultMap="resultMap2">
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
</select>
```

注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？

查过资料后，我终于明白了：

分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。

基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。

我们做个测试，测试代码如下：

```java
@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
```

测试结果如下：

![avatar](http://q8rsjstig.bkt.clouddn.com/note/3.png)

![avatar](http://q8rsjstig.bkt.clouddn.com/note/4.png)

结果显而易见。

## 过程分析

- 基于分层次查询

我认为的大致过程是这样的。首先，测试中执行代码：

```java
 Article article = articleMapper.selectArticleById1(7L);
```

Mybatis会找到相应mapper文件中的这部分代码：

```xml
<select id="selectArticleById1" parameterType="long" resultMap="resultMap1">
    select id, title, category_id from t_article where id = #{id}
</select>
```

Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" column="category_id"                 select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    
</resultMap>
```

中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：

```xml
<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>
```

接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。

- 基于SQL表连接

这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。

##性能对比

首先我们先了解一下数据库表的结构和对应POJO对象：

###数据库表结构如下：

![avatat](http://q8rsjstig.bkt.clouddn.com/note/2.png)

###POJO - Article(文章)如下：

```java
@Data
@TableName("t_article")
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
	...
    @TableField(exist = false)
    private Category category;
    
    @TableField(exist = false)
    private List<Tag> tagList;
}

```

### POJO - Category(分类)如下：

```java
@Data
@TableName("t_category")
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;
    
    private String name;
    ...
}

```

### POJO - Tag(标签)如下：

```java
@Data
@TableName("t_tag")
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
	
    ...
}

```

### POJO - ArticleTag(文章标签关联)如下：

```java
@Data
@TableName("t_article_tag")
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}

```

需要特别说明一下的是，这里用到的`@Data`注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，`@TableName`、`@TableId`和 `@TableField`是MyBatisPlus提供的注解，其中`@TableName("t_article")`指明该实体类(Article)对应数据库表t_article，`@TableId(type = IdType.AUTO)`指定该属性(id)是对应表的注解，主键策略为ID自增。`@TableField(exist = false)`指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 https://mp.baomidou.com/guide/annotation.html

从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.alanliang.geekblog.mapper.ArticleMapper">
    <resultMap id="adminListResultMap" type="site.alanliang.geekblog.domain.Article">
        <id property="id" column="id"/>
       	...
        <association property="category" column="category_id"
                     select="site.alanliang.geekblog.mapper.CategoryMapper.selectByCid"/>
        <collection property="tagList" column="id" select="site.alanliang.geekblog.mapper.TagMapper.selectByArticleId"/>
    </resultMap>
</mapper>
```

其中\<association\>标签配置了Article与Category的级联关系，\<collection\>配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：

级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。

级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。

Mybatis中有3种级联：

- 鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。
- 一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。
- 一对多（collection）：比如班级和学生就是一种一对多的级联。

看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。

关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：

- 分层查询

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <association property="category" column="category_id"
               select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    <collection property="tagList" column="id" 		             	select="site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId"/>
</resultMap>

<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>

<select id="listTagsByArticleId" resultType="site.alanliang.geekblog.domain.Tag">
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
</select>

<select id="listArticles1" resultMap="resultMap1">
    select id, title, category_id
    from t_article
</select>
```

```java
@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List<Article> articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println("-----执行时间为"+(endTime-startTime)+"ms-----");
    System.out.println(articles);
}
```

3次执行结果：

```
-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
```

- 分层查询

```xml
<resultMap id="resultMap2" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <association property="category" javaType="site.alanliang.geekblog.domain.Category">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </association>
    <collection property="tagList" ofType="site.alanliang.geekblog.domain.Tag">
        <id property="id" column="id"/>
        <id property="name" column="name"/>
    </collection>
</resultMap>
```

```xml
<select id="listArticles2" resultMap="resultMap2">
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
</select>
```

```java
@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List<Article> articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println("-----执行时间为"+(endTime-startTime)+"ms-----");
    System.out.println(articles);
}
```

```
-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
```

这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。

原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。

分层查询的时间分别是：

```
-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
```

连接查询的时间分别是：

```
-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
```

这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。

## 总结

- 分层查询

  优点：SQL语句简单，容易理解和维护；

  缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）

- 连接查询

  优点：消除了N+1问题，在进行大量数据查询时效率比较高

  缺点：SQL语句复杂，不易理解和维护。

总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。

以上结论均基于个人的理解和总结，如果有不当之处还望指正！

(String), http://q8rsjstig.bkt.clouddn.com/image/2.jpg(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-19 10:36:32.848(Timestamp), 2020-04-19 10:36:32.848(Timestamp), 1(Integer), true(Boolean), true(Boolean)
2020-04-19 10:36:32.860 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-19 10:36:32.861 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-19 10:36:32.862 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1040(Long), 2(Long)
2020-04-19 10:36:32.864 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-19 10:36:33.954 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: SELECT COUNT(1) FROM t_article 
2020-04-19 10:36:33.954 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 
2020-04-19 10:36:33.955 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==>  Preparing: select id, title, type, comments, views, likes, published, commentable, appreciable, top, recommend, create_time, update_time, category_id from t_article LIMIT ?,? 
2020-04-19 10:36:33.956 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : ==> Parameters: 0(Long), 15(Long)
2020-04-19 10:36:33.964 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageForAdmin             : <==      Total: 10
2020-04-19 10:36:33.965 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.965 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:33.967 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.967 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.967 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-19 10:36:33.969 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-19 10:36:33.969 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.969 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:36:33.970 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.970 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.970 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-19 10:36:33.971 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:33.971 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.971 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:36:33.972 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.972 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.972 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-19 10:36:33.973 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:33.973 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.973 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:33.973 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.973 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.973 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:36:33.974 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:36:33.974 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.975 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:33.975 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.976 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.976 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:36:33.977 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:36:33.977 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.977 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:33.980 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.980 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.980 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:36:33.984 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:36:33.984 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.984 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:33.985 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.985 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.985 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:36:33.986 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:33.986 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.987 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:33.987 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.987 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.987 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:36:33.988 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:33.988 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.988 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:33.989 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.989 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.989 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:36:33.990 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:33.990 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:33.991 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:33.991 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:33.992 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:33.992 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1040(Long)
2020-04-19 10:36:33.992 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:33.993 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-19 10:36:33.993 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-19 10:36:33.994 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-19 10:36:37.002 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:36:37.002 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1040(Long)
2020-04-19 10:36:37.004 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:36:37.005 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:37.005 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1040(Long)
2020-04-19 10:36:37.007 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:37.083 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:36:37.083 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:36:37.083 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:36:37.084 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:36:37.084 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:36:37.085 DEBUG 984 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-19 10:36:41.868 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.listRecommendArticles          : ==>  Preparing: select id, title, summary, cover, category_id from t_article where recommend = 1 and published = 1 
2020-04-19 10:36:41.868 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.listRecommendArticles          : ==> Parameters: 
2020-04-19 10:36:41.868 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectList    : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 5 
2020-04-19 10:36:41.868 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectList    : ==> Parameters: true(Boolean), true(Boolean)
2020-04-19 10:36:41.870 DEBUG 984 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectList    : <==      Total: 5
2020-04-19 10:36:41.870 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 10:36:41.871 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 10:36:41.872 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 10:36:41.872 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 0(Long), 6(Long)
2020-04-19 10:36:41.873 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.A.listRecommendArticles          : <==      Total: 6
2020-04-19 10:36:41.874 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.874 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:36:41.876 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.878 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.878 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:36:41.879 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.879 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.A.listArticlesByPage             : <==      Total: 6
2020-04-19 10:36:41.879 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.879 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.880 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.880 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.880 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.881 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.881 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.881 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.881 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.881 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:41.881 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1040(Long)
2020-04-19 10:36:41.881 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.882 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.882 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.883 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:41.883 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.883 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.884 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.884 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.884 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.884 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.885 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:41.885 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1039(Long)
2020-04-19 10:36:41.887 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:41.887 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.888 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.889 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.889 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:41.890 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:36:41.892 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:41.894 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.894 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.896 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.896 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:41.896 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:36:41.898 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:36:41.900 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.900 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.901 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.903 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:41.903 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:36:41.905 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:36:41.905 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:36:41.906 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:36:41.906 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:36:41.907 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:36:41.907 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:36:41.909 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:37:02.498 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.deleteById    : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-04-19 10:37:02.500 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.deleteById    : ==> Parameters: 1039(Long)
2020-04-19 10:37:02.501 DEBUG 984 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.deleteById    : <==    Updates: 1
2020-04-19 10:37:05.159 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.A.listRecommendArticles          : ==>  Preparing: select id, title, summary, cover, category_id from t_article where recommend = 1 and published = 1 
2020-04-19 10:37:05.159 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.A.listRecommendArticles          : ==> Parameters: 
2020-04-19 10:37:05.160 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectList    : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 5 
2020-04-19 10:37:05.160 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectList    : ==> Parameters: true(Boolean), true(Boolean)
2020-04-19 10:37:05.161 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectList    : <==      Total: 5
2020-04-19 10:37:05.162 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: SELECT COUNT(1) FROM t_article WHERE (published = ?) 
2020-04-19 10:37:05.162 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean)
2020-04-19 10:37:05.164 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.listArticlesByPage             : ==>  Preparing: select id, title, summary, create_time, cover, category_id from t_article WHERE (published = ?) ORDER BY create_time DESC LIMIT ?,? 
2020-04-19 10:37:05.165 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.listArticlesByPage             : ==> Parameters: true(Boolean), 0(Long), 6(Long)
2020-04-19 10:37:05.165 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.A.listRecommendArticles          : <==      Total: 5
2020-04-19 10:37:05.168 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.169 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 2(Long)
2020-04-19 10:37:05.170 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.171 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.171 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 3(Long)
2020-04-19 10:37:05.172 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.173 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.A.listArticlesByPage             : <==      Total: 6
2020-04-19 10:37:05.173 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.173 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.174 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.174 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.174 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.175 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.175 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.175 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.175 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:37:05.175 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1040(Long)
2020-04-19 10:37:05.175 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.176 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.176 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.177 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:37:05.177 DEBUG 984 --- [http-nio-8888-exec-9] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.178 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.178 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.179 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.180 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:37:05.180 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 26(Long)
2020-04-19 10:37:05.182 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:37:05.182 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.182 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.183 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.184 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:37:05.184 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 25(Long)
2020-04-19 10:37:05.185 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:37:05.186 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.186 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.188 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.189 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:37:05.190 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 24(Long)
2020-04-19 10:37:05.193 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:37:05.194 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.194 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.195 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.195 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:37:05.195 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 23(Long)
2020-04-19 10:37:05.197 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:37:05.197 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==>  Preparing: select id, name from t_category where id = ? 
2020-04-19 10:37:05.198 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : ==> Parameters: 1(Long)
2020-04-19 10:37:05.199 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.C.selectCategoryById             : <==      Total: 1
2020-04-19 10:37:05.200 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:37:05.200 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 22(Long)
2020-04-19 10:37:05.201 DEBUG 984 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 4
2020-04-19 10:37:46.990 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-04-19 10:37:46.990 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1040(Long)
2020-04-19 10:37:46.992 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-19 10:37:46.993 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-19 10:37:46.993 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1040(Long)
2020-04-19 10:37:46.995 DEBUG 984 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-19 10:37:47.098 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time,update_time FROM t_tag 
2020-04-19 10:37:47.099 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-19 10:37:47.099 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,display,introduction,create_time,update_time FROM t_category 
2020-04-19 10:37:47.099 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-19 10:37:47.100 DEBUG 984 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 9
2020-04-19 10:37:47.101 DEBUG 984 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
