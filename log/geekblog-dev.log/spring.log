2020-04-09 09:18:50.564  INFO 12168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12168 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 09:18:50.569 DEBUG 12168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 09:18:50.570  INFO 12168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 09:18:50.622  INFO 12168 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 09:18:50.622  INFO 12168 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 09:18:51.864  INFO 12168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 09:18:51.873  INFO 12168 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 09:18:51.873  INFO 12168 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 09:18:51.942  INFO 12168 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 09:18:51.942  INFO 12168 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1319 ms
2020-04-09 09:18:52.107  INFO 12168 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 09:18:52.349  INFO 12168 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 09:18:53.391  INFO 12168 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 09:18:53.464  INFO 12168 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 09:18:53.643  INFO 12168 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 09:18:53.703  INFO 12168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 09:18:53.706  INFO 12168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.87 seconds (JVM running for 4.756)
2020-04-09 09:19:18.299  INFO 12168 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 09:19:18.306  INFO 12168 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 09:19:18.306  INFO 12168 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 09:19:18.316  INFO 12168 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-09 09:19:19.873 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:19:19.901 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:19:19.918 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:19:19.921  INFO 12168 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 235ms, description = 初始化后台主页}
2020-04-09 09:19:19.922  INFO 12168 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:19:24.518 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-09 09:19:24.519 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-09 09:19:24.527 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-09 09:19:24.532 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:19:24.537 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-09 09:19:24.537  INFO 12168 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 78ms, description = 分页查询用户}
2020-04-09 09:19:24.538  INFO 12168 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-09 09:19:27.390 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:19:27.390 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:19:27.393 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:19:27.395 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:19:27.396 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:19:27.401 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:31:18.874 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:31:18.874 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:31:18.877 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:31:18.877  INFO 12168 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 11ms, description = 初始化后台主页}
2020-04-09 09:31:18.877  INFO 12168 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:31:19.191 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:31:19.192 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:31:19.192 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:31:19.192 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:31:19.195 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:31:19.198 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:31:22.291 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:31:22.291 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:31:22.291 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:31:22.292 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:31:22.294 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:31:22.294 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:32:11.591 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:32:11.593 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:32:11.596 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:32:11.597 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:32:11.666 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:32:11.680 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.680 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:32:11.681 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:32:11.682 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.682 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:32:11.683 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.684 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.684 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:32:11.685 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.686 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.686 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:32:11.688 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.689 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.690 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:32:11.694 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.696 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.697 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:32:11.698 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.699 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.700 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:32:11.700 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.701 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.701 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:32:11.702 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.703 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.703 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:32:11.703 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.704 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.704 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:32:11.705 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.706 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.707 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:32:11.711 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:32:11.712 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:11.712 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:32:11.713 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:32:11.714 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:32:11.714 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:32:11.715 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:32:13.526 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:32:13.527 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-09 09:32:13.530 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:32:13.531 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:32:13.531 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:32:13.534 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:32:13.716 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:32:13.717 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:32:13.717 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:32:13.717 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:32:13.719 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:32:13.719 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:38:01.142 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:38:01.142 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:38:01.144 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:38:01.145  INFO 12168 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-09 09:38:01.145  INFO 12168 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:38:01.174 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:38:01.175 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-09 09:38:01.177 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:38:01.178 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:38:01.179 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:38:01.182 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:38:01.438 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:38:01.439 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:38:01.440 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:38:01.441 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:38:01.442 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:38:01.443 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:38:06.032 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:38:06.033 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:38:06.039 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:38:06.040  INFO 12168 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-09 09:38:06.040  INFO 12168 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:38:06.078 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:38:06.078 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-09 09:38:06.080 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:38:06.081 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:38:06.082 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:38:06.083 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:38:06.616 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:38:06.616 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:38:06.616 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:38:06.616 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:38:06.618 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:38:06.618 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:39:02.268 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:39:02.268 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:39:02.270 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:39:02.270  INFO 12168 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-09 09:39:02.270  INFO 12168 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:39:02.296 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:39:02.297 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-09 09:39:02.299 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:39:02.301 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:02.301 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:39:02.303 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:39:02.627 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:39:02.628 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:39:02.629 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:39:02.629 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:39:02.630 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:39:02.631 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:39:12.263 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-09 09:39:12.264 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-09 09:39:12.265 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-09 09:39:12.266 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:39:12.270 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-09 09:39:12.271  INFO 12168 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 9ms, description = 分页查询用户}
2020-04-09 09:39:12.272  INFO 12168 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-09 09:39:14.460 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:39:14.460 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:39:14.460 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:39:14.460 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:39:14.462 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:39:14.462 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:39:20.895 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:39:20.896 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:39:20.897 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:39:20.898 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:39:20.912 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:39:20.913 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.913 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:39:20.914 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:39:20.915 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.915 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:39:20.916 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.917 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.917 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:39:20.920 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.924 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.924 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:39:20.925 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.927 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.927 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:39:20.928 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.929 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.929 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:39:20.930 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.930 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.930 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:39:20.931 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.932 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.932 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:39:20.933 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.933 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.933 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:39:20.936 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.937 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.937 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:39:20.940 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.941 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.941 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:39:20.942 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:39:20.943 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:39:20.943 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:39:20.944 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:39:20.944 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:39:20.944 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:39:20.945 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:39:25.162 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:39:25.162 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:39:25.162 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:39:25.162 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:39:25.163 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:39:25.164 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:40:34.915 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:40:34.917 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:40:34.923 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:40:34.924  INFO 12168 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 12ms, description = 初始化后台主页}
2020-04-09 09:40:34.924  INFO 12168 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:40:38.173 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-09 09:40:38.173 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-09 09:40:38.175 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-09 09:40:38.176 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:40:38.178 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-09 09:40:38.179  INFO 12168 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 6ms, description = 分页查询用户}
2020-04-09 09:40:38.179  INFO 12168 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-09 09:40:44.520 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:40:44.520 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:40:44.522 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:40:44.522 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:40:44.527 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:40:44.528 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.528 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:40:44.530 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:40:44.532 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.532 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:40:44.533 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.534 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.534 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:40:44.541 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.542 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.542 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:40:44.545 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.546 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.546 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:40:44.548 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.550 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.551 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:40:44.552 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.554 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.555 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:40:44.556 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.557 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.557 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:40:44.558 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.558 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.558 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:40:44.559 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.560 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.560 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:40:44.561 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.561 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.562 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:40:44.562 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:40:44.563 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:40:44.563 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:40:44.566 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:40:44.567 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:40:44.567 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:40:44.569 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:41:00.893 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:41:00.894 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:41:00.897 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:41:00.898  INFO 12168 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-09 09:41:00.899  INFO 12168 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:41:01.148 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:41:01.149 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:41:01.151 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:41:01.152 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:41:01.165 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:41:01.166 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.167 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:41:01.168 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:41:01.169 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.169 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:41:01.170 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.171 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.171 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:41:01.172 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.173 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.173 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:41:01.174 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.175 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.176 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:41:01.180 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.181 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.181 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:41:01.183 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.184 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.184 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:41:01.185 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.185 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.186 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:41:01.187 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.187 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.187 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:41:01.188 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.189 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.189 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:41:01.190 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.191 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.191 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:41:01.192 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:01.193 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:01.194 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:41:01.197 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:41:01.199 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:41:01.199 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:41:01.201 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:41:12.154 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:41:12.155 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 19(Long)
2020-04-09 09:41:12.158 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:41:12.159 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:12.159 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:41:12.161 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:12.310 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:41:12.311 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:41:12.313 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:41:12.314 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:41:12.314 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:41:12.316 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:41:16.242 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, views=?, likes=?, comments=?, appreciable=?, commentable=?, published=?, category_id=?, create_time=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:41:16.247 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 09:41:16.233(Timestamp), 2020-04-09 09:41:16.233(Timestamp), 1(Integer), 19(Long)
2020-04-09 09:41:16.252 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:41:16.254 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:41:16.254 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 19(Long)
2020-04-09 09:41:16.257 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:41:16.259 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 09:41:16.259 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 19(Long), 1(Long)
2020-04-09 09:41:16.260 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 09:41:17.696 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:41:17.696 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:41:17.697 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:41:17.697 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:41:17.708 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:41:17.709 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.709 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:41:17.711 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:41:17.712 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.712 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:41:17.712 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.713 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.713 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:41:17.714 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.714 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.714 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:41:17.715 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.715 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.715 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:41:17.716 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.716 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.716 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:41:17.717 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.717 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.717 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:41:17.718 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.718 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.718 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:41:17.719 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.719 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.719 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:41:17.720 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.721 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.721 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:41:17.722 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.724 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.724 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:41:17.726 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:17.727 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:17.727 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:41:17.728 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:41:17.729 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:41:17.729 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:41:17.730 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:41:31.142 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, views=?, likes=?, comments=?, appreciable=?, commentable=?, published=?, category_id=?, create_time=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:41:31.144 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第3章	认识Mybatis核心组件12(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 09:41:31.141(Timestamp), 2020-04-09 09:41:31.141(Timestamp), 1(Integer), 19(Long)
2020-04-09 09:41:31.148 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:41:31.149 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:41:31.150 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 19(Long)
2020-04-09 09:41:31.151 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:41:31.152 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 09:41:31.152 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 19(Long), 1(Long)
2020-04-09 09:41:31.153 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 09:41:36.307 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:41:36.307 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:41:36.309 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:41:36.309  INFO 12168 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-09 09:41:36.309  INFO 12168 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:41:36.525 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:41:36.525 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:41:36.527 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:41:36.528 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:41:36.539 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:41:36.540 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.540 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:41:36.543 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:41:36.544 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.544 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:41:36.545 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.546 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.546 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:41:36.547 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.548 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.548 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:41:36.549 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.551 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.552 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:41:36.556 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.557 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.558 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:41:36.560 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.561 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.562 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:41:36.563 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.563 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.564 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:41:36.564 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.565 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.565 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:41:36.566 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.567 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.567 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:41:36.572 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.573 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.573 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:41:36.575 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:36.575 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:36.576 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:41:36.577 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:41:36.578 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:41:36.578 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:41:36.579 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:41:41.214 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:41:41.214 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 19(Long)
2020-04-09 09:41:41.216 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:41:41.217 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:41:41.217 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:41:41.219 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:41:41.364 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:41:41.364 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:41:41.364 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:41:41.364 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:41:41.365 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:41:41.365 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:41:44.255 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, views=?, likes=?, comments=?, appreciable=?, commentable=?, published=?, category_id=?, create_time=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:41:44.257 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 09:41:44.251(Timestamp), 2020-04-09 09:41:44.251(Timestamp), 1(Integer), 19(Long)
2020-04-09 09:41:44.262 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:41:44.263 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:41:44.263 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 19(Long)
2020-04-09 09:41:44.264 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:41:44.265 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 09:41:44.265 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 19(Long), 1(Long)
2020-04-09 09:41:44.266 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 09:42:47.521 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:42:47.522 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:42:47.524 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:42:47.524  INFO 12168 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-09 09:42:47.524  INFO 12168 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:42:47.778 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:42:47.779 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:42:47.780 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:42:47.780 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:42:47.794 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:42:47.796 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.796 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:42:47.798 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:42:47.799 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.800 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:42:47.804 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.805 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.806 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:42:47.807 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.808 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.808 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:42:47.810 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.811 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.811 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:42:47.813 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.814 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.814 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:42:47.816 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.819 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.820 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:42:47.822 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.823 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.824 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:42:47.825 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.825 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.826 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:42:47.827 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.828 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.828 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:42:47.829 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.830 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.830 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:42:47.831 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:47.831 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:47.831 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:42:47.832 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:42:47.833 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:42:47.833 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:42:47.836 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:42:52.969 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:42:52.969 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 18(Long)
2020-04-09 09:42:52.970 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:42:52.971 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:52.971 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:42:52.973 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:53.111 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:42:53.111 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:42:53.111 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:42:53.111 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:42:53.111 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:42:53.112 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:42:55.350 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, views=?, likes=?, comments=?, appreciable=?, commentable=?, published=?, category_id=?, create_time=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:42:55.352 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第3章	认识Mybatis核心组件12(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 09:42:55.348(Timestamp), 2020-04-09 09:42:55.348(Timestamp), 1(Integer), 18(Long)
2020-04-09 09:42:55.358 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:42:55.359 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:42:55.359 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 18(Long)
2020-04-09 09:42:55.360 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:42:55.361 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 09:42:55.361 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 18(Long), 1(Long)
2020-04-09 09:42:55.361 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 09:42:56.356 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:42:56.356 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:42:56.357 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:42:56.357 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:42:56.366 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:42:56.367 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.367 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:42:56.370 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:42:56.371 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.371 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:42:56.372 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.372 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.372 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:42:56.373 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.373 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.373 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:42:56.374 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.375 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.375 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:42:56.375 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.376 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.376 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:42:56.376 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.377 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.377 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:42:56.377 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.378 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.378 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:42:56.378 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.379 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.379 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:42:56.379 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.380 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.380 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:42:56.381 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.383 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.383 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:42:56.385 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:42:56.385 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:42:56.385 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:42:56.386 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:42:56.387 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:42:56.387 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:42:56.388 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:43:03.143 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, views=?, likes=?, comments=?, appreciable=?, commentable=?, published=?, category_id=?, create_time=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:43:03.145 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 09:43:03.141(Timestamp), 2020-04-09 09:43:03.141(Timestamp), 1(Integer), 18(Long)
2020-04-09 09:43:03.150 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:43:03.151 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:43:03.151 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 18(Long)
2020-04-09 09:43:03.152 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:43:03.153 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 09:43:03.153 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 18(Long), 1(Long)
2020-04-09 09:43:03.153 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 09:43:04.153 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:43:04.153 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:43:04.155 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:43:04.155 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:43:04.161 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:43:04.161 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.162 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:43:04.166 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:43:04.167 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.167 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:43:04.168 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.169 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.169 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:43:04.170 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.170 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.170 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:43:04.171 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.171 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.172 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:43:04.172 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.173 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.173 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:43:04.173 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.174 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.174 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:43:04.174 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.175 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.175 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:43:04.175 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.176 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.176 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:43:04.177 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.177 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.177 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:43:04.178 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.178 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.178 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:43:04.181 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:04.183 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:04.184 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:43:04.185 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:43:04.186 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:43:04.186 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:43:04.187 DEBUG 12168 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:43:55.349 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:43:55.349 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:43:55.353 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:43:55.354  INFO 12168 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-09 09:43:55.354  INFO 12168 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:43:55.565 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:43:55.566 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:43:55.570 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:43:55.571 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:43:55.588 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:43:55.589 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.589 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:43:55.591 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:43:55.592 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.592 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:43:55.593 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.594 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.594 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:43:55.595 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.596 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.596 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:43:55.597 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.598 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.598 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:43:55.599 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.600 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.600 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:43:55.603 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.604 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.604 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:43:55.605 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.607 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.607 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:43:55.609 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.610 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.610 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:43:55.612 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.613 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.613 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:43:55.614 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.615 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.615 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:43:55.616 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:43:55.617 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:43:55.617 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:43:55.618 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:43:55.619 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:43:55.620 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:43:55.622 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:44:03.829 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:44:03.829 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:44:03.830 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:44:03.830  INFO 12168 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-09 09:44:03.830  INFO 12168 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:44:04.068 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:44:04.069 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:44:04.071 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:44:04.071 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:44:04.085 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:44:04.086 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.086 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:44:04.088 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:44:04.089 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.089 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:44:04.090 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.090 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.090 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:44:04.091 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.092 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.092 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:44:04.093 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.094 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.094 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:44:04.095 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.095 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.096 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:44:04.097 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.098 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.099 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:44:04.102 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.103 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.104 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:44:04.105 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.106 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.106 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:44:04.108 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.109 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.110 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:44:04.111 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.112 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.112 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:44:04.113 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:04.116 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:04.117 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:44:04.120 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:44:04.121 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:44:04.121 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:44:04.122 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:44:25.349 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:44:25.350 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-09 09:44:25.352 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:44:25.353 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:25.353 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:44:25.354 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:25.529 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:44:25.530 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:44:25.531 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:44:25.531 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:44:25.531 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:44:25.532 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:44:28.315 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, views=?, likes=?, comments=?, appreciable=?, commentable=?, published=?, category_id=?, create_time=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:44:28.317 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第2章	Java设计模式12(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 09:44:28.314(Timestamp), 2020-04-09 09:44:28.314(Timestamp), 1(Integer), 10(Long)
2020-04-09 09:44:28.328 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:44:28.329 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:44:28.329 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 10(Long)
2020-04-09 09:44:28.330 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:44:28.330 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 09:44:28.330 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 10(Long), 1(Long)
2020-04-09 09:44:28.331 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 09:44:29.467 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:44:29.468 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:44:29.469 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:44:29.469 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:44:29.477 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:44:29.478 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.478 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:44:29.480 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:44:29.481 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.481 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:44:29.482 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.483 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.483 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:44:29.484 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.484 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.485 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:44:29.485 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.486 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.486 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:44:29.487 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.487 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.487 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:44:29.488 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.489 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.489 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:44:29.491 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.494 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.494 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:44:29.497 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.498 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.498 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:44:29.499 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.500 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.500 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:44:29.500 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.501 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.501 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:44:29.502 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:29.502 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:29.502 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:44:29.503 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:44:29.503 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:44:29.504 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:44:29.504 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:44:33.876 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, views=?, likes=?, comments=?, appreciable=?, commentable=?, published=?, category_id=?, create_time=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:44:33.879 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 09:44:33.875(Timestamp), 2020-04-09 09:44:33.875(Timestamp), 1(Integer), 10(Long)
2020-04-09 09:44:33.887 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:44:33.888 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:44:33.888 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 10(Long)
2020-04-09 09:44:33.889 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:44:33.890 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 09:44:33.890 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 10(Long), 1(Long)
2020-04-09 09:44:33.890 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 09:44:34.945 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:44:34.945 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:44:34.947 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:44:34.947 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:44:34.953 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:44:34.956 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.957 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:44:34.958 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:44:34.959 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.959 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:44:34.960 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.961 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.961 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:44:34.963 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.963 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.963 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:44:34.963 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.964 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.964 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:44:34.964 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.965 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.965 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:44:34.965 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.966 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.966 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:44:34.966 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.967 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.967 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:44:34.967 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.968 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.968 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:44:34.968 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.969 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.969 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:44:34.969 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.970 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.970 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:44:34.970 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:44:34.971 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:44:34.971 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:44:34.971 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:44:34.972 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:44:34.972 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:44:34.973 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:48:09.303 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:48:09.304 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-09 09:48:09.308 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:48:09.309 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:09.309 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:48:09.311 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:48:09.532 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:48:09.532 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:48:09.533 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:48:09.533 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:48:09.534 DEBUG 12168 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:48:09.535 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:48:40.098 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:48:40.099 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:48:40.101 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:48:40.102  INFO 12168 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-09 09:48:40.102  INFO 12168 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:48:40.389 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:48:40.390 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:48:40.391 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:48:40.391 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:48:40.402 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:48:40.404 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.405 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:48:40.406 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:48:40.408 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.408 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:48:40.410 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.411 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.411 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:48:40.412 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.414 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.414 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:48:40.418 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.419 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.419 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:48:40.421 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.422 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.422 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:48:40.423 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.424 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.424 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:48:40.426 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.426 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.426 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:48:40.427 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.429 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.429 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:48:40.433 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.434 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.434 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:48:40.436 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.437 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.437 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:48:40.438 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:40.438 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:40.439 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:48:40.440 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:48:40.441 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:48:40.441 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:48:40.442 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:48:50.664 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:48:50.664 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:48:50.666 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:48:50.666  INFO 12168 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-09 09:48:50.667  INFO 12168 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:48:50.967 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:48:50.967 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:48:50.969 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:48:50.969 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:48:50.977 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:48:50.980 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:50.981 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:48:50.983 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:48:50.984 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:50.984 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:48:50.985 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:50.986 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:50.986 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:48:50.986 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:50.987 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:50.987 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:48:50.988 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:50.990 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:50.990 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:48:50.991 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:50.991 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:50.991 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:48:50.992 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:50.993 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:50.993 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:48:50.995 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:50.996 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:50.997 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:48:50.999 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:51.001 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:51.001 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:48:51.002 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:51.002 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:51.002 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:48:51.003 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:51.004 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:51.004 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:48:51.004 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:48:51.005 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:48:51.005 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:48:51.006 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:48:51.006 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:48:51.006 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:48:51.007 DEBUG 12168 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:49:00.200 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:49:00.201 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:49:00.203 DEBUG 12168 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:49:00.203  INFO 12168 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-09 09:49:00.203  INFO 12168 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:49:00.552 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:49:00.553 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:49:00.554 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:49:00.555 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:49:00.568 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:49:00.569 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.569 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:49:00.572 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:49:00.574 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.574 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:49:00.578 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.580 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.580 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:49:00.582 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.585 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.585 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:49:00.587 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.587 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.588 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:49:00.589 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.590 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.590 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:49:00.591 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.593 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.594 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:49:00.596 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.597 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.598 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:49:00.599 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.600 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.600 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:49:00.601 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.602 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.602 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:49:00.602 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.603 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.603 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:49:00.604 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:49:00.604 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:49:00.604 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:49:00.605 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:49:00.606 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:49:00.606 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:49:00.607 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:53:24.374  INFO 12168 --- [Thread-12] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-09 09:53:24.378  INFO 12168 --- [Thread-12] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-09 09:53:24.880  INFO 12168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12168 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 09:53:24.880 DEBUG 12168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 09:53:24.880  INFO 12168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 09:53:25.120  INFO 12168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 09:53:25.120  INFO 12168 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 09:53:25.121  INFO 12168 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 09:53:25.145  INFO 12168 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 09:53:25.145  INFO 12168 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 263 ms
2020-04-09 09:53:25.193  INFO 12168 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 09:53:25.270  INFO 12168 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-04-09 09:53:25.731  INFO 12168 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 09:53:25.751  INFO 12168 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 09:53:25.848  INFO 12168 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 09:53:25.874  INFO 12168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 09:53:25.874  INFO 12168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.025 seconds (JVM running for 2076.924)
2020-04-09 09:53:25.876  INFO 12168 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-09 09:53:36.525  INFO 12168 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 09:53:36.527  INFO 12168 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 09:53:36.535  INFO 12168 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-09 09:53:36.698 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 09:53:36.699 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 09:53:36.700 DEBUG 12168 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 09:53:36.703  INFO 12168 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 12ms, description = 初始化后台主页}
2020-04-09 09:53:36.703  INFO 12168 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 09:53:36.922 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:53:36.922 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:53:36.925 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:53:36.926 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:53:36.946 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:53:36.960 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.960 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:53:36.962 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:53:36.963 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.963 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:53:36.963 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.964 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.964 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:53:36.966 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.967 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.967 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:53:36.968 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.968 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.969 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:53:36.969 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.970 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.970 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:53:36.970 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.971 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.971 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:53:36.971 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.972 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.972 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:53:36.972 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.972 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.972 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:53:36.973 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.974 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.974 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:53:36.978 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.979 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.979 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:53:36.980 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:36.981 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:36.981 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:53:36.981 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:53:36.982 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:53:36.982 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:53:36.983 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:53:41.359 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 09:53:41.359 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-09 09:53:41.361 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 09:53:41.362 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:41.363 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:53:41.366 DEBUG 12168 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:41.560 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 09:53:41.561 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 09:53:41.563 DEBUG 12168 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 09:53:41.564 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 09:53:41.564 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 09:53:41.566 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 09:53:43.755 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:53:43.758 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第2章	Java设计模式12(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 09:53:43.753(Timestamp), 1(Integer), 10(Long)
2020-04-09 09:53:43.771 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:53:43.773 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:53:43.774 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 10(Long)
2020-04-09 09:53:43.775 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:53:43.776 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 09:53:43.776 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 10(Long), 1(Long)
2020-04-09 09:53:43.776 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 09:53:44.948 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:53:44.948 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:53:44.949 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:53:44.950 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:53:44.962 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:53:44.962 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.962 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:53:44.964 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:53:44.964 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.964 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:53:44.965 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.965 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.965 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:53:44.965 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.967 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.968 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:53:44.968 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.970 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.970 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:53:44.971 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.971 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.971 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:53:44.972 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.974 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.974 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:53:44.978 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.979 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.979 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:53:44.980 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.981 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.981 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:53:44.981 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.982 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.982 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:53:44.982 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.983 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.983 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:53:44.984 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:44.984 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:44.984 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:53:44.985 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:53:44.985 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:53:44.985 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:53:44.986 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:53:58.122 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:53:58.125 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), false(Boolean), false(Boolean), true(Boolean), 2(Long), 2020-04-09 09:53:58.122(Timestamp), 2(Integer), 10(Long)
2020-04-09 09:53:58.135 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:53:58.136 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:53:58.136 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 10(Long)
2020-04-09 09:53:58.138 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 09:53:58.138 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-04-09 09:53:58.138 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 10(Long), 1(Long), 10(Long), 2(Long), 10(Long), 3(Long)
2020-04-09 09:53:58.139 DEBUG 12168 --- [http-nio-8888-exec-3] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 3
2020-04-09 09:53:59.608 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:53:59.608 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:53:59.609 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:53:59.609 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:53:59.614 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:53:59.615 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.615 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:53:59.616 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:53:59.616 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.616 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:53:59.617 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:53:59.617 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.617 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:53:59.618 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.619 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.620 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:53:59.622 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.623 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.623 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:53:59.624 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.625 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.625 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:53:59.627 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.629 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.629 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:53:59.630 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.630 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.630 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:53:59.631 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.631 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.631 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:53:59.632 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.632 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.632 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:53:59.633 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.633 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.633 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:53:59.634 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:53:59.634 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:53:59.634 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:53:59.635 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:53:59.637 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:53:59.637 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:53:59.638 DEBUG 12168 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 09:54:07.822 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=? WHERE id=? 
2020-04-09 09:54:07.825 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), false(Boolean), false(Boolean), false(Boolean), 2(Long), 2020-04-09 09:54:07.821(Timestamp), 2(Integer), 10(Long)
2020-04-09 09:54:07.834 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 09:54:07.835 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 09:54:07.835 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 10(Long)
2020-04-09 09:54:07.836 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 3
2020-04-09 09:54:07.837 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-04-09 09:54:07.837 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 10(Long), 1(Long), 10(Long), 2(Long), 10(Long), 3(Long)
2020-04-09 09:54:07.838 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 3
2020-04-09 09:54:22.533 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 09:54:22.534 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 09:54:22.535 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 09:54:22.536 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 09:54:22.542 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 09:54:22.543 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.543 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 09:54:22.544 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 09:54:22.545 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.545 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 09:54:22.546 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:54:22.549 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.549 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 09:54:22.552 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.552 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.552 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 09:54:22.554 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.554 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.554 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 09:54:22.555 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.555 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.555 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 09:54:22.556 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.556 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.556 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 09:54:22.557 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.557 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.557 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 09:54:22.558 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.558 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.558 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 09:54:22.559 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.559 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.559 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 09:54:22.560 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.560 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.560 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 09:54:22.561 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 09:54:22.561 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 09:54:22.561 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 09:54:22.562 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 09:54:22.562 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 09:54:22.562 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 09:54:22.565 DEBUG 12168 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:02:32.317  INFO 23832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 23832 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:02:32.320 DEBUG 23832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:02:32.321  INFO 23832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:02:32.363  INFO 23832 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 10:02:32.364  INFO 23832 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 10:02:33.525  INFO 23832 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 10:02:33.532  INFO 23832 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 10:02:33.533  INFO 23832 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 10:02:33.600  INFO 23832 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 10:02:33.601  INFO 23832 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1237 ms
2020-04-09 10:02:33.756  INFO 23832 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 10:02:34.017  INFO 23832 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 10:02:34.854  INFO 23832 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 10:02:34.909  INFO 23832 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 10:02:35.050  INFO 23832 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 10:02:35.095  INFO 23832 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 10:02:35.097  INFO 23832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.428 seconds (JVM running for 4.467)
2020-04-09 10:02:49.496  INFO 23832 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 10:02:49.501  INFO 23832 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 10:02:49.501  INFO 23832 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 10:02:49.510  INFO 23832 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-09 10:02:50.159 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:02:50.181 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:02:50.202 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:02:50.207  INFO 23832 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 154ms, description = 初始化后台主页}
2020-04-09 10:02:50.209  INFO 23832 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:02:50.677 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:02:50.678 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:02:50.687 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:02:50.690 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:02:50.745 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 12
2020-04-09 10:02:50.759 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.759 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:02:50.761 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:02:50.762 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.763 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-09 10:02:50.765 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:02:50.765 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.766 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:02:50.767 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.768 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.768 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:02:50.769 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.771 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.773 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:02:50.775 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.776 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.777 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:02:50.778 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.779 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.779 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 10:02:50.781 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.782 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.782 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:02:50.783 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.785 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.785 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:02:50.788 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.791 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.791 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:02:50.793 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.795 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.796 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 10:02:50.797 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:02:50.799 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:02:50.800 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:02:50.802 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:02:50.807 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:02:50.808 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:02:50.811 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:03:06.846 DEBUG 23832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.deleteById    : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-04-09 10:03:06.847 DEBUG 23832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.deleteById    : ==> Parameters: 10(Long)
2020-04-09 10:03:06.848 DEBUG 23832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.deleteById    : <==    Updates: 1
2020-04-09 10:03:22.806 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:03:22.807 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:03:22.809 DEBUG 23832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:03:22.810  INFO 23832 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-09 10:03:22.810  INFO 23832 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:03:23.106 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:03:23.106 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:03:23.108 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:03:23.108 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:03:23.127 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-09 10:03:23.129 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.129 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:03:23.136 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:03:23.138 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.138 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:03:23.140 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.141 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.141 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:03:23.143 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.146 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.146 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:03:23.149 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.153 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.154 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:03:23.155 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.156 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.156 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-09 10:03:23.157 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.158 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.158 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:03:23.162 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.165 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.167 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:03:23.169 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.169 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.169 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:03:23.170 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.171 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.171 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 10:03:23.172 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:03:23.173 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:03:23.173 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:03:23.174 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:03:23.175 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:03:23.175 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:03:23.175 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:03:48.491 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.deleteById    : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-04-09 10:03:48.492 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.deleteById    : ==> Parameters: 15(Long)
2020-04-09 10:03:48.494 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.deleteById    : <==    Updates: 1
2020-04-09 10:06:09.769 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:06:09.770 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:06:09.773 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:06:09.774  INFO 23832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-09 10:06:09.775  INFO 23832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:06:10.121 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:06:10.122 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:06:10.125 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:06:10.126 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:06:10.136 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : <==      Total: 10
2020-04-09 10:06:10.137 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.137 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:06:10.141 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:06:10.142 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.143 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:06:10.144 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:06:10.145 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.146 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:06:10.147 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:06:10.147 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.147 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:06:10.148 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:06:10.149 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.149 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:06:10.150 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:06:10.151 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.151 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:06:10.153 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:06:10.154 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.154 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:06:10.157 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:06:10.159 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.159 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:06:10.161 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:06:10.162 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.162 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 10:06:10.164 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:06:10.165 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:06:10.166 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:06:10.167 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:06:10.168 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:06:10.169 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:06:10.170 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:07:47.540 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:07:47.541 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:07:47.544 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:07:47.544  INFO 23832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-09 10:07:47.545  INFO 23832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:07:47.848 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:07:47.849 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:07:47.852 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:07:47.853 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:07:47.860 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : <==      Total: 10
2020-04-09 10:07:47.861 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.861 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:07:47.863 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:07:47.864 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.865 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:07:47.868 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:07:47.869 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.870 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:07:47.871 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:07:47.872 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.872 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:07:47.874 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:07:47.875 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.875 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:07:47.876 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:07:47.877 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.877 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:07:47.878 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:07:47.879 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.879 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:07:47.880 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:07:47.882 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.882 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:07:47.885 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:07:47.886 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.887 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 10:07:47.888 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:07:47.889 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:07:47.889 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:07:47.891 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:07:47.893 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:07:47.893 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:07:47.894 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:17:59.697 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:17:59.698 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:17:59.703 DEBUG 23832 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:17:59.703  INFO 23832 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-09 10:17:59.703  INFO 23832 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:18:00.152 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:18:00.152 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:18:00.155 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:18:00.156 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:18:00.173 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 10
2020-04-09 10:18:00.174 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.175 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:18:00.177 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:18:00.179 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.179 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:18:00.183 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:18:00.187 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.187 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:18:00.190 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:18:00.192 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.192 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:18:00.194 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:18:00.196 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.196 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:18:00.198 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:18:00.201 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.202 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:18:00.204 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:18:00.205 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.206 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:18:00.208 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:18:00.209 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.210 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:18:00.212 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:18:00.214 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.214 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 10:18:00.216 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:18:00.217 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:18:00.217 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:18:00.219 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:18:00.221 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:18:00.221 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:18:00.223 DEBUG 23832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:21:17.075 DEBUG 23832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:21:17.076 DEBUG 23832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:21:17.077 DEBUG 23832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:21:17.078  INFO 23832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-09 10:21:17.078  INFO 23832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:21:17.335 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:21:17.336 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:21:17.338 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:21:17.338 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:21:17.359 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 10
2020-04-09 10:21:17.360 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.360 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:21:17.361 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:21:17.362 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.362 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:21:17.364 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:21:17.364 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.365 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:21:17.367 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:21:17.370 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.370 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:21:17.373 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:21:17.374 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.375 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:21:17.376 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:21:17.377 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.377 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:21:17.378 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:21:17.379 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.379 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:21:17.379 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:21:17.380 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.380 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:21:17.381 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:21:17.382 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.382 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 10:21:17.384 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:21:17.385 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:21:17.387 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:21:17.388 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:21:17.390 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:21:17.390 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:21:17.391 DEBUG 23832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:23:02.289 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:23:02.291 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:23:02.295 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:23:02.295  INFO 23832 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-09 10:23:02.295  INFO 23832 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:23:02.571 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:23:02.571 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:23:02.572 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:23:02.573 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:23:02.583 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 10
2020-04-09 10:23:02.585 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.585 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:23:02.587 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:23:02.587 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.587 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:23:02.589 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:23:02.590 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.591 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:23:02.594 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:23:02.595 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.596 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:23:02.597 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:23:02.597 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.598 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:23:02.598 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:23:02.599 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.599 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:23:02.600 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:23:02.601 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.601 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:23:02.602 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:23:02.603 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.604 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:23:02.605 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:23:02.606 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.606 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-09 10:23:02.609 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:23:02.612 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:23:02.612 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:23:02.613 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:23:02.614 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:23:02.614 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:23:02.615 DEBUG 23832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:23:07.248 DEBUG 23832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.deleteById    : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-04-09 10:23:07.248 DEBUG 23832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.deleteById    : ==> Parameters: 19(Long)
2020-04-09 10:23:07.249 DEBUG 23832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.deleteById    : <==    Updates: 1
2020-04-09 10:24:24.286 DEBUG 23832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:24:24.287 DEBUG 23832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:24:24.291 DEBUG 23832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:24:24.292  INFO 23832 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-09 10:24:24.292  INFO 23832 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:24:24.529 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:24:24.529 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:24:24.531 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:24:24.531 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:24:24.542 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : <==      Total: 9
2020-04-09 10:24:24.543 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.543 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:24:24.546 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:24:24.546 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.547 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:24:24.548 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:24:24.550 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.550 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:24:24.551 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:24:24.551 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.552 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:24:24.552 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:24:24.553 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.555 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:24:24.558 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:24:24.559 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.559 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:24:24.560 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:24:24.561 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.562 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:24:24.562 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:24:24.563 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.563 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:24:24.564 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:24:24.565 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:24:24.565 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:24:24.566 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:24:24.567 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:24:24.567 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:24:24.567 DEBUG 23832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:24:29.376 ERROR 23832 --- [http-nio-8888-exec-4] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : Request method 'DELETE' not supported
2020-04-09 10:24:29.378  WARN 23832 --- [http-nio-8888-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'DELETE' not supported]
2020-04-09 10:29:21.752  INFO 12104 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12104 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:29:21.754 DEBUG 12104 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:29:21.754  INFO 12104 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:29:21.815  INFO 12104 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 10:29:21.841  INFO 12104 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 10:29:24.130  INFO 12104 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 10:29:24.137  INFO 12104 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 10:29:24.138  INFO 12104 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 10:29:24.205  INFO 12104 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 10:29:24.205  INFO 12104 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2341 ms
2020-04-09 10:29:24.352  INFO 12104 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 10:29:24.607  INFO 12104 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 10:29:25.407  INFO 12104 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 10:29:25.463  INFO 12104 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 10:29:25.601  INFO 12104 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 10:29:25.644  INFO 12104 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 10:29:25.647  INFO 12104 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 4.609 seconds (JVM running for 5.522)
2020-04-09 10:29:59.344  INFO 12104 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 10:29:59.348  INFO 12104 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 10:29:59.349  INFO 12104 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 10:29:59.359  INFO 12104 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-09 10:29:59.865 DEBUG 12104 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:29:59.881 DEBUG 12104 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:29:59.896 DEBUG 12104 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:29:59.899  INFO 12104 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 97ms, description = 初始化后台主页}
2020-04-09 10:29:59.900  INFO 12104 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:30:00.233 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:30:00.234 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:30:00.243 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:30:00.244 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:30:00.297 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 9
2020-04-09 10:30:00.309 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.309 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:30:00.311 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:30:00.312 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.312 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:30:00.313 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:00.314 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.314 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-09 10:30:00.315 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:00.316 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.316 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-09 10:30:00.317 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:00.318 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.318 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:30:00.319 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:00.320 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.321 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-09 10:30:00.324 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:00.326 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.326 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:30:00.327 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:00.328 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.329 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:30:00.330 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:00.331 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:00.331 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:30:00.332 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:30:00.333 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:30:00.334 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:30:00.335 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:30:09.119 DEBUG 12104 --- [http-nio-8888-exec-5] s.a.g.m.ArticleMapper.deleteBatchIds     : ==>  Preparing: DELETE FROM t_article WHERE id IN ( ? , ? , ? ) 
2020-04-09 10:30:09.119 DEBUG 12104 --- [http-nio-8888-exec-5] s.a.g.m.ArticleMapper.deleteBatchIds     : ==> Parameters: 12(Long), 13(Long), 16(Long)
2020-04-09 10:30:09.125 DEBUG 12104 --- [http-nio-8888-exec-5] s.a.g.m.ArticleMapper.deleteBatchIds     : <==    Updates: 3
2020-04-09 10:30:14.718 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.ArticleMapper.deleteBatchIds     : ==>  Preparing: DELETE FROM t_article WHERE id IN ( ? , ? , ? ) 
2020-04-09 10:30:14.719 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.ArticleMapper.deleteBatchIds     : ==> Parameters: 12(Long), 13(Long), 16(Long)
2020-04-09 10:30:14.720 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.ArticleMapper.deleteBatchIds     : <==    Updates: 0
2020-04-09 10:30:27.637 DEBUG 12104 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:30:27.638 DEBUG 12104 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:30:27.642 DEBUG 12104 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:30:27.643  INFO 12104 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-09 10:30:27.643  INFO 12104 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:30:27.907 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:30:27.907 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:30:27.909 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:30:27.909 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:30:27.922 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-09 10:30:27.924 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:27.924 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:30:27.926 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:30:27.928 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:27.928 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:30:27.930 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:27.935 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:27.936 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:30:27.940 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:27.941 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:27.941 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:30:27.942 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:27.943 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:27.943 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:30:27.944 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:27.944 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:27.944 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:30:27.945 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:30:27.946 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:30:27.946 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:30:27.951 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:30:50.757 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:30:50.758 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:30:50.762 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:30:50.763  INFO 12104 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-09 10:30:50.763  INFO 12104 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:30:51.075 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:30:51.077 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:30:51.081 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:30:51.082 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:30:51.099 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-09 10:30:51.103 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:51.103 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:30:51.105 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:30:51.112 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:51.112 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:30:51.114 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:51.115 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:51.115 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-09 10:30:51.116 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:51.117 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:51.117 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-09 10:30:51.118 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:51.119 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:51.119 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:30:51.120 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:30:51.121 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:30:51.121 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:30:51.122 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:30:51.123 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:30:51.124 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:30:51.129 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:30:57.503 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.ArticleMapper.deleteBatchIds     : ==>  Preparing: DELETE FROM t_article WHERE id IN ( ? , ? ) 
2020-04-09 10:30:57.504 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.ArticleMapper.deleteBatchIds     : ==> Parameters: 14(Long), 17(Long)
2020-04-09 10:30:57.505 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.ArticleMapper.deleteBatchIds     : <==    Updates: 2
2020-04-09 10:31:01.322 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:31:01.322 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:31:01.328 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:31:01.329  INFO 12104 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-09 10:31:01.329  INFO 12104 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:31:01.578 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:31:01.578 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:31:01.581 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:31:01.581 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:31:01.587 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 4
2020-04-09 10:31:01.589 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:31:01.590 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:31:01.596 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:31:01.598 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:31:01.598 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:31:01.600 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:31:01.601 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:31:01.601 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:31:01.603 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:31:01.605 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:31:01.607 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:31:01.611 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:31:01.613 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:31:01.614 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:31:01.615 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:33:46.670 DEBUG 12104 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:33:46.670 DEBUG 12104 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:33:46.673 DEBUG 12104 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:33:46.673  INFO 12104 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-09 10:33:46.673  INFO 12104 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:33:46.910 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:33:46.910 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:33:46.911 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:33:46.912 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:33:46.920 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 4
2020-04-09 10:33:46.922 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:33:46.922 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:33:46.924 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:33:46.924 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:33:46.925 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:33:46.926 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:33:46.927 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:33:46.927 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:33:46.928 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:33:46.929 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:33:46.929 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 20(Long)
2020-04-09 10:33:46.930 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-09 10:33:46.931 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:33:46.931 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:33:46.934 DEBUG 12104 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:33:52.049 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.ArticleMapper.deleteBatchIds     : ==>  Preparing: DELETE FROM t_article WHERE id IN ( ? ) 
2020-04-09 10:33:52.050 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.ArticleMapper.deleteBatchIds     : ==> Parameters: 20(Long)
2020-04-09 10:33:52.051 DEBUG 12104 --- [http-nio-8888-exec-10] s.a.g.m.ArticleMapper.deleteBatchIds     : <==    Updates: 1
2020-04-09 10:33:52.062 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:33:52.063 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:33:52.064 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:33:52.064 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:33:52.067 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:33:52.068 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:33:52.068 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:33:52.069 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:33:52.070 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:33:52.071 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:33:52.072 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:33:52.073 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:33:52.073 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:33:52.075 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:33:52.076 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:33:52.076 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:33:52.079 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:34:43.090 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-09 10:34:43.091 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 18(Long)
2020-04-09 10:34:43.095 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-09 10:34:43.096 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:34:43.097 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:34:43.099 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:34:43.279 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-09 10:34:43.279 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-09 10:34:43.280 DEBUG 12104 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-09 10:34:43.281 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-09 10:34:43.281 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-09 10:34:43.291 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-09 10:34:48.144 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=? WHERE id=? 
2020-04-09 10:34:48.149 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第3章	认识Mybatis核心组件12(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 10:34:48.14(Timestamp), 1(Integer), 18(Long)
2020-04-09 10:34:48.154 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 10:34:48.156 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 10:34:48.156 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 18(Long)
2020-04-09 10:34:48.157 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 10:34:48.158 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 10:34:48.158 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 18(Long), 1(Long)
2020-04-09 10:34:48.159 DEBUG 12104 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 10:34:49.602 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:34:49.603 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:34:49.606 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:34:49.606 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:34:49.609 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:34:49.610 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:34:49.610 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:34:49.611 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:34:49.612 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:34:49.612 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:34:49.613 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:34:49.614 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:34:49.614 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:34:49.614 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:34:49.615 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:34:49.615 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:34:49.616 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:35:29.447 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.updateById    : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=? WHERE id=? 
2020-04-09 10:35:29.449 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.updateById    : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-09 10:35:29.446(Timestamp), 1(Integer), 18(Long)
2020-04-09 10:35:29.454 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.updateById    : <==    Updates: 1
2020-04-09 10:35:29.455 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleTagMapper.delete     : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-04-09 10:35:29.455 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleTagMapper.delete     : ==> Parameters: 18(Long)
2020-04-09 10:35:29.457 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleTagMapper.delete     : <==    Updates: 1
2020-04-09 10:35:29.458 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-09 10:35:29.458 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 18(Long), 1(Long)
2020-04-09 10:35:29.459 DEBUG 12104 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-09 10:35:30.305 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:35:30.305 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:35:30.309 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:35:30.310 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:35:30.313 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:35:30.314 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:35:30.314 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:35:30.315 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:35:30.316 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:35:30.316 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:35:30.317 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:35:30.317 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:35:30.318 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:35:30.318 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:35:30.319 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:35:30.319 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:35:30.320 DEBUG 12104 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:37:51.814  INFO 12104 --- [Thread-14] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-09 10:37:51.818  INFO 12104 --- [Thread-14] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-09 10:37:52.196  INFO 12104 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12104 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:37:52.196 DEBUG 12104 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:37:52.196  INFO 12104 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:37:54.614  INFO 11168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 11168 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:37:54.624 DEBUG 11168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:37:54.625  INFO 11168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:37:54.673  INFO 11168 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 10:37:54.673  INFO 11168 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 10:37:55.925  INFO 11168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 10:37:55.932  INFO 11168 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 10:37:55.933  INFO 11168 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 10:37:55.995  INFO 11168 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 10:37:55.995  INFO 11168 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1322 ms
2020-04-09 10:37:56.148  INFO 11168 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 10:37:56.394  INFO 11168 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 10:37:57.209  INFO 11168 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 10:37:57.265  INFO 11168 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 10:37:57.403  INFO 11168 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 10:37:57.445  INFO 11168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 10:37:57.448  INFO 11168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.501 seconds (JVM running for 4.569)
2020-04-09 10:38:10.761  INFO 11168 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 10:38:10.768  INFO 11168 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 10:38:10.768  INFO 11168 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 10:38:10.776  INFO 11168 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-09 10:38:11.363 DEBUG 11168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:38:11.381 DEBUG 11168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:38:11.398 DEBUG 11168 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:38:11.403  INFO 11168 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 106ms, description = 初始化后台主页}
2020-04-09 10:38:11.404  INFO 11168 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:38:11.825 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:38:11.825 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:38:11.834 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:38:11.836 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:38:11.878 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:38:11.893 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:38:11.894 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:38:11.896 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:38:11.897 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:38:11.897 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:38:11.899 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:38:11.903 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:38:11.903 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:38:11.906 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:38:11.908 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:38:11.908 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:38:11.910 DEBUG 11168 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:38:55.536  INFO 12408 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12408 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:38:55.539 DEBUG 12408 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:38:55.539  INFO 12408 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:38:55.590  INFO 12408 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 10:38:55.591  INFO 12408 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 10:38:56.616  INFO 12408 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 10:38:56.622  INFO 12408 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 10:38:56.622  INFO 12408 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 10:38:56.682  INFO 12408 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 10:38:56.683  INFO 12408 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1092 ms
2020-04-09 10:38:56.825  INFO 12408 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 10:38:57.051  INFO 12408 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 10:38:57.826  INFO 12408 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 10:38:57.880  INFO 12408 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 10:38:58.016  INFO 12408 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 10:38:58.062  INFO 12408 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 10:38:58.064  INFO 12408 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.142 seconds (JVM running for 3.988)
2020-04-09 10:39:00.690  INFO 12408 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 10:39:00.699  INFO 12408 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 10:39:00.699  INFO 12408 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 10:39:00.709  INFO 12408 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-09 10:39:01.386 DEBUG 12408 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:39:01.406 DEBUG 12408 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:39:01.427 DEBUG 12408 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:39:01.430  INFO 12408 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 114ms, description = 初始化后台主页}
2020-04-09 10:39:01.431  INFO 12408 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:39:01.857 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:39:01.857 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:39:01.865 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:39:01.866 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:39:01.910 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:39:01.921 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:39:01.924 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:39:01.926 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:39:01.927 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:39:01.927 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:39:01.929 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:39:01.930 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:39:01.930 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:39:01.932 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:39:01.933 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:39:01.933 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:39:01.934 DEBUG 12408 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:39:44.503  INFO 12408 --- [Thread-11] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-09 10:39:44.505  INFO 12408 --- [Thread-11] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-09 10:39:45.095  INFO 12408 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12408 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:39:45.095 DEBUG 12408 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:39:45.095  INFO 12408 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:39:45.453  INFO 12408 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 10:39:45.454  INFO 12408 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 10:39:45.454  INFO 12408 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 10:39:45.479  INFO 12408 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 10:39:45.479  INFO 12408 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 380 ms
2020-04-09 10:39:45.515  INFO 12408 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 10:39:45.583  INFO 12408 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-04-09 10:39:46.034  INFO 12408 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 10:39:46.054  INFO 12408 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 10:39:46.160  INFO 12408 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 10:39:46.185  INFO 12408 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 10:39:46.186  INFO 12408 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.141 seconds (JVM running for 52.11)
2020-04-09 10:39:46.189  INFO 12408 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-09 10:39:48.585  INFO 12408 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 10:39:48.585  INFO 12408 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 10:39:48.593  INFO 12408 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-09 10:39:48.832 DEBUG 12408 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:39:48.833 DEBUG 12408 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:39:48.836 DEBUG 12408 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:39:48.838  INFO 12408 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 18ms, description = 初始化后台主页}
2020-04-09 10:39:48.838  INFO 12408 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:39:49.154 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:39:49.154 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:39:49.157 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:39:49.157 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:39:49.178 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:39:49.197 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:39:49.198 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:39:49.200 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:39:49.203 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:39:49.203 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:39:49.205 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:39:49.207 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:39:49.207 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:39:49.212 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:39:49.215 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:39:49.215 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:39:49.217 DEBUG 12408 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:40:14.028  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 11076 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:40:14.030 DEBUG 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:40:14.030  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:40:14.077  INFO 11076 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 10:40:14.078  INFO 11076 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 10:40:15.149  INFO 11076 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 10:40:15.155  INFO 11076 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 10:40:15.155  INFO 11076 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 10:40:15.216  INFO 11076 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 10:40:15.217  INFO 11076 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1139 ms
2020-04-09 10:40:15.299  INFO 11076 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 10:40:15.581  INFO 11076 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 10:40:16.342  INFO 11076 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 10:40:16.400  INFO 11076 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 10:40:16.553  INFO 11076 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 10:40:16.598  INFO 11076 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 10:40:16.600  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.091 seconds (JVM running for 3.9)
2020-04-09 10:40:18.615  INFO 11076 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 10:40:18.622  INFO 11076 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 10:40:18.622  INFO 11076 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 10:40:18.630  INFO 11076 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-09 10:40:19.299 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:40:19.326 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:40:19.347 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:40:19.353  INFO 11076 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 139ms, description = 初始化后台主页}
2020-04-09 10:40:19.355  INFO 11076 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:40:19.758 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:40:19.759 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:40:19.770 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:40:19.772 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:40:19.817 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:40:19.830 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:40:19.831 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:40:19.833 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:40:19.834 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:40:19.834 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:40:19.838 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:40:19.840 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:40:19.841 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:40:19.842 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:40:19.844 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:40:19.844 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:40:19.846 DEBUG 11076 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:41:00.087  INFO 11076 --- [Thread-11] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-09 10:41:00.090  INFO 11076 --- [Thread-11] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-09 10:41:00.509  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 11076 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:41:00.509 DEBUG 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:41:00.509  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:41:00.830  INFO 11076 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 10:41:00.831  INFO 11076 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 10:41:00.831  INFO 11076 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 10:41:00.859  INFO 11076 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 10:41:00.860  INFO 11076 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 349 ms
2020-04-09 10:41:00.893  INFO 11076 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 10:41:00.946  INFO 11076 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-04-09 10:41:01.343  INFO 11076 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 10:41:01.362  INFO 11076 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 10:41:01.446  INFO 11076 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 10:41:01.464  INFO 11076 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 10:41:01.465  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.996 seconds (JVM running for 48.766)
2020-04-09 10:41:01.466  INFO 11076 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-09 10:41:11.072  INFO 11076 --- [Thread-18] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-09 10:41:11.074  INFO 11076 --- [Thread-18] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} closed
2020-04-09 10:41:11.544  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 11076 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 10:41:11.544 DEBUG 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 10:41:11.545  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 10:41:11.761  INFO 11076 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 10:41:11.762  INFO 11076 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 10:41:11.762  INFO 11076 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 10:41:11.774  INFO 11076 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 10:41:11.774  INFO 11076 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 228 ms
2020-04-09 10:41:11.810  INFO 11076 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 10:41:11.861  INFO 11076 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} inited
2020-04-09 10:41:12.240  INFO 11076 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 10:41:12.256  INFO 11076 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 10:41:12.325  INFO 11076 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 10:41:12.344  INFO 11076 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 10:41:12.344  INFO 11076 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.831 seconds (JVM running for 59.645)
2020-04-09 10:41:12.345  INFO 11076 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-09 10:41:14.360  INFO 11076 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 10:41:14.361  INFO 11076 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 10:41:14.374  INFO 11076 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2020-04-09 10:41:14.655 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 10:41:14.659 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 10:41:14.663 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 10:41:14.665  INFO 11076 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 19ms, description = 初始化后台主页}
2020-04-09 10:41:14.666  INFO 11076 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 10:41:15.036 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:41:15.037 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:41:15.042 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:41:15.043 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:41:15.063 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:41:15.088 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:41:15.088 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:41:15.093 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:41:15.095 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:41:15.095 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:41:15.097 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:41:15.098 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:41:15.099 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:41:15.101 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:41:15.105 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:41:15.107 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:41:15.111 DEBUG 11076 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:52:39.191 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:52:39.191 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:52:39.193 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:52:39.194 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:52:39.202 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:52:39.207 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:52:39.207 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:52:39.210 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:52:39.212 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:52:39.213 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:52:39.216 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:52:39.218 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:52:39.220 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:52:39.224 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:52:39.227 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:52:39.227 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:52:39.228 DEBUG 11076 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:53:08.728 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:53:08.728 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:53:08.729 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:53:08.730 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:53:08.736 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:53:08.737 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:53:08.737 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:53:08.739 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:53:08.740 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:53:08.740 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:53:08.742 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:53:08.743 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:53:08.743 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:53:08.744 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:53:08.745 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:53:08.745 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:53:08.747 DEBUG 11076 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 10:54:04.858 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 10:54:04.858 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 10:54:04.859 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 10:54:04.860 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 10:54:04.864 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 10:54:04.865 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:54:04.865 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 10:54:04.869 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 10:54:04.871 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:54:04.871 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 10:54:04.872 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:54:04.873 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 10:54:04.873 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 10:54:04.875 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 10:54:04.876 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 10:54:04.876 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 10:54:04.878 DEBUG 11076 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:04:42.256  INFO 21668 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 21668 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:04:42.260 DEBUG 21668 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:04:42.261  INFO 21668 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 11:04:42.325  INFO 21668 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 11:04:42.325  INFO 21668 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 11:04:43.347  INFO 21668 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 11:04:43.353  INFO 21668 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 11:04:43.353  INFO 21668 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 11:04:43.413  INFO 21668 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 11:04:43.413  INFO 21668 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1087 ms
2020-04-09 11:04:43.556  INFO 21668 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:04:43.786  INFO 21668 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:04:44.564  INFO 21668 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:04:44.621  INFO 21668 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:04:44.765  INFO 21668 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 11:04:44.806  INFO 21668 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 11:04:44.808  INFO 21668 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.141 seconds (JVM running for 3.957)
2020-04-09 11:04:47.489  INFO 21668 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 11:04:47.496  INFO 21668 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 11:04:47.497  INFO 21668 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 11:04:47.504  INFO 21668 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-09 11:04:48.088 DEBUG 21668 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 11:04:48.108 DEBUG 21668 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 11:04:48.124 DEBUG 21668 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 11:04:48.129  INFO 21668 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 108ms, description = 初始化后台主页}
2020-04-09 11:04:48.130  INFO 21668 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 11:04:48.468 DEBUG 21668 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:04:48.470 DEBUG 21668 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %null%(String)
2020-04-09 11:04:48.474 DEBUG 21668 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (title LIKE ?) 
2020-04-09 11:04:48.477 DEBUG 21668 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: %null%(String)
2020-04-09 11:04:48.478 DEBUG 21668 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:06:01.707  INFO 1116 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 1116 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:06:01.710 DEBUG 1116 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:06:01.711  INFO 1116 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 11:06:01.759  INFO 1116 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 11:06:01.762  INFO 1116 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 11:06:02.767  INFO 1116 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 11:06:02.773  INFO 1116 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 11:06:02.773  INFO 1116 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 11:06:02.833  INFO 1116 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 11:06:02.833  INFO 1116 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1070 ms
2020-04-09 11:06:02.974  INFO 1116 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:06:03.204  INFO 1116 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:06:03.983  INFO 1116 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:06:04.039  INFO 1116 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:06:04.175  INFO 1116 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 11:06:04.218  INFO 1116 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 11:06:04.221  INFO 1116 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.083 seconds (JVM running for 3.868)
2020-04-09 11:06:06.298  INFO 1116 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 11:06:06.303  INFO 1116 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 11:06:06.303  INFO 1116 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 11:06:06.314  INFO 1116 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-09 11:06:07.176 DEBUG 1116 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 11:06:07.209 DEBUG 1116 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 11:06:07.237 DEBUG 1116 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 11:06:07.244  INFO 1116 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 185ms, description = 初始化后台主页}
2020-04-09 11:06:07.246  INFO 1116 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 11:06:07.866 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:06:07.866 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:06:07.879 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:06:07.881 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:06:07.928 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:06:07.941 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:06:07.941 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:06:07.943 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:06:07.945 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:06:07.945 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:06:07.947 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:06:07.948 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:06:07.948 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:06:07.949 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:06:07.951 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:06:07.951 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:06:07.952 DEBUG 1116 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:06:12.532 DEBUG 1116 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:06:12.534 DEBUG 1116 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %{"title":"2"}%(String)
2020-04-09 11:06:12.537 DEBUG 1116 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (title LIKE ?) 
2020-04-09 11:06:12.539 DEBUG 1116 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: %{"title":"2"}%(String)
2020-04-09 11:06:12.540 DEBUG 1116 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:06:54.076 DEBUG 1116 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:06:54.077 DEBUG 1116 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %{"title":"1"}%(String)
2020-04-09 11:06:54.081 DEBUG 1116 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (title LIKE ?) 
2020-04-09 11:06:54.082 DEBUG 1116 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: %{"title":"1"}%(String)
2020-04-09 11:06:54.083 DEBUG 1116 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:08:47.895  INFO 12092 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12092 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:08:47.898 DEBUG 12092 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:08:47.899  INFO 12092 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 11:08:47.959  INFO 12092 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 11:08:47.959  INFO 12092 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 11:08:48.977  INFO 12092 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 11:08:48.983  INFO 12092 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 11:08:48.984  INFO 12092 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 11:08:49.042  INFO 12092 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 11:08:49.044  INFO 12092 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1083 ms
2020-04-09 11:08:49.191  INFO 12092 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:08:49.429  INFO 12092 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:08:50.267  INFO 12092 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:08:50.322  INFO 12092 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:08:50.456  INFO 12092 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 11:08:50.499  INFO 12092 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 11:08:50.501  INFO 12092 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.183 seconds (JVM running for 3.96)
2020-04-09 11:08:52.922  INFO 12092 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 11:08:52.933  INFO 12092 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 11:08:52.934  INFO 12092 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 11:08:52.942  INFO 12092 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-09 11:08:53.093 DEBUG 12092 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:08:53.116 DEBUG 12092 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %%{"title":"1"}%%(String)
2020-04-09 11:08:53.139 DEBUG 12092 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (title LIKE ?) 
2020-04-09 11:08:53.140 DEBUG 12092 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: %%{"title":"1"}%%(String)
2020-04-09 11:08:53.144 DEBUG 12092 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:08:58.695 DEBUG 12092 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:08:58.696 DEBUG 12092 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %%{"title":""}%%(String)
2020-04-09 11:08:58.701 DEBUG 12092 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (title LIKE ?) 
2020-04-09 11:08:58.701 DEBUG 12092 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: %%{"title":""}%%(String)
2020-04-09 11:08:58.703 DEBUG 12092 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:09:10.324 DEBUG 12092 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-09 11:09:10.324 DEBUG 12092 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-09 11:09:10.333 DEBUG 12092 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-09 11:09:10.334 DEBUG 12092 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:09:10.340 DEBUG 12092 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-09 11:09:10.342  INFO 12092 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 24ms, description = 分页查询用户}
2020-04-09 11:09:10.343  INFO 12092 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-09 11:09:13.363 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:09:13.363 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:09:13.365 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:09:13.365 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:09:13.408 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:09:13.421 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:09:13.422 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:09:13.423 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:09:13.424 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:09:13.424 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:09:13.425 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:09:13.427 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:09:13.428 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:09:13.431 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:09:13.432 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:09:13.433 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:09:13.434 DEBUG 12092 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:09:18.112 DEBUG 12092 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:09:18.113 DEBUG 12092 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %%{"title":"1"}%%(String)
2020-04-09 11:09:18.115 DEBUG 12092 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (title LIKE ?) 
2020-04-09 11:09:18.115 DEBUG 12092 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: %%{"title":"1"}%%(String)
2020-04-09 11:09:18.116 DEBUG 12092 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:09:43.293  INFO 23940 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 23940 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:09:43.297 DEBUG 23940 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:09:43.297  INFO 23940 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 11:09:43.339  INFO 23940 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 11:09:43.340  INFO 23940 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 11:09:44.339  INFO 23940 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 11:09:44.346  INFO 23940 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 11:09:44.346  INFO 23940 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 11:09:44.408  INFO 23940 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 11:09:44.408  INFO 23940 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1068 ms
2020-04-09 11:09:44.549  INFO 23940 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:09:44.784  INFO 23940 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:09:45.579  INFO 23940 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:09:45.635  INFO 23940 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:09:45.769  INFO 23940 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 11:09:45.811  INFO 23940 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 11:09:45.814  INFO 23940 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.093 seconds (JVM running for 3.874)
2020-04-09 11:09:53.826  INFO 23940 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 11:09:53.830  INFO 23940 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 11:09:53.830  INFO 23940 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 11:09:53.840  INFO 23940 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-04-09 11:09:54.388 DEBUG 23940 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 11:09:54.406 DEBUG 23940 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 11:09:54.423 DEBUG 23940 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 11:09:54.426  INFO 23940 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 101ms, description = 初始化后台主页}
2020-04-09 11:09:54.427  INFO 23940 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 11:09:55.041 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:09:55.041 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:09:55.048 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:09:55.048 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:09:55.086 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:09:55.096 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:09:55.096 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:09:55.098 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:09:55.099 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:09:55.101 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:09:55.104 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:09:55.105 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:09:55.105 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:09:55.107 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:09:55.108 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:09:55.108 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:09:55.109 DEBUG 23940 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:09:58.817 DEBUG 23940 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:09:58.818 DEBUG 23940 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %{"title":"1"}%(String)
2020-04-09 11:09:58.820 DEBUG 23940 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (title LIKE ?) 
2020-04-09 11:09:58.821 DEBUG 23940 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: %{"title":"1"}%(String)
2020-04-09 11:09:58.821 DEBUG 23940 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:10:38.633 DEBUG 23940 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 11:10:38.633 DEBUG 23940 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 11:10:38.636 DEBUG 23940 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 11:10:38.636  INFO 23940 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-09 11:10:38.637  INFO 23940 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 11:10:38.953 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:10:38.953 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:10:38.959 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:10:38.960 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:10:38.966 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:10:38.967 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:38.967 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:10:38.969 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:10:38.970 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:38.970 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:10:38.974 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:10:38.977 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:38.978 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:10:38.980 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:10:38.981 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:10:38.982 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:10:38.983 DEBUG 23940 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:10:41.924 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:10:41.924 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:10:41.925 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:10:41.925 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:10:41.930 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:10:41.932 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:41.933 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:10:41.934 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:10:41.935 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:41.935 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:10:41.937 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:10:41.939 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:41.939 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:10:41.941 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:10:41.942 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:10:41.942 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:10:41.944 DEBUG 23940 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:10:47.398 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:10:47.399 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:10:47.400 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:10:47.401 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:10:47.407 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:10:47.408 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:47.408 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:10:47.410 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:10:47.411 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:47.411 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:10:47.412 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:10:47.412 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:10:47.413 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:10:47.414 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:10:47.416 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:10:47.416 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:10:47.417 DEBUG 23940 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:11:29.631  INFO 20388 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 20388 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:11:29.634 DEBUG 20388 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:11:29.635  INFO 20388 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 11:11:29.690  INFO 20388 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 11:11:29.690  INFO 20388 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 11:11:30.731  INFO 20388 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 11:11:30.737  INFO 20388 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 11:11:30.737  INFO 20388 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 11:11:30.795  INFO 20388 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 11:11:30.795  INFO 20388 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1105 ms
2020-04-09 11:11:30.941  INFO 20388 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:11:31.189  INFO 20388 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:11:31.981  INFO 20388 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:11:32.034  INFO 20388 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:11:32.170  INFO 20388 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 11:11:32.214  INFO 20388 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 11:11:32.217  INFO 20388 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.135 seconds (JVM running for 4.711)
2020-04-09 11:11:36.722  INFO 20388 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 11:11:36.730  INFO 20388 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 11:11:36.730  INFO 20388 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 11:11:36.736  INFO 20388 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
2020-04-09 11:11:36.825 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:11:36.838 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:11:36.853 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:11:36.854 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:11:36.888 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:11:36.897 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:36.898 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:11:36.900 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:11:36.901 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:36.901 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:11:36.902 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:11:36.903 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:36.903 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:11:36.904 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:11:36.906 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:11:36.906 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:11:36.908 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:11:47.579 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:11:47.579 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:11:47.581 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:11:47.581 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:11:47.590 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:11:47.592 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:47.593 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:11:47.594 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:11:47.595 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:47.596 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:11:47.597 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:11:47.597 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:47.598 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:11:47.598 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:11:47.600 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:11:47.600 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:11:47.601 DEBUG 20388 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:11:57.047 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:11:57.047 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:11:57.049 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:11:57.049 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:11:57.053 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:11:57.054 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:57.055 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:11:57.056 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:11:57.058 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:57.059 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:11:57.061 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:11:57.063 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:11:57.063 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:11:57.065 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:11:57.068 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:11:57.068 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:11:57.070 DEBUG 20388 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:12:02.274 DEBUG 20388 --- [http-nio-8888-exec-3] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-09 11:12:02.275 DEBUG 20388 --- [http-nio-8888-exec-3] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-09 11:12:02.276 DEBUG 20388 --- [http-nio-8888-exec-3] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-09 11:12:02.277 DEBUG 20388 --- [http-nio-8888-exec-3] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:12:02.280 DEBUG 20388 --- [http-nio-8888-exec-3] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-09 11:12:02.282  INFO 20388 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 17ms, description = 分页查询用户}
2020-04-09 11:12:02.283  INFO 20388 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-09 11:12:35.114 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:12:35.115 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:12:35.116 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:12:35.117 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:12:35.122 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:12:35.124 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:12:35.124 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:12:35.127 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:12:35.130 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:12:35.131 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:12:35.132 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:12:35.134 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:12:35.134 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:12:35.136 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:12:35.137 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:12:35.137 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:12:35.138 DEBUG 20388 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:12:47.534 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:12:47.535 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:12:47.537 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:12:47.538 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:12:47.544 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:12:47.545 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:12:47.545 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:12:47.547 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:12:47.547 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:12:47.548 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:12:47.549 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:12:47.549 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:12:47.550 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:12:47.550 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:12:47.551 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:12:47.552 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:12:47.553 DEBUG 20388 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:14:48.563  INFO 16112 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Starting ArticleServiceImplTests on DESKTOP-QNDK7AF with PID 16112 (started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:14:48.564 DEBUG 16112 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:14:48.564  INFO 16112 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : The following profiles are active: dev
2020-04-09 11:14:50.036  INFO 16112 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:14:50.556  INFO 16112 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:14:52.164  INFO 16112 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:14:52.280  INFO 16112 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:14:52.674  INFO 16112 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Started ArticleServiceImplTests in 4.669 seconds (JVM running for 5.991)
2020-04-09 11:14:53.086 DEBUG 16112 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:14:53.114 DEBUG 16112 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:14:53.145 DEBUG 16112 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:14:53.147 DEBUG 16112 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 5(Long)
2020-04-09 11:14:53.212 DEBUG 16112 --- [main] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:14:53.220 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:14:53.221 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:14:53.224 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:14:53.225 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:14:53.225 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:14:53.227 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:14:53.229 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:14:53.230 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:14:53.232 DEBUG 16112 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:14:53.255  INFO 16112 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-09 11:14:53.259  INFO 16112 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-09 11:15:02.750  INFO 24084 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Starting ArticleServiceImplTests on DESKTOP-QNDK7AF with PID 24084 (started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:15:02.751 DEBUG 24084 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:15:02.751  INFO 24084 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : The following profiles are active: dev
2020-04-09 11:15:04.267  INFO 24084 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:15:04.787  INFO 24084 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:15:06.336  INFO 24084 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:15:06.461  INFO 24084 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:15:06.848  INFO 24084 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Started ArticleServiceImplTests in 4.769 seconds (JVM running for 5.983)
2020-04-09 11:15:07.214 DEBUG 24084 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:15:07.248 DEBUG 24084 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %1%(String)
2020-04-09 11:15:07.277 DEBUG 24084 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id WHERE (title LIKE ?) LIMIT ?,? 
2020-04-09 11:15:07.279 DEBUG 24084 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %1%(String), 0(Long), 5(Long)
2020-04-09 11:15:07.342 DEBUG 24084 --- [main] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-09 11:15:07.350 DEBUG 24084 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:15:07.350 DEBUG 24084 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:15:07.353 DEBUG 24084 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:15:07.372  INFO 24084 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-09 11:15:07.376  INFO 24084 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-09 11:17:22.232  INFO 18392 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Starting ArticleServiceImplTests on DESKTOP-QNDK7AF with PID 18392 (started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:17:22.234 DEBUG 18392 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:17:22.234  INFO 18392 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : The following profiles are active: dev
2020-04-09 11:17:24.122  INFO 18392 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:17:24.713  INFO 18392 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:17:26.387  INFO 18392 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:17:26.542  INFO 18392 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:17:27.023  INFO 18392 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Started ArticleServiceImplTests in 5.486 seconds (JVM running for 7.781)
2020-04-09 11:17:27.448 DEBUG 18392 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:17:27.483 DEBUG 18392 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %1%(String)
2020-04-09 11:17:27.512 DEBUG 18392 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id WHERE (title LIKE ?) LIMIT ?,? 
2020-04-09 11:17:27.514 DEBUG 18392 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %1%(String), 0(Long), 5(Long)
2020-04-09 11:17:27.585 DEBUG 18392 --- [main] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-09 11:17:27.595 DEBUG 18392 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:17:27.595 DEBUG 18392 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:17:27.597 DEBUG 18392 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:17:27.622  INFO 18392 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-09 11:17:27.627  INFO 18392 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-09 11:17:32.943  INFO 18100 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 18100 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-09 11:17:32.946 DEBUG 18100 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-09 11:17:32.946  INFO 18100 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-09 11:17:32.994  INFO 18100 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-09 11:17:32.995  INFO 18100 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-09 11:17:33.986  INFO 18100 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-09 11:17:33.992  INFO 18100 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-09 11:17:33.992  INFO 18100 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-09 11:17:34.054  INFO 18100 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-09 11:17:34.055  INFO 18100 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1060 ms
2020-04-09 11:17:34.197  INFO 18100 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-09 11:17:34.424  INFO 18100 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-09 11:17:35.241  INFO 18100 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-09 11:17:35.297  INFO 18100 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-09 11:17:35.434  INFO 18100 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-09 11:17:35.477  INFO 18100 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-09 11:17:35.480  INFO 18100 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.105 seconds (JVM running for 3.926)
2020-04-09 11:17:43.894  INFO 18100 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=4B0DAFEC1CE7567A2AC63074A94C7D19] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-09 11:17:43.900  INFO 18100 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-09 11:17:43.900  INFO 18100 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-09 11:17:43.911  INFO 18100 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-09 11:17:44.010 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:17:44.025 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:17:44.039 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:17:44.040 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:17:44.073 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:17:44.083 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:17:44.083 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:17:44.085 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:17:44.087 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:17:44.087 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:17:44.088 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:17:44.089 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:17:44.089 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:17:44.090 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:17:44.092 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:17:44.093 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:17:44.094 DEBUG 18100 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:18:26.270 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:18:26.270 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:18:26.273 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:18:26.273 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:18:26.281 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:18:26.284 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:18:26.285 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:18:26.287 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:18:26.289 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:18:26.290 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:18:26.294 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:18:26.297 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:18:26.297 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:18:26.299 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:18:26.301 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:18:26.302 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:18:26.305 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:19:49.198 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 11:19:49.201 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 11:19:49.209 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 11:19:49.213  INFO 18100 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 69ms, description = 初始化后台主页}
2020-04-09 11:19:49.214  INFO 18100 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 11:19:49.773 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:19:49.774 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:19:49.777 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:19:49.777 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:19:49.785 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:19:49.790 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:19:49.791 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:19:49.795 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:19:49.798 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:19:49.799 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:19:49.801 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:19:49.803 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:19:49.806 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:19:49.808 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:19:49.811 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:19:49.812 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:19:49.815 DEBUG 18100 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:19:53.506 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:19:53.507 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:19:53.508 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:19:53.509 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:19:53.514 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:19:53.515 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:19:53.515 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:19:53.517 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:19:53.518 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:19:53.519 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:19:53.521 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:19:53.523 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:19:53.523 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:19:53.526 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:19:53.528 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:19:53.529 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:19:53.531 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:20:48.886 DEBUG 18100 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 11:20:48.886 DEBUG 18100 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 11:20:48.891 DEBUG 18100 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 11:20:48.892  INFO 18100 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-09 11:20:48.892  INFO 18100 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 11:20:49.387 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:20:49.388 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:20:49.391 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:20:49.392 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:20:49.398 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:20:49.399 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:20:49.400 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:20:49.402 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:20:49.404 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:20:49.404 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:20:49.409 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:20:49.411 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:20:49.412 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:20:49.414 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:20:49.415 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:20:49.415 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:20:49.416 DEBUG 18100 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:20:51.283 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (title LIKE ?) 
2020-04-09 11:20:51.284 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: %{"title":"1"}%(String)
2020-04-09 11:20:51.287 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (title LIKE ?) 
2020-04-09 11:20:51.288 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: %{"title":"1"}%(String)
2020-04-09 11:20:51.289 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:22:57.221 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 11:22:57.221 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 11:22:57.223 DEBUG 18100 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 11:22:57.224  INFO 18100 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-09 11:22:57.225  INFO 18100 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 11:22:57.730 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:22:57.730 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:22:57.733 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:22:57.733 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:22:57.745 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:22:57.748 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:22:57.749 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:22:57.752 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:22:57.756 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:22:57.756 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:22:57.760 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:22:57.763 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:22:57.763 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:22:57.765 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:22:57.767 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:22:57.767 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:22:57.769 DEBUG 18100 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:22:59.588 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:22:59.589 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:22:59.591 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:22:59.592 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:22:59.595 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:22:59.596 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:22:59.596 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:22:59.597 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:22:59.598 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:22:59.598 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:22:59.599 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:22:59.600 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:22:59.600 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:22:59.601 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:22:59.602 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:22:59.602 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:22:59.603 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:24:28.018 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-09 11:24:28.019 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-09 11:24:28.025 DEBUG 18100 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-09 11:24:28.025  INFO 18100 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-09 11:24:28.026  INFO 18100 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=文章发布, icon=fa fa-book, href=/api/page?pageName=article/article-add, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=文章管理, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-09 11:24:28.430 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:24:28.430 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:24:28.432 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:24:28.432 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:24:28.438 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:24:28.439 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:24:28.439 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:24:28.441 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:24:28.442 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:24:28.442 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:24:28.445 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:24:28.446 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:24:28.447 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:24:28.449 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:24:28.450 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:24:28.450 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:24:28.453 DEBUG 18100 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-09 11:24:30.373 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-09 11:24:30.373 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-09 11:24:30.374 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-09 11:24:30.375 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-09 11:24:30.378 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 3
2020-04-09 11:24:30.379 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:24:30.379 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-09 11:24:30.382 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-09 11:24:30.383 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:24:30.383 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-09 11:24:30.384 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:24:30.386 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-09 11:24:30.386 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-09 11:24:30.387 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-09 11:24:30.388 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-09 11:24:30.388 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-09 11:24:30.389 DEBUG 18100 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
