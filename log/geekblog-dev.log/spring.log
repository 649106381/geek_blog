2020-04-08 09:48:38.867  INFO 9812 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 9812 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 09:48:38.872 DEBUG 9812 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 09:48:38.872  INFO 9812 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 09:48:40.390  INFO 9812 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 09:48:41.072  INFO 9812 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 09:48:42.099  WARN 9812 --- [main] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: site.alanliang.geekblog.domain.ArticleTag.
2020-04-08 09:48:43.498  INFO 9812 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 09:48:43.641  INFO 9812 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 09:48:44.053  INFO 9812 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.797 seconds (JVM running for 7.471)
2020-04-08 09:48:44.093  INFO 9812 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@287ae90c, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@2e1b374c]; rollback [true]
2020-04-08 09:48:44.396  INFO 9812 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@287ae90c, testMethod = testBatchInsert@ArticleTagMapperTests, testException = org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'tagIdList' not found. Available parameters are [tagList, articleId, param1, param2], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 09:48:44.421  INFO 9812 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 09:48:44.427  INFO 9812 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 09:49:31.094  INFO 20956 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 20956 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 09:49:31.096 DEBUG 20956 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 09:49:31.096  INFO 20956 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 09:49:32.792  INFO 20956 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 09:49:33.367  INFO 20956 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 09:49:33.621  WARN 20956 --- [main] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: site.alanliang.geekblog.domain.ArticleTag.
2020-04-08 09:49:35.066  INFO 20956 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 09:49:35.206  INFO 20956 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 09:49:35.572  INFO 20956 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.305 seconds (JVM running for 6.763)
2020-04-08 09:49:35.613  INFO 20956 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@63f9b562, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@20ead579]; rollback [true]
2020-04-08 09:49:35.868 DEBUG 20956 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-04-08 09:49:35.912  INFO 20956 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@63f9b562, testMethod = testBatchInsert@ArticleTagMapperTests, testException = org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'tagList' not found. Available parameters are [articleId, param1, tagIdList, param2], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 09:49:35.934  INFO 20956 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 09:49:35.940  INFO 20956 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 09:50:21.521  INFO 15836 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 15836 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 09:50:21.522 DEBUG 15836 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 09:50:21.523  INFO 15836 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 09:50:23.530  INFO 15836 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 09:50:24.130  INFO 15836 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 09:50:24.389  WARN 15836 --- [main] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: site.alanliang.geekblog.domain.ArticleTag.
2020-04-08 09:50:25.706  INFO 15836 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 09:50:25.840  INFO 15836 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 09:50:26.253  INFO 15836 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.663 seconds (JVM running for 7.37)
2020-04-08 09:50:26.287  INFO 15836 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@63f9b562, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@20ead579]; rollback [true]
2020-04-08 09:50:26.563 DEBUG 15836 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-04-08 09:50:26.609 DEBUG 15836 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-04-08 09:50:26.615 DEBUG 15836 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 4
2020-04-08 09:50:26.627  INFO 15836 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@63f9b562, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 09:50:26.644  INFO 15836 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 09:50:26.649  INFO 15836 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 09:53:04.913  INFO 15228 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 15228 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 09:53:04.915 DEBUG 15228 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 09:53:04.915  INFO 15228 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 09:53:06.489  INFO 15228 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 09:53:07.026  INFO 15228 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 09:53:07.248  WARN 15228 --- [main] c.b.m.core.metadata.TableInfoHelper      : Warn: Could not find @TableId in Class: site.alanliang.geekblog.domain.ArticleTag.
2020-04-08 09:53:08.635  INFO 15228 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 09:53:08.759  INFO 15228 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 09:53:09.162  INFO 15228 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 4.907 seconds (JVM running for 6.17)
2020-04-08 09:53:09.463 DEBUG 15228 --- [main] s.a.g.m.ArticleTagMapper.selectList      : ==>  Preparing: SELECT article_id,tag_id FROM article_tag 
2020-04-08 09:53:09.496 DEBUG 15228 --- [main] s.a.g.m.ArticleTagMapper.selectList      : ==> Parameters: 
2020-04-08 09:53:09.610  INFO 15228 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 09:53:09.614  INFO 15228 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 09:55:08.268  INFO 17216 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 17216 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 09:55:08.270 DEBUG 17216 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 09:55:08.270  INFO 17216 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 09:55:09.816  INFO 17216 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 09:55:10.317  INFO 17216 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 09:55:11.968  INFO 17216 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 09:55:12.101  INFO 17216 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 09:55:12.527  INFO 17216 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.036 seconds (JVM running for 6.427)
2020-04-08 09:55:12.831 DEBUG 17216 --- [main] s.a.g.m.ArticleTagMapper.selectList      : ==>  Preparing: SELECT article_id,tag_id FROM t_article_tag 
2020-04-08 09:55:12.859 DEBUG 17216 --- [main] s.a.g.m.ArticleTagMapper.selectList      : ==> Parameters: 
2020-04-08 09:55:12.876 DEBUG 17216 --- [main] s.a.g.m.ArticleTagMapper.selectList      : <==      Total: 0
2020-04-08 09:55:12.897  INFO 17216 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 09:55:12.900  INFO 17216 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 09:55:38.864  INFO 7736 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 7736 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 09:55:38.865 DEBUG 7736 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 09:55:38.865  INFO 7736 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 09:55:40.357  INFO 7736 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 09:55:40.880  INFO 7736 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 09:55:42.469  INFO 7736 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 09:55:42.595  INFO 7736 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 09:55:43.005  INFO 7736 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 4.796 seconds (JVM running for 6.136)
2020-04-08 09:55:43.051  INFO 7736 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@3d299393, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@5f34907b]; rollback [true]
2020-04-08 09:55:43.349 DEBUG 7736 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-04-08 09:55:43.394 DEBUG 7736 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-04-08 09:55:43.399 DEBUG 7736 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 4
2020-04-08 09:55:43.412  INFO 7736 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@3d299393, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 09:55:43.429  INFO 7736 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 09:55:43.433  INFO 7736 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:03:09.599  INFO 12000 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 12000 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:03:09.600 DEBUG 12000 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:03:09.601  INFO 12000 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:03:11.405  INFO 12000 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:03:12.028  INFO 12000 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:03:13.726  INFO 12000 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:03:13.858  INFO 12000 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:03:14.259  INFO 12000 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.421 seconds (JVM running for 6.635)
2020-04-08 10:03:14.305  INFO 12000 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@54b2fc58, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@daf22f0]; rollback [true]
2020-04-08 10:03:14.558 DEBUG 12000 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-04-08 10:03:14.595 DEBUG 12000 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-04-08 10:03:14.599 DEBUG 12000 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 4
2020-04-08 10:03:14.623  INFO 12000 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@54b2fc58, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:03:14.642  INFO 12000 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:03:14.646  INFO 12000 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:08:41.297  INFO 18552 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 18552 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:08:41.298 DEBUG 18552 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:08:41.298  INFO 18552 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:08:43.075  INFO 18552 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:08:43.652  INFO 18552 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:08:45.305  INFO 18552 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:08:45.432  INFO 18552 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:08:45.841  INFO 18552 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.303 seconds (JVM running for 6.673)
2020-04-08 10:08:45.891  INFO 18552 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@3012646b testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@4b1ec694, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@4a883b15 testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@17046283, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5a63f509, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@7a69b07, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@c33b74f], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@3d299393]; rollback [true]
2020-04-08 10:08:46.191 DEBUG 18552 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-04-08 10:08:46.229 DEBUG 18552 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-04-08 10:08:46.233 DEBUG 18552 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 4
2020-04-08 10:08:46.244  INFO 18552 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@3012646b testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@4b1ec694, testMethod = testBatchInsert@ArticleTagMapperTests, testException = java.lang.UnsupportedOperationException: Manual commit is not allowed over a Spring managed SqlSession, mergedContextConfiguration = [WebMergedContextConfiguration@4a883b15 testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@17046283, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5a63f509, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@7a69b07, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@c33b74f], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:08:46.269  INFO 18552 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:08:46.272  INFO 18552 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:19:57.523  INFO 19124 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 19124 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:19:57.524 DEBUG 19124 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:19:57.524  INFO 19124 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:19:59.076  INFO 19124 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:19:59.645  INFO 19124 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:20:01.186  INFO 19124 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:20:01.322  INFO 19124 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:20:01.727  INFO 19124 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 4.952 seconds (JVM running for 6.443)
2020-04-08 10:20:01.766  INFO 19124 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@2b4d4327, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@16da1abc]; rollback [true]
2020-04-08 10:20:02.048 DEBUG 19124 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-04-08 10:20:02.086 DEBUG 19124 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-04-08 10:20:02.091 DEBUG 19124 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 4
2020-04-08 10:20:02.108  INFO 19124 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@2b4d4327, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:20:02.124  INFO 19124 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:20:02.129  INFO 19124 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:23:05.463  INFO 24592 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 24592 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:23:05.464 DEBUG 24592 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:23:05.464  INFO 24592 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:23:06.953  INFO 24592 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:23:07.504  INFO 24592 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:23:09.012  INFO 24592 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:23:09.145  INFO 24592 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:23:09.533  INFO 24592 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 4.792 seconds (JVM running for 6.346)
2020-04-08 10:23:09.571  INFO 24592 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@18df8434 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@61ae0d43, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65c7a252 testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@19bb07ed, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2667f029, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@31368b99, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@243c4f91], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@ef718de]; rollback [true]
2020-04-08 10:23:09.788  INFO 24592 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@18df8434 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@61ae0d43, testMethod = testBatchInsert@ArticleTagMapperTests, testException = java.lang.NullPointerException, mergedContextConfiguration = [WebMergedContextConfiguration@65c7a252 testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@19bb07ed, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2667f029, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@31368b99, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@243c4f91], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:23:09.806  INFO 24592 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:23:09.811  INFO 24592 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:24:25.089  INFO 17792 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 17792 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:24:25.091 DEBUG 17792 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:24:25.092  INFO 17792 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:24:26.631  INFO 17792 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:24:27.215  INFO 17792 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:24:28.769  INFO 17792 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:24:28.896  INFO 17792 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:24:29.273  INFO 17792 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.01 seconds (JVM running for 6.273)
2020-04-08 10:24:29.314  INFO 17792 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@18df8434 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@16da1abc, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65c7a252 testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@19bb07ed, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2667f029, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@31368b99, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@243c4f91], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@671ea6ff]; rollback [true]
2020-04-08 10:24:29.534  INFO 17792 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@18df8434 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@16da1abc, testMethod = testBatchInsert@ArticleTagMapperTests, testException = java.lang.NullPointerException, mergedContextConfiguration = [WebMergedContextConfiguration@65c7a252 testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@19bb07ed, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2667f029, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@31368b99, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@243c4f91], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:24:29.556  INFO 17792 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:24:29.562  INFO 17792 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:24:58.024  INFO 1428 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 1428 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:24:58.026 DEBUG 1428 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:24:58.026  INFO 1428 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:24:59.759  INFO 1428 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:25:00.373  INFO 1428 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:25:02.149  INFO 1428 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:25:02.296  INFO 1428 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:25:02.779  INFO 1428 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.513 seconds (JVM running for 7.794)
2020-04-08 10:25:02.827  INFO 1428 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@1b2c4efb testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@3e28dc96, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@c35172e testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@69504ae9, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1500b2f3, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@2f953efd, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@5e3f861], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@44eb2452]; rollback [true]
2020-04-08 10:25:03.103  INFO 1428 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@1b2c4efb testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@3e28dc96, testMethod = testBatchInsert@ArticleTagMapperTests, testException = java.lang.NullPointerException, mergedContextConfiguration = [WebMergedContextConfiguration@c35172e testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@69504ae9, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1500b2f3, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@2f953efd, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@5e3f861], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:25:03.135  INFO 1428 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:25:03.147  INFO 1428 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:25:21.641  INFO 24536 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 24536 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:25:21.643 DEBUG 24536 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:25:21.644  INFO 24536 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:25:23.424  INFO 24536 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:25:24.063  INFO 24536 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:25:25.733  INFO 24536 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:25:25.874  INFO 24536 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:25:26.396  INFO 24536 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.645 seconds (JVM running for 7.572)
2020-04-08 10:25:26.463  INFO 24536 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@1b2c4efb testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@1f0e2bdc, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@c35172e testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@69504ae9, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1500b2f3, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@2f953efd, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@5e3f861], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@682266d8]; rollback [true]
2020-04-08 10:25:49.637  INFO 24536 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@1b2c4efb testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@1f0e2bdc, testMethod = testBatchInsert@ArticleTagMapperTests, testException = java.lang.NullPointerException, mergedContextConfiguration = [WebMergedContextConfiguration@c35172e testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@69504ae9, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1500b2f3, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@2f953efd, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@5e3f861], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:25:49.665  INFO 24536 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:25:49.674  INFO 24536 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:28:53.812  INFO 23300 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 23300 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:28:53.814 DEBUG 23300 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:28:53.814  INFO 23300 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:28:55.283  INFO 23300 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:28:55.783  INFO 23300 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:28:57.379  INFO 23300 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:28:57.519  INFO 23300 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:28:57.871  INFO 23300 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 4.793 seconds (JVM running for 6.23)
2020-04-08 10:28:57.910  INFO 23300 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@18df8434 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@1526f71, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65c7a252 testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@19bb07ed, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2667f029, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@31368b99, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@243c4f91], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@49ca94a9]; rollback [true]
2020-04-08 10:28:58.132  INFO 23300 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@18df8434 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@1526f71, testMethod = testBatchInsert@ArticleTagMapperTests, testException = java.lang.NullPointerException, mergedContextConfiguration = [WebMergedContextConfiguration@65c7a252 testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@19bb07ed, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@2667f029, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@31368b99, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@243c4f91], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:28:58.158  INFO 23300 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:28:58.163  INFO 23300 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:33:33.555  INFO 19712 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Starting ArticleTagMapperTests on DESKTOP-QNDK7AF with PID 19712 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:33:33.556 DEBUG 19712 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:33:33.557  INFO 19712 --- [main] s.a.g.mapper.ArticleTagMapperTests       : The following profiles are active: dev
2020-04-08 10:33:35.249  INFO 19712 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:33:35.786  INFO 19712 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:33:37.426  INFO 19712 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:33:37.559  INFO 19712 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:33:37.978  INFO 19712 --- [main] s.a.g.mapper.ArticleTagMapperTests       : Started ArticleTagMapperTests in 5.179 seconds (JVM running for 6.439)
2020-04-08 10:33:38.017  INFO 19712 --- [main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@ef718de, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@287ae90c]; rollback [true]
2020-04-08 10:33:38.298 DEBUG 19712 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-04-08 10:33:38.335 DEBUG 19712 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-04-08 10:33:38.341 DEBUG 19712 --- [main] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 4
2020-04-08 10:33:38.355  INFO 19712 --- [main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test: [DefaultTestContext@25641d39 testClass = ArticleTagMapperTests, testInstance = site.alanliang.geekblog.mapper.ArticleTagMapperTests@ef718de, testMethod = testBatchInsert@ArticleTagMapperTests, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@7b36aa0c testClass = ArticleTagMapperTests, locations = '{}', classes = '{class site.alanliang.geekblog.GeekBlogApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@5a63f509, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@e056f20, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@636be97c, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@619713e5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
2020-04-08 10:33:38.372  INFO 19712 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 10:33:38.376  INFO 19712 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 10:38:24.958  INFO 26600 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 26600 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:38:24.961 DEBUG 26600 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:38:24.961  INFO 26600 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 10:38:25.085  INFO 26600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 10:38:25.085  INFO 26600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 10:38:26.412  INFO 26600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 10:38:26.423  INFO 26600 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 10:38:26.424  INFO 26600 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 10:38:26.539  INFO 26600 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 10:38:26.539  INFO 26600 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1454 ms
2020-04-08 10:38:26.743  INFO 26600 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:38:27.100  INFO 26600 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:38:27.989  INFO 26600 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:38:28.050  INFO 26600 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:38:28.243  INFO 26600 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 10:38:28.292  INFO 26600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 10:38:28.295  INFO 26600 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.916 seconds (JVM running for 5.155)
2020-04-08 10:39:09.627  INFO 26600 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 10:39:09.635  INFO 26600 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 10:39:09.635  INFO 26600 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 10:39:09.650  INFO 26600 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-04-08 10:39:10.382 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:39:10.400 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:39:10.419 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:39:10.422  INFO 26600 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 109ms, description = 初始化后台主页}
2020-04-08 10:39:10.424  INFO 26600 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:39:13.081 DEBUG 26600 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:39:13.081 DEBUG 26600 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:39:13.085 DEBUG 26600 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:39:13.087 DEBUG 26600 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:39:13.088 DEBUG 26600 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:39:13.095 DEBUG 26600 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:40:49.911 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:40:49.911 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:40:49.918 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:40:49.919  INFO 26600 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 13ms, description = 初始化后台主页}
2020-04-08 10:40:49.919  INFO 26600 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:40:50.454 DEBUG 26600 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:40:50.454 DEBUG 26600 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:40:50.458 DEBUG 26600 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:40:50.458 DEBUG 26600 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:40:50.459 DEBUG 26600 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:40:50.466 DEBUG 26600 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:42:48.599 DEBUG 26600 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:42:48.600 DEBUG 26600 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:42:48.608 DEBUG 26600 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:42:48.609  INFO 26600 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 13ms, description = 初始化后台主页}
2020-04-08 10:42:48.609  INFO 26600 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:42:49.093 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:42:49.093 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:42:49.093 DEBUG 26600 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:42:49.093 DEBUG 26600 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:42:49.096 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:42:49.097 DEBUG 26600 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:43:19.917 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:43:19.917 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:43:19.922 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:43:19.922  INFO 26600 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 10:43:19.922  INFO 26600 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:43:20.224 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:43:20.224 DEBUG 26600 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:43:20.224 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:43:20.225 DEBUG 26600 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:43:20.231 DEBUG 26600 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:43:20.231 DEBUG 26600 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:44:05.439 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:44:05.439 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:44:05.441 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:44:05.442  INFO 26600 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 10:44:05.442  INFO 26600 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:44:05.711 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:44:05.711 DEBUG 26600 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:44:05.711 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:44:05.711 DEBUG 26600 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:44:05.715 DEBUG 26600 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:44:05.717 DEBUG 26600 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:44:15.641  INFO 18852 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 18852 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 10:44:15.645 DEBUG 18852 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 10:44:15.645  INFO 18852 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 10:44:15.687  INFO 18852 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 10:44:15.687  INFO 18852 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 10:44:16.793  INFO 18852 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 10:44:16.800  INFO 18852 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 10:44:16.800  INFO 18852 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 10:44:16.861  INFO 18852 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 10:44:16.861  INFO 18852 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1174 ms
2020-04-08 10:44:17.001  INFO 18852 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 10:44:17.248  INFO 18852 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 10:44:18.038  INFO 18852 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 10:44:18.107  INFO 18852 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 10:44:18.242  INFO 18852 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 10:44:18.287  INFO 18852 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 10:44:18.289  INFO 18852 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.238 seconds (JVM running for 4.684)
2020-04-08 10:44:52.153  INFO 18852 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 10:44:52.161  INFO 18852 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 10:44:52.162  INFO 18852 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 10:44:52.168  INFO 18852 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
2020-04-08 10:44:52.655 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:44:52.673 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:44:52.692 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:44:52.695  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 99ms, description = 初始化后台主页}
2020-04-08 10:44:52.696  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:44:53.092 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:44:53.092 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:44:53.095 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:44:53.097 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:44:53.098 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:44:53.105 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:46:36.977 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:46:36.977 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:46:36.982 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:46:36.982  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 10:46:36.983  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:46:37.318 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:46:37.318 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:46:37.318 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:46:37.319 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:46:37.321 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:46:37.325 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:48:01.768 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:48:01.768 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:48:01.772 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:48:01.772  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 10:48:01.772  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:48:02.225 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:48:02.226 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:48:02.226 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:48:02.226 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:48:02.230 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:48:02.231 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:48:34.628 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:48:34.629 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:48:34.636 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:48:34.636  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 11ms, description = 初始化后台主页}
2020-04-08 10:48:34.637  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:48:34.990 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:48:34.991 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:48:34.991 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:48:34.991 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:48:34.995 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:48:34.995 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 10:49:47.775 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 10:49:47.776 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 10:49:47.778 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 10:49:47.778  INFO 18852 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 10:49:47.779  INFO 18852 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 10:49:48.079 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 10:49:48.079 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 10:49:48.079 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 10:49:48.079 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 10:49:48.084 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 10:49:48.085 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:04:59.574 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:04:59.576 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:04:59.581 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:04:59.582  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 11ms, description = 初始化后台主页}
2020-04-08 11:04:59.582  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:04:59.847 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:04:59.847 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:04:59.848 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:04:59.848 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:04:59.851 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:04:59.852 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:05:29.209 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:05:29.209 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:05:29.213 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:05:29.213  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 11:05:29.213  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:05:29.623 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:05:29.623 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:05:29.623 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:05:29.623 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:05:29.625 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:05:29.626 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:05:52.085 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:05:52.086 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:05:52.088 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:05:52.088  INFO 18852 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:05:52.089  INFO 18852 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:05:52.381 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:05:52.381 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:05:52.382 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:05:52.382 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:05:52.385 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:05:52.386 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:06:33.258 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:06:33.258 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:06:33.262 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:06:33.263  INFO 18852 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 11:06:33.263  INFO 18852 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:06:33.692 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:06:33.692 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:06:33.692 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:06:33.693 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:06:33.694 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:06:33.695 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:08:02.618 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:08:02.618 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:08:02.620 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:08:02.620  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:08:02.621  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:08:02.969 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:08:02.969 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:08:02.970 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:08:02.970 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:08:02.972 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:08:02.972 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:08:18.653 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:08:18.654 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:08:18.656 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:08:18.656  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 11:08:18.657  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:08:19.051 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:08:19.051 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:08:19.051 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:08:19.051 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:08:19.053 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:08:19.054 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:09:03.637 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:09:03.637 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:09:03.640 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:09:03.641  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 11:09:03.641  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:09:03.994 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:09:03.994 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:09:03.995 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:09:03.995 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:09:03.996 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:09:03.998 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:09:08.951 ERROR 18852 --- [http-nio-8888-exec-10] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:09:08.951  WARN 18852 --- [http-nio-8888-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:09:29.957 ERROR 18852 --- [http-nio-8888-exec-9] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:09:29.957  WARN 18852 --- [http-nio-8888-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:12:20.500 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:12:20.501 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:12:20.504 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:12:20.505  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 11:12:20.505  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:12:20.773 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:12:20.773 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:12:20.773 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:12:20.774 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:12:20.776 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:12:20.777 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:12:27.831 ERROR 18852 --- [http-nio-8888-exec-6] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:12:27.832  WARN 18852 --- [http-nio-8888-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:13:05.720 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:13:05.720 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:13:05.724 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:13:05.725  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 11:13:05.725  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:13:06.251 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:13:06.251 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:13:06.252 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:13:06.252 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:13:06.255 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:13:06.257 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:13:10.277 ERROR 18852 --- [http-nio-8888-exec-6] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:13:10.277  WARN 18852 --- [http-nio-8888-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:14:15.102 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:14:15.103 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:14:15.106 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:14:15.108  INFO 18852 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 11:14:15.109  INFO 18852 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:14:15.552 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:14:15.552 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:14:15.552 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:14:15.552 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:14:15.556 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:14:15.557 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:14:19.128 ERROR 18852 --- [http-nio-8888-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:14:19.128  WARN 18852 --- [http-nio-8888-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:14:28.905 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:14:28.906 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:14:28.908 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:14:28.909  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 11:14:28.909  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:14:29.243 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:14:29.243 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:14:29.244 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:14:29.244 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:14:29.245 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:14:29.246 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:14:52.573 ERROR 18852 --- [http-nio-8888-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:14:52.573  WARN 18852 --- [http-nio-8888-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:18:20.184 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:18:20.184 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:18:20.186 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:18:20.186  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:18:20.186  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:18:20.450 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:18:20.450 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:18:20.451 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:18:20.451 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:18:20.452 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:18:20.453 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:18:40.398 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:18:40.399 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:18:40.400 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:18:40.401  INFO 18852 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:18:40.401  INFO 18852 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:18:40.770 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:18:40.770 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:18:40.770 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:18:40.770 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:18:40.772 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:18:40.773 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:18:42.676 ERROR 18852 --- [http-nio-8888-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:18:42.676  WARN 18852 --- [http-nio-8888-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:18:52.592 ERROR 18852 --- [http-nio-8888-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:18:52.592  WARN 18852 --- [http-nio-8888-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:20:07.565 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:20:07.566 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:20:07.567 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:20:07.567  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 11:20:07.567  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:20:07.828 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:20:07.829 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:20:07.829 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:20:07.829 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:20:07.830 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:20:07.831 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:20:09.678 ERROR 18852 --- [http-nio-8888-exec-4] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/api/page, Exception : Required String parameter 'pageName' is not present
2020-04-08 11:20:09.678  WARN 18852 --- [http-nio-8888-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'pageName' is not present]
2020-04-08 11:22:20.117 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:22:20.117 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:22:20.121 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:22:20.122  INFO 18852 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 11:22:20.123  INFO 18852 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:22:20.408 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:22:20.408 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:22:20.409 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:22:20.409 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:22:20.410 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:22:20.411 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:22:43.777 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:22:43.777 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:22:43.780 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:22:43.781  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 11:22:43.781  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:22:44.232 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:22:44.232 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:22:44.233 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:22:44.233 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:22:44.234 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:22:44.235 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:23:30.766 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:23:30.766 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:23:30.771 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:23:30.772  INFO 18852 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-08 11:23:30.772  INFO 18852 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:23:31.199 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:23:31.200 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:23:31.200 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:23:31.200 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:23:31.204 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:23:31.205 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:24:25.345 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:24:25.345 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:24:25.347 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:24:25.348  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 11:24:25.348  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:24:25.747 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:24:25.747 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:24:25.747 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:24:25.748 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:24:25.750 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:24:25.750 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:26:41.983 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:26:41.984 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:26:41.989 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:26:41.990  INFO 18852 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 11:26:41.990  INFO 18852 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:26:42.466 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:26:42.466 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:26:42.467 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:26:42.467 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:26:42.468 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:26:42.469 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:27:05.387 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:27:05.387 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:27:05.388 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:27:05.389  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 11:27:05.389  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:27:05.662 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:27:05.662 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:27:05.662 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:27:05.662 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:27:05.663 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:27:05.664 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:28:48.221 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:28:48.222 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:28:48.226 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:28:48.227  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 11:28:48.227  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:28:48.672 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:28:48.672 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:28:48.674 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:28:48.679 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:28:48.680 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:28:48.682 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:32:00.717 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:32:00.717 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:32:00.718 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:32:00.719  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 11:32:00.719  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:32:01.002 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:32:01.002 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:32:01.003 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:32:01.003 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:32:01.004 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:32:01.005 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:32:57.403 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:32:57.403 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:32:57.405 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:32:57.406  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 11:32:57.406  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:32:57.846 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:32:57.847 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:32:57.847 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:32:57.848 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:32:57.850 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:32:57.858 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:34:01.427 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:34:01.427 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:34:01.429 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:34:01.430  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:34:01.430  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:34:02.105 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:34:02.106 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:34:02.107 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:34:02.112 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:34:02.113 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:34:02.116 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:34:29.786 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:34:29.786 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:34:29.787 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:34:29.787  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 2ms, description = 初始化后台主页}
2020-04-08 11:34:29.787  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:34:30.180 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:34:30.180 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:34:30.180 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:34:30.180 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:34:30.182 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:34:30.182 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:35:50.692 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:35:50.692 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:35:50.694 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:35:50.695  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:35:50.695  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:35:51.045 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:35:51.045 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:35:51.045 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:35:51.045 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:35:51.047 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:35:51.047 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:36:10.472 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:36:10.473 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:36:10.475 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:36:10.475  INFO 18852 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:36:10.476  INFO 18852 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:36:36.386 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:36:36.386 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:36:36.388 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:36:36.389  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:36:36.389  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:36:36.979 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:36:36.979 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:36:36.981 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:36:36.981 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:36:36.981 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:36:36.984 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:39:48.536 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:39:48.537 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:39:48.538 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:39:48.538  INFO 18852 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 11:39:48.538  INFO 18852 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:40:17.574 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:40:17.575 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:40:17.576 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:40:17.577  INFO 18852 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 11:40:17.577  INFO 18852 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:40:18.109 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:40:18.109 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:40:18.111 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:40:18.112 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:40:18.112 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:40:18.114 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:40:36.475 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:40:36.475 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:40:36.477 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:40:36.477  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 11:40:36.478  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:40:36.985 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:40:36.985 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:40:36.985 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:40:36.985 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:40:36.987 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:40:36.987 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:41:07.401 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:41:07.401 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:41:07.403 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:41:07.404  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:41:07.404  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:41:07.964 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:41:07.964 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:41:07.964 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:41:07.964 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:41:07.965 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:41:07.966 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:41:31.184 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:41:31.185 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:41:31.188 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:41:31.189  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 11:41:31.189  INFO 18852 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:41:31.498 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:41:31.498 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:41:31.498 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:41:31.498 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:41:31.499 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:41:31.499 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:44:14.100 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:44:14.101 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:44:14.103 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:44:14.103  INFO 18852 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 11:44:14.103  INFO 18852 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:44:14.355 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:44:14.355 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:44:14.355 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:44:14.355 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:44:14.357 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:44:14.357 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:45:27.586 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:45:27.586 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:45:27.588 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:45:27.588  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 11:45:27.588  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:45:28.070 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:45:28.071 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:45:28.072 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:45:28.072 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:45:28.072 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:45:28.073 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:46:26.120 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:46:26.121 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:46:26.122 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:46:26.122  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 11:46:26.122  INFO 18852 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:46:26.459 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:46:26.459 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:46:26.460 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:46:26.460 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:46:26.479 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:46:26.479 DEBUG 18852 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:48:43.212 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:48:43.212 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:48:43.215 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:48:43.215  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 11:48:43.215  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:48:43.616 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:48:43.616 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:48:43.616 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:48:43.616 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:48:43.618 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:48:43.618 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:50:40.942 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:50:40.942 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:50:40.945 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:50:40.945  INFO 18852 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 11:50:40.946  INFO 18852 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:50:41.517 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:50:41.518 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:50:41.521 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:50:41.521 DEBUG 18852 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:50:41.521 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:50:41.524 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:54:30.174 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:54:30.175 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:54:30.177 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:54:30.177  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 11:54:30.178  INFO 18852 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:54:30.545 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:54:30.546 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:54:30.547 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:54:30.547 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:54:30.549 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:54:30.549 DEBUG 18852 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:55:01.177 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:55:01.177 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:55:01.178 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:55:01.179  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 11:55:01.179  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:55:01.578 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:55:01.578 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:55:01.579 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:55:01.579 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:55:01.579 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:55:01.581 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:55:59.942 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:55:59.943 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:55:59.945 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:55:59.946  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 11:55:59.946  INFO 18852 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:56:00.586 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:56:00.586 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:56:00.588 DEBUG 18852 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:56:00.589 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:56:00.589 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:56:00.592 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:58:19.718 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:58:19.718 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:58:19.719 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:58:19.719  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 2ms, description = 初始化后台主页}
2020-04-08 11:58:19.719  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:58:20.070 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:58:20.070 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:58:20.071 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:58:20.071 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:58:20.073 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:58:20.074 DEBUG 18852 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 11:58:54.917 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 11:58:54.918 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 11:58:54.920 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 11:58:54.921  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 11:58:54.921  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 11:58:55.454 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 11:58:55.455 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 11:58:55.456 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 11:58:55.456 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 11:58:55.456 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 11:58:55.458 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:01:55.933 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:01:55.933 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:01:55.934 DEBUG 18852 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:01:55.935  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 12:01:55.935  INFO 18852 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:01:56.194 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:01:56.194 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:01:56.195 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:01:56.195 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:01:56.195 DEBUG 18852 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:01:56.196 DEBUG 18852 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:04:36.460 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:04:36.461 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:04:36.464 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:04:36.466  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 12:04:36.466  INFO 18852 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:04:37.044 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:04:37.045 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:04:37.046 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:04:37.047 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:04:37.050 DEBUG 18852 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:04:37.051 DEBUG 18852 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:19:53.722  INFO 25812 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 25812 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:19:53.725 DEBUG 25812 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:19:53.725  INFO 25812 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:19:53.776  INFO 25812 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 12:19:53.777  INFO 25812 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 12:19:55.173  INFO 25812 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:19:55.182  INFO 25812 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:19:55.182  INFO 25812 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:19:55.261  INFO 25812 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:19:55.261  INFO 25812 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1484 ms
2020-04-08 12:19:55.458  INFO 25812 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:19:55.785  INFO 25812 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 12:19:56.750  INFO 25812 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:19:56.836  INFO 25812 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:19:57.037  INFO 25812 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:19:57.095  INFO 25812 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:19:57.098  INFO 25812 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 4.295 seconds (JVM running for 5.638)
2020-04-08 12:20:02.264  INFO 25812 --- [http-nio-8888-exec-2] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 12:20:02.271  INFO 25812 --- [http-nio-8888-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 12:20:02.272  INFO 25812 --- [http-nio-8888-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 12:20:02.280  INFO 25812 --- [http-nio-8888-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-08 12:20:02.906 DEBUG 25812 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:20:02.924 DEBUG 25812 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:20:02.941 DEBUG 25812 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:20:02.944  INFO 25812 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 113ms, description = 初始化后台主页}
2020-04-08 12:20:02.945  INFO 25812 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:20:03.392 DEBUG 25812 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:20:03.392 DEBUG 25812 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:20:03.397 DEBUG 25812 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:20:03.399 DEBUG 25812 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:20:03.400 DEBUG 25812 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:20:03.404 DEBUG 25812 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:20:36.659 DEBUG 25812 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:20:36.663 DEBUG 25812 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:20:36.675 DEBUG 25812 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:20:36.675  INFO 25812 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 23ms, description = 初始化后台主页}
2020-04-08 12:20:36.676  INFO 25812 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:20:37.237 DEBUG 25812 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:20:37.238 DEBUG 25812 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:20:37.238 DEBUG 25812 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:20:37.238 DEBUG 25812 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:20:37.241 DEBUG 25812 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:20:37.245 DEBUG 25812 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:20:55.862 ERROR 25812 --- [http-nio-8888-exec-9] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'content': rejected value [null]; codes [NotBlank.articleDto.content,NotBlank.content,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.content,content]; arguments []; default message [content]]; default message [文章内容不能为空]] 
2020-04-08 12:20:55.863  WARN 25812 --- [http-nio-8888-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'content': rejected value [null]; codes [NotBlank.articleDto.content,NotBlank.content,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.content,content]; arguments []; default message [content]]; default message [文章内容不能为空]] ]
2020-04-08 12:22:35.313 DEBUG 25812 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:22:35.314 DEBUG 25812 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:22:35.321 DEBUG 25812 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:22:35.322  INFO 25812 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 12ms, description = 初始化后台主页}
2020-04-08 12:22:35.322  INFO 25812 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:22:35.880 DEBUG 25812 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:22:35.880 DEBUG 25812 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:22:35.880 DEBUG 25812 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:22:35.880 DEBUG 25812 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:22:35.883 DEBUG 25812 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:22:35.885 DEBUG 25812 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:23:41.699 DEBUG 25812 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:23:41.702 DEBUG 25812 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:23:41.708 DEBUG 25812 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:23:41.709  INFO 25812 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 22ms, description = 初始化后台主页}
2020-04-08 12:23:41.709  INFO 25812 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:23:42.113 DEBUG 25812 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:23:42.114 DEBUG 25812 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:23:42.114 DEBUG 25812 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:23:42.114 DEBUG 25812 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:23:42.120 DEBUG 25812 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:23:42.120 DEBUG 25812 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:24:10.128  INFO 25812 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 12:24:10.131  INFO 25812 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 12:24:13.159  INFO 5128 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 5128 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:24:13.162 DEBUG 5128 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:24:13.162  INFO 5128 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:24:13.208  INFO 5128 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 12:24:13.208  INFO 5128 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 12:24:14.464  INFO 5128 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:24:14.473  INFO 5128 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:24:14.473  INFO 5128 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:24:14.549  INFO 5128 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:24:14.550  INFO 5128 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1341 ms
2020-04-08 12:24:14.749  INFO 5128 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:24:15.032  INFO 5128 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 12:24:15.922  INFO 5128 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:24:15.986  INFO 5128 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:24:16.159  INFO 5128 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:24:16.213  INFO 5128 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:24:16.215  INFO 5128 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.799 seconds (JVM running for 5.167)
2020-04-08 12:24:20.661  INFO 5128 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 12:24:20.671  INFO 5128 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 12:24:20.671  INFO 5128 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 12:24:20.682  INFO 5128 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-08 12:24:49.890  INFO 5128 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 12:24:49.894  INFO 5128 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 12:24:49.929 DEBUG 5128 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO article ( id, title, summary, content, appreciable, commentable, category_id ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 12:24:49.949 DEBUG 5128 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 1247742170002169858(Long), 阿斯顿发送到指向内存(String), 啥打法鲨打错接下来(String), <p>撒地方撒大黄蜂肯定撒家乐福和物资然后嘞</p>(String), true(Boolean), true(Boolean), 1(Long)
2020-04-08 12:24:50.012 ERROR 5128 --- [http-nio-8888-exec-1] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO article  ( id, title, summary, content,      appreciable, commentable,   category_id )  VALUES  ( ?, ?, ?, ?,      ?, ?,   ? )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
2020-04-08 12:24:50.045  WARN 5128 --- [http-nio-8888-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO article  ( id, title, summary, content,      appreciable, commentable,   category_id )  VALUES  ( ?, ?, ?, ?,      ?, ?,   ? )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist]
2020-04-08 12:28:54.703  INFO 23280 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 23280 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:28:54.710 DEBUG 23280 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:28:54.711  INFO 23280 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:28:54.795  INFO 23280 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 12:28:54.795  INFO 23280 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 12:28:56.064  INFO 23280 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:28:56.072  INFO 23280 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:28:56.073  INFO 23280 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:28:56.146  INFO 23280 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:28:56.147  INFO 23280 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1351 ms
2020-04-08 12:28:56.329  INFO 23280 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:28:56.656  INFO 23280 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 12:28:57.507  INFO 23280 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:28:57.563  INFO 23280 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:28:57.707  INFO 23280 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:28:57.758  INFO 23280 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:28:57.760  INFO 23280 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.78 seconds (JVM running for 4.642)
2020-04-08 12:28:57.985  INFO 23280 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 12:28:57.993  INFO 23280 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 12:28:57.993  INFO 23280 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 12:28:58.001  INFO 23280 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-08 12:28:59.047 DEBUG 23280 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:28:59.067 DEBUG 23280 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:28:59.088 DEBUG 23280 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:28:59.094  INFO 23280 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 165ms, description = 初始化后台主页}
2020-04-08 12:28:59.095  INFO 23280 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:28:59.582 DEBUG 23280 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:28:59.583 DEBUG 23280 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:28:59.589 DEBUG 23280 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:28:59.592 DEBUG 23280 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:28:59.593 DEBUG 23280 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:28:59.597 DEBUG 23280 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:29:21.898 DEBUG 23280 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO article ( id, title, summary, content, appreciable, commentable, published, category_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 12:29:21.901 DEBUG 23280 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 1247743310781583361(Long), 爱上对方会尽快撒谎(String), 撒地方是煎熬is的简欧is发觉(String), <p>阿斯顿发电视里看风景阿斯蒂芬了接口</p>(String), true(Boolean), true(Boolean), false(Boolean), 1(Long)
2020-04-08 12:29:21.937 ERROR 23280 --- [http-nio-8888-exec-10] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO article  ( id, title, summary, content,      appreciable, commentable, published,  category_id )  VALUES  ( ?, ?, ?, ?,      ?, ?, ?,  ? )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
2020-04-08 12:29:21.938  WARN 23280 --- [http-nio-8888-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO article  ( id, title, summary, content,      appreciable, commentable, published,  category_id )  VALUES  ( ?, ?, ?, ?,      ?, ?, ?,  ? )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist]
2020-04-08 12:30:12.942 DEBUG 23280 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:30:12.944 DEBUG 23280 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:30:12.950 DEBUG 23280 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:30:12.951  INFO 23280 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 22ms, description = 初始化后台主页}
2020-04-08 12:30:12.951  INFO 23280 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:30:13.677 DEBUG 23280 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:30:13.678 DEBUG 23280 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:30:13.678 DEBUG 23280 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:30:13.678 DEBUG 23280 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:30:13.680 DEBUG 23280 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:30:13.684 DEBUG 23280 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:31:20.867  INFO 14600 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 14600 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:31:20.871 DEBUG 14600 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:31:20.871  INFO 14600 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:31:20.918  INFO 14600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 12:31:20.918  INFO 14600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 12:31:22.178  INFO 14600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:31:22.187  INFO 14600 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:31:22.187  INFO 14600 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:31:22.264  INFO 14600 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:31:22.265  INFO 14600 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1347 ms
2020-04-08 12:31:22.449  INFO 14600 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:31:22.715  INFO 14600 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 12:31:23.607  INFO 14600 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:31:23.674  INFO 14600 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:31:23.835  INFO 14600 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:31:23.901  INFO 14600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:31:23.905  INFO 14600 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.744 seconds (JVM running for 5.044)
2020-04-08 12:31:28.611  INFO 14600 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 12:31:28.622  INFO 14600 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 12:31:28.622  INFO 14600 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 12:31:28.631  INFO 14600 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-08 12:31:44.687 DEBUG 14600 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:31:44.712 DEBUG 14600 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:31:44.749 DEBUG 14600 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:31:44.754  INFO 14600 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 185ms, description = 初始化后台主页}
2020-04-08 12:31:44.755  INFO 14600 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:31:45.170 DEBUG 14600 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:31:45.170 DEBUG 14600 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:31:45.173 DEBUG 14600 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:31:45.176 DEBUG 14600 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:31:45.177 DEBUG 14600 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:31:45.190 DEBUG 14600 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:43:54.344 DEBUG 14600 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO article ( id, title, summary, content, appreciable, commentable, published, category_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 12:43:54.346 DEBUG 14600 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 1247746970081046529(Long), 啥打法鲨(String), 阿第三方三房(String), <p>大沙发递四方速递广泛认同和投入</p>(String), true(Boolean), true(Boolean), false(Boolean), 1(Long)
2020-04-08 12:43:54.353  INFO 14600 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 12:43:54.358  INFO 14600 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 12:43:54.407 ERROR 14600 --- [http-nio-8888-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO article  ( id, title, summary, content,      appreciable, commentable, published,  category_id )  VALUES  ( ?, ?, ?, ?,      ?, ?, ?,  ? )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
2020-04-08 12:43:54.409  WARN 14600 --- [http-nio-8888-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO article  ( id, title, summary, content,      appreciable, commentable, published,  category_id )  VALUES  ( ?, ?, ?, ?,      ?, ?, ?,  ? )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist]
2020-04-08 12:46:04.088  INFO 26572 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 26572 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:46:04.090 DEBUG 26572 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:46:04.090  INFO 26572 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:46:04.185  INFO 26572 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 12:46:04.186  INFO 26572 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 12:46:05.210  INFO 26572 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:46:05.218  INFO 26572 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:46:05.218  INFO 26572 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:46:05.279  INFO 26572 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:46:05.279  INFO 26572 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1093 ms
2020-04-08 12:46:05.423  INFO 26572 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:46:05.669  INFO 26572 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 12:46:06.463  INFO 26572 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:46:06.528  INFO 26572 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:46:06.671  INFO 26572 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:46:06.719  INFO 26572 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:46:06.722  INFO 26572 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.203 seconds (JVM running for 4.138)
2020-04-08 12:46:25.674  INFO 8796 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 8796 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:46:25.677 DEBUG 8796 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:46:25.677  INFO 8796 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:46:25.735  INFO 8796 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 12:46:25.735  INFO 8796 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 12:46:26.802  INFO 8796 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:46:26.807  INFO 8796 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:46:26.807  INFO 8796 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:46:26.868  INFO 8796 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:46:26.868  INFO 8796 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1133 ms
2020-04-08 12:46:27.011  INFO 8796 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:46:27.280  INFO 8796 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 12:46:28.065  INFO 8796 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:46:28.119  INFO 8796 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:46:28.257  INFO 8796 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:46:28.302  INFO 8796 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:46:28.304  INFO 8796 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.304 seconds (JVM running for 4.206)
2020-04-08 12:46:35.988  INFO 8796 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 12:46:35.993  INFO 8796 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 12:46:35.993  INFO 8796 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 12:46:36.000  INFO 8796 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
2020-04-08 12:46:36.497 DEBUG 8796 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:46:36.517 DEBUG 8796 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:46:36.534 DEBUG 8796 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:46:36.537  INFO 8796 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 100ms, description = 初始化后台主页}
2020-04-08 12:46:36.538  INFO 8796 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:46:36.859 DEBUG 8796 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:46:36.859 DEBUG 8796 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:46:36.867 DEBUG 8796 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:46:36.868 DEBUG 8796 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:46:36.869 DEBUG 8796 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:46:36.871 DEBUG 8796 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:47:21.515 DEBUG 8796 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO article ( id, title, summary, content, appreciable, commentable, published, category_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 12:47:21.517 DEBUG 8796 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 1247747839023431682(Long), 我的第一篇文章(String), 我的第一篇文章的摘要(String), <p>这是我的第一篇文章的内容</p>(String), true(Boolean), true(Boolean), false(Boolean), 1(Long)
2020-04-08 12:47:21.554 ERROR 8796 --- [http-nio-8888-exec-9] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO article  ( id, title, summary, content,      appreciable, commentable, published,  category_id )  VALUES  ( ?, ?, ?, ?,      ?, ?, ?,  ? )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
2020-04-08 12:47:21.555  WARN 8796 --- [http-nio-8888-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO article  ( id, title, summary, content,      appreciable, commentable, published,  category_id )  VALUES  ( ?, ?, ?, ?,      ?, ?, ?,  ? )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'geek_blog.article' doesn't exist]
2020-04-08 12:47:31.013 ERROR 8796 --- [http-nio-8888-exec-6] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : Request method 'GET' not supported
2020-04-08 12:47:31.014  WARN 8796 --- [http-nio-8888-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-04-08 12:48:49.960  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 1612 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:48:49.962 DEBUG 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:48:49.962  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:48:50.009  INFO 1612 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 12:48:50.009  INFO 1612 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 12:48:51.442  INFO 1612 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:48:51.451  INFO 1612 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:48:51.452  INFO 1612 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:48:51.524  INFO 1612 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:48:51.525  INFO 1612 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1515 ms
2020-04-08 12:48:51.696  INFO 1612 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:48:51.948  INFO 1612 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 12:48:52.770  INFO 1612 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:48:52.823  INFO 1612 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:48:52.962  INFO 1612 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:48:53.004  INFO 1612 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:48:53.006  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.621 seconds (JVM running for 4.481)
2020-04-08 12:49:00.649  INFO 1612 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 12:49:00.655  INFO 1612 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 12:49:00.655  INFO 1612 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 12:49:00.662  INFO 1612 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-08 12:49:00.849 DEBUG 1612 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, appreciable, commentable, published, category_id ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 12:49:00.867 DEBUG 1612 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 我的第一篇文章(String), 我的第一篇文章的摘要(String), <p>这是我的第一篇文章的内容</p>(String), true(Boolean), true(Boolean), false(Boolean), 1(Long)
2020-04-08 12:49:00.872 DEBUG 1612 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 12:49:00.880 DEBUG 1612 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-04-08 12:49:00.881 DEBUG 1612 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 2(Long), 1(Long), 2(Long), 2(Long), 2(Long), 3(Long)
2020-04-08 12:49:00.883 DEBUG 1612 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 3
2020-04-08 12:50:19.806  INFO 1612 --- [Thread-12] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 12:50:19.809  INFO 1612 --- [Thread-12] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 12:50:20.344  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 1612 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:50:20.345 DEBUG 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:50:20.345  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:50:20.625  INFO 1612 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:50:20.626  INFO 1612 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:50:20.626  INFO 1612 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:50:20.642  INFO 1612 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:50:20.642  INFO 1612 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 295 ms
2020-04-08 12:50:20.671  INFO 1612 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:50:20.716  INFO 1612 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-04-08 12:50:21.175  INFO 1612 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:50:21.197  INFO 1612 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:50:21.337  INFO 1612 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:50:21.379  INFO 1612 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:50:21.380  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.074 seconds (JVM running for 92.855)
2020-04-08 12:50:21.382  INFO 1612 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 12:50:25.874  INFO 1612 --- [Thread-19] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 12:50:25.876  INFO 1612 --- [Thread-19] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} closed
2020-04-08 12:50:26.344  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 1612 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:50:26.344 DEBUG 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:50:26.344  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:50:26.675  INFO 1612 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:50:26.675  INFO 1612 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:50:26.675  INFO 1612 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:50:26.697  INFO 1612 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:50:26.698  INFO 1612 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 351 ms
2020-04-08 12:50:26.735  INFO 1612 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:50:26.804  INFO 1612 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} inited
2020-04-08 12:50:27.265  INFO 1612 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:50:27.288  INFO 1612 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:50:27.378  INFO 1612 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:50:27.398  INFO 1612 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:50:27.399  INFO 1612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.091 seconds (JVM running for 98.874)
2020-04-08 12:50:27.400  INFO 1612 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 12:50:32.862  INFO 1612 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 12:50:32.863  INFO 1612 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 12:50:32.872  INFO 1612 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-04-08 12:50:50.336 DEBUG 1612 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:50:50.337 DEBUG 1612 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:50:50.363 DEBUG 1612 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:50:50.367  INFO 1612 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 68ms, description = 初始化后台主页}
2020-04-08 12:50:50.369  INFO 1612 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:50:50.795 DEBUG 1612 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:50:50.796 DEBUG 1612 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:50:50.801 DEBUG 1612 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:50:50.803 DEBUG 1612 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:50:50.804 DEBUG 1612 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:50:50.810 DEBUG 1612 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:51:34.978  INFO 9996 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 9996 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 12:51:34.981 DEBUG 9996 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 12:51:34.982  INFO 9996 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 12:51:35.041  INFO 9996 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 12:51:35.041  INFO 9996 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 12:51:36.134  INFO 9996 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 12:51:36.141  INFO 9996 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 12:51:36.141  INFO 9996 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 12:51:36.207  INFO 9996 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 12:51:36.207  INFO 9996 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1166 ms
2020-04-08 12:51:36.370  INFO 9996 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 12:51:36.632  INFO 9996 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 12:51:37.441  INFO 9996 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 12:51:37.496  INFO 9996 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 12:51:37.635  INFO 9996 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 12:51:37.679  INFO 9996 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 12:51:37.681  INFO 9996 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.323 seconds (JVM running for 4.26)
2020-04-08 12:51:41.053  INFO 9996 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 12:51:41.058  INFO 9996 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 12:51:41.058  INFO 9996 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 12:51:41.063  INFO 9996 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms
2020-04-08 12:51:41.225 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 12:51:41.243 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 这是我的第二篇文章(String), 这是我的第二篇文章的摘要(String), <p>这是我的第二篇文章的内容</p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-08 12:51:41.184(Timestamp), 2020-04-08 12:51:41.184(Timestamp)
2020-04-08 12:51:41.246 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 12:51:41.254 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-04-08 12:51:41.255 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 3(Long), 1(Long), 3(Long), 3(Long), 3(Long), 5(Long)
2020-04-08 12:51:41.256 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 3
2020-04-08 12:53:35.886 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 12:53:35.887 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 12:53:35.905 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 12:53:35.908  INFO 9996 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 72ms, description = 初始化后台主页}
2020-04-08 12:53:35.909  INFO 9996 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 12:53:36.426 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 12:53:36.428 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 12:53:36.434 DEBUG 9996 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 12:53:36.436 DEBUG 9996 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 12:53:36.436 DEBUG 9996 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 12:53:36.441 DEBUG 9996 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 12:54:41.898 DEBUG 9996 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, published, category_id, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 12:54:41.899 DEBUG 9996 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 这是我的第三篇文章(String), 这是我的第三篇文章的摘要(String), <p>这是我的第三篇文章的内容</p>(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), 2(Long), 2020-04-08 12:54:41.894(Timestamp), 2020-04-08 12:54:41.894(Timestamp)
2020-04-08 12:54:41.902 DEBUG 9996 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 12:54:41.903 DEBUG 9996 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 12:54:41.903 DEBUG 9996 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 4(Long), 2(Long)
2020-04-08 12:54:41.905 DEBUG 9996 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 13:42:23.593  INFO 16720 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 16720 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 13:42:23.596 DEBUG 16720 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 13:42:23.596  INFO 16720 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 13:42:23.646  INFO 16720 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 13:42:23.646  INFO 16720 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 13:42:25.092  INFO 16720 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 13:42:25.099  INFO 16720 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 13:42:25.099  INFO 16720 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 13:42:25.175  INFO 16720 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 13:42:25.175  INFO 16720 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1529 ms
2020-04-08 13:42:25.352  INFO 16720 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 13:42:25.620  INFO 16720 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 13:42:26.447  INFO 16720 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 13:42:26.505  INFO 16720 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 13:42:26.654  INFO 16720 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 13:42:26.697  INFO 16720 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 13:42:26.699  INFO 16720 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.893 seconds (JVM running for 5.003)
2020-04-08 13:43:04.278  INFO 16720 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 13:43:04.283  INFO 16720 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 13:43:04.284  INFO 16720 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 13:43:04.289  INFO 16720 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms
2020-04-08 13:43:04.838 DEBUG 16720 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 13:43:04.854 DEBUG 16720 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 13:43:04.874 DEBUG 16720 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 13:43:04.878  INFO 16720 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 109ms, description = 初始化后台主页}
2020-04-08 13:43:04.879  INFO 16720 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 13:43:05.271 DEBUG 16720 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 13:43:05.272 DEBUG 16720 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 13:43:05.279 DEBUG 16720 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 13:43:05.281 DEBUG 16720 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 13:43:05.282 DEBUG 16720 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 13:43:05.289 DEBUG 16720 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 13:43:52.903 DEBUG 16720 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 13:43:52.906 DEBUG 16720 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 这是我的第四篇文章(String), 这是我的第四篇文章的摘要(String), <p>这是我的第四篇文章的内容</p>(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), false(Boolean), true(Boolean), 2(Long), 2020-04-08 13:43:52.891(Timestamp), 2020-04-08 13:43:52.891(Timestamp)
2020-04-08 13:43:52.910 DEBUG 16720 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 13:43:52.914 DEBUG 16720 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 13:43:52.914 DEBUG 16720 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 5(Long), 2(Long)
2020-04-08 13:43:52.916 DEBUG 16720 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 13:49:08.800  INFO 17664 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 17664 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 13:49:08.803 DEBUG 17664 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 13:49:08.804  INFO 17664 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 13:49:08.865  INFO 17664 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 13:49:08.866  INFO 17664 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 13:49:10.018  INFO 17664 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 13:49:10.025  INFO 17664 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 13:49:10.025  INFO 17664 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 13:49:10.089  INFO 17664 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 13:49:10.090  INFO 17664 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1224 ms
2020-04-08 13:49:10.242  INFO 17664 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 13:49:10.489  INFO 17664 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 13:49:11.311  INFO 17664 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 13:49:11.366  INFO 17664 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 13:49:11.522  INFO 17664 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 13:49:11.567  INFO 17664 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 13:49:11.570  INFO 17664 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.519 seconds (JVM running for 4.498)
2020-04-08 13:49:30.477  INFO 17664 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 13:49:30.482  INFO 17664 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 13:49:30.482  INFO 17664 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 13:49:30.488  INFO 17664 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
2020-04-08 13:49:30.659 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 13:49:30.689 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 这是我的第五篇文章(String), 这是我的第五篇文章的摘要(String), <p>这是我的第五篇文章的内容</p>(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), false(Boolean), true(Boolean), 2(Long), 2020-04-08 13:49:30.617(Timestamp), 2020-04-08 13:49:30.617(Timestamp), 2(Integer)
2020-04-08 13:49:30.692 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 13:49:30.702 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) 
2020-04-08 13:49:30.703 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 6(Long), 2(Long), 6(Long), 4(Long)
2020-04-08 13:49:30.704 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 2
2020-04-08 13:50:23.403 DEBUG 17664 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 13:50:23.404 DEBUG 17664 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 13:50:23.414 DEBUG 17664 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 13:50:23.419  INFO 17664 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 55ms, description = 初始化后台主页}
2020-04-08 13:50:23.420  INFO 17664 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 13:50:23.770 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 13:50:23.771 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 13:50:23.774 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 13:50:23.778 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 13:50:23.778 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 13:50:23.788 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 13:50:57.331 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 13:50:57.332 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 13:50:57.336 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 13:50:57.336  INFO 17664 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-08 13:50:57.337  INFO 17664 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 13:50:57.795 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 13:50:57.795 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 13:50:57.796 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 13:50:57.796 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 13:50:57.797 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 13:50:57.802 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 13:51:43.774 ERROR 17664 --- [http-nio-8888-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : 参数验证失败

org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-04-08 13:51:43.775  WARN 17664 --- [http-nio-8888-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] ]
2020-04-08 13:56:52.398 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 13:56:52.398 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 13:56:52.401 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 13:56:52.403  INFO 17664 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 13:56:52.404  INFO 17664 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 13:56:52.864 DEBUG 17664 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 13:56:52.865 DEBUG 17664 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 13:56:52.865 DEBUG 17664 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 13:56:52.865 DEBUG 17664 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 13:56:52.868 DEBUG 17664 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 13:56:52.869 DEBUG 17664 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 13:57:24.317 ERROR 17664 --- [http-nio-8888-exec-8] s.a.g.e.handler.GlobalExceptionHandler   : 参数验证失败

org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-04-08 13:57:24.318  WARN 17664 --- [http-nio-8888-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] ]
2020-04-08 14:00:05.718 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 14:00:05.719 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 14:00:05.727 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 14:00:05.728  INFO 17664 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 13ms, description = 初始化后台主页}
2020-04-08 14:00:05.728  INFO 17664 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 14:00:06.340 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 14:00:06.341 DEBUG 17664 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 14:00:06.341 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 14:00:06.341 DEBUG 17664 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 14:00:06.345 DEBUG 17664 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 14:00:06.346 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 14:01:12.988 ERROR 17664 --- [http-nio-8888-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : 参数验证失败

org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-04-08 14:01:12.990  WARN 17664 --- [http-nio-8888-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] ]
2020-04-08 14:05:08.686 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 14:05:08.687 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 14:05:08.690 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 14:05:08.691  INFO 17664 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-08 14:05:08.691  INFO 17664 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 14:05:09.002 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 14:05:09.002 DEBUG 17664 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 14:05:09.003 DEBUG 17664 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 14:05:09.003 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 14:05:09.006 DEBUG 17664 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 14:05:09.007 DEBUG 17664 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 14:05:48.915 ERROR 17664 --- [http-nio-8888-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : 参数验证失败

org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-04-08 14:05:48.915  WARN 17664 --- [http-nio-8888-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] ]
2020-04-08 14:06:40.568 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 14:06:40.568 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 14:06:40.572 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 4
2020-04-08 14:06:40.573  INFO 17664 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 11ms, description = 初始化后台主页}
2020-04-08 14:06:40.574  INFO 17664 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 14:06:40.955 DEBUG 17664 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 14:06:40.955 DEBUG 17664 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 14:06:40.957 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 14:06:40.957 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 14:06:40.962 DEBUG 17664 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 14:06:40.964 DEBUG 17664 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 14:09:39.794 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 14:09:39.795 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 14:09:39.800 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 14:09:39.801  INFO 17664 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-08 14:09:39.801  INFO 17664 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVO(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 14:09:40.245 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 14:09:40.245 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 14:09:40.246 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 14:09:40.246 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 14:09:40.248 DEBUG 17664 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 14:09:40.252 DEBUG 17664 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 14:26:30.839  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 14:26:30.842 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 14:26:30.842  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 14:26:30.897  INFO 4844 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 14:26:30.897  INFO 4844 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 14:26:32.254  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 14:26:32.261  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 14:26:32.261  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 14:26:32.337  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 14:26:32.337  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1439 ms
2020-04-08 14:26:32.520  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 14:26:32.805  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 14:26:33.698  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 14:26:33.754  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 14:26:33.897  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 14:26:33.962  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 14:26:33.965  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.792 seconds (JVM running for 4.895)
2020-04-08 14:26:37.853  INFO 4844 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=7D1E829B8FD70B54C132AC7F83DBFE86] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 14:26:37.858  INFO 4844 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 14:26:37.858  INFO 4844 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 14:26:37.864  INFO 4844 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
2020-04-08 14:26:38.396 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 14:26:38.416 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 14:26:38.434 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 14:26:38.438  INFO 4844 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 110ms, description = 初始化后台主页}
2020-04-08 14:26:38.439  INFO 4844 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVO(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 14:26:38.771 DEBUG 4844 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 14:26:38.771 DEBUG 4844 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 14:26:38.775 DEBUG 4844 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 14:26:38.777 DEBUG 4844 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 14:26:38.778 DEBUG 4844 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 14:26:38.787 DEBUG 4844 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 14:26:40.972 ERROR 4844 --- [http-nio-8888-exec-6] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : Request method 'GET' not supported
2020-04-08 14:26:40.976  WARN 4844 --- [http-nio-8888-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-04-08 14:28:15.057 DEBUG 4844 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 14:28:15.059 DEBUG 4844 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 14:28:15.065 DEBUG 4844 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 14:28:15.066  INFO 4844 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 15ms, description = 初始化后台主页}
2020-04-08 14:28:15.066  INFO 4844 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVO(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 14:28:15.465 ERROR 4844 --- [http-nio-8888-exec-2] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : Request method 'GET' not supported
2020-04-08 14:28:15.466  WARN 4844 --- [http-nio-8888-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-04-08 14:28:23.339 DEBUG 4844 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 14:28:23.339 DEBUG 4844 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 14:28:23.342 DEBUG 4844 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 14:28:23.342 DEBUG 4844 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 14:28:23.346 DEBUG 4844 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 14:28:23.349 DEBUG 4844 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 14:28:36.342 DEBUG 4844 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 14:28:36.342 DEBUG 4844 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 14:28:36.353 DEBUG 4844 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 14:28:36.354 DEBUG 4844 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 14:28:36.359 DEBUG 4844 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 14:28:36.360  INFO 4844 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.listByPage, args = [1, 15], time = 44ms, description = 分页查询用户}
2020-04-08 14:28:36.361  INFO 4844 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 14:31:32.897 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 14:31:32.898 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 14:31:32.904 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 14:31:32.905  INFO 4844 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 13ms, description = 初始化后台主页}
2020-04-08 14:31:32.905  INFO 4844 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVO(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 14:31:33.540 DEBUG 4844 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 14:31:33.540 DEBUG 4844 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 14:31:33.540 DEBUG 4844 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 14:31:33.540 DEBUG 4844 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 14:31:33.546 DEBUG 4844 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 14:31:33.547 DEBUG 4844 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 14:31:38.048 DEBUG 4844 --- [http-nio-8888-exec-1] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 14:31:38.048 DEBUG 4844 --- [http-nio-8888-exec-1] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 14:31:38.050 DEBUG 4844 --- [http-nio-8888-exec-1] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 14:31:38.051 DEBUG 4844 --- [http-nio-8888-exec-1] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 14:31:38.057 DEBUG 4844 --- [http-nio-8888-exec-1] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 14:31:38.059  INFO 4844 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.listByPage, args = [1, 15], time = 13ms, description = 分页查询用户}
2020-04-08 14:31:38.060  INFO 4844 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 14:34:04.166 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 14:34:04.166 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 14:34:04.170 DEBUG 4844 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 14:34:04.173  INFO 4844 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 14:34:04.174  INFO 4844 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVO(menuInfo=[MenuVO(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVO(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVO(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVO(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVO(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVO.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVO.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 14:34:04.613 DEBUG 4844 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 14:34:04.613 DEBUG 4844 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 14:34:04.613 DEBUG 4844 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 14:34:04.614 DEBUG 4844 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 14:34:04.616 DEBUG 4844 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 14:34:04.617 DEBUG 4844 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 14:34:14.966 ERROR 4844 --- [http-nio-8888-exec-8] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : Request method 'GET' not supported
2020-04-08 14:34:14.967  WARN 4844 --- [http-nio-8888-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-04-08 14:51:27.307  INFO 4844 --- [Thread-13] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 14:51:27.310  INFO 4844 --- [Thread-13] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 14:51:27.758  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 14:51:27.758 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 14:51:27.758  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 14:51:28.042  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 14:51:28.043  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 14:51:28.043  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 14:51:28.068  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 14:51:28.068  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 307 ms
2020-04-08 14:51:28.101  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 14:51:28.152  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-04-08 14:51:28.180  WARN 4844 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 7; columnNumber: 5; 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
2020-04-08 14:51:28.181  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} closed
2020-04-08 14:51:28.181  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-08 14:51:28.186  INFO 4844 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 14:51:28.195 ERROR 4844 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 7; columnNumber: 5; 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 7; columnNumber: 5; 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 7; columnNumber: 5; 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1526)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1406)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 37 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 7; columnNumber: 5; 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1511)
	... 48 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 7; columnNumber: 5; 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 61 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 7; columnNumber: 5; 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:595)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.afterPropertiesSet(MybatisSqlSessionFactoryBean.java:430)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.getObject(MybatisSqlSessionFactoryBean.java:628)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration.sqlSessionFactory(MybatisPlusAutoConfiguration.java:214)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.CGLIB$sqlSessionFactory$1(<generated>)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2$$FastClassBySpringCGLIB$$80771bf6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 62 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 7; columnNumber: 5; 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:263)
	at org.apache.ibatis.parsing.XPathParser.<init>(XPathParser.java:127)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.<init>(XMLMapperBuilder.java:80)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:592)
	... 75 common frames omitted
Caused by: org.xml.sax.SAXParseException: 元素类型 "result" 必须后跟属性规范 ">" 或 "/>"。
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:400)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)
	at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1472)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.seekCloseOfStartTag(XMLDocumentFragmentScannerImpl.java:1394)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1324)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2784)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:842)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:771)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:243)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:339)
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:261)
	... 78 common frames omitted

2020-04-08 15:12:51.741  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:12:51.741 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:12:51.741  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:12:52.011  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:12:52.011  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:12:52.011  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:12:52.025  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:12:52.025  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 281 ms
2020-04-08 15:12:52.062  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:12:52.119  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} inited
2020-04-08 15:12:52.522  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 15:12:52.540  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 15:12:52.621  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 15:12:52.642  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 15:12:52.643  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.942 seconds (JVM running for 2783.572)
2020-04-08 15:12:52.644  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 15:16:45.830  INFO 4844 --- [Thread-20] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 15:16:45.832  INFO 4844 --- [Thread-20] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} closed
2020-04-08 15:16:46.268  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:16:46.268 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:16:46.268  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:16:46.540  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:16:46.540  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:16:46.541  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:16:46.554  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:16:46.554  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 284 ms
2020-04-08 15:16:46.586  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:16:46.645  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-4} inited
2020-04-08 15:16:47.017  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 15:16:47.036  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 15:16:47.112  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 15:16:47.132  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 15:16:47.132  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.894 seconds (JVM running for 3018.063)
2020-04-08 15:16:47.133  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 15:18:29.232  INFO 4844 --- [Thread-28] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 15:18:29.234  INFO 4844 --- [Thread-28] com.alibaba.druid.pool.DruidDataSource   : {dataSource-4} closed
2020-04-08 15:18:29.855  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:18:29.855 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:18:29.856  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:18:30.218  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:18:30.219  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:18:30.219  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:18:30.242  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:18:30.242  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 382 ms
2020-04-08 15:18:30.289  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:18:30.352  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-5} inited
2020-04-08 15:18:30.738  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 15:18:30.758  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 15:18:30.848  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 15:18:30.877  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 15:18:30.877  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.081 seconds (JVM running for 3121.807)
2020-04-08 15:18:30.879  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 15:42:59.757  INFO 4844 --- [Thread-33] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 15:42:59.759  INFO 4844 --- [Thread-33] com.alibaba.druid.pool.DruidDataSource   : {dataSource-5} closed
2020-04-08 15:43:00.325  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:43:00.325 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:43:00.325  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:43:00.728  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:43:00.728  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:43:00.729  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:43:00.742  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:43:00.742  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 415 ms
2020-04-08 15:43:00.781  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:43:00.841  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-6} inited
2020-04-08 15:43:00.865  WARN 4844 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 5; 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
2020-04-08 15:43:00.866  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-6} closed
2020-04-08 15:43:00.866  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-08 15:43:00.872  INFO 4844 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 15:43:00.874 ERROR 4844 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 5; 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 5; 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 5; 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1526)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1406)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 37 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 5; 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1511)
	... 48 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 5; 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 61 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 5; 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:595)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.afterPropertiesSet(MybatisSqlSessionFactoryBean.java:430)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.getObject(MybatisSqlSessionFactoryBean.java:628)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration.sqlSessionFactory(MybatisPlusAutoConfiguration.java:214)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.CGLIB$sqlSessionFactory$1(<generated>)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2$$FastClassBySpringCGLIB$$80771bf6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 62 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 5; 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:263)
	at org.apache.ibatis.parsing.XPathParser.<init>(XPathParser.java:127)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.<init>(XMLMapperBuilder.java:80)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:592)
	... 75 common frames omitted
Caused by: org.xml.sax.SAXParseException: 元素类型 "collection" 必须后跟属性规范 ">" 或 "/>"。
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:400)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)
	at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1472)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.seekCloseOfStartTag(XMLDocumentFragmentScannerImpl.java:1394)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1324)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2784)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:842)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:771)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:243)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:339)
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:261)
	... 78 common frames omitted

2020-04-08 15:47:18.195  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:47:18.196 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:47:18.196  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:47:18.590  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:47:18.591  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:47:18.591  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:47:18.606  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-2].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:47:18.607  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 410 ms
2020-04-08 15:47:18.648  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:47:18.703  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-7} inited
2020-04-08 15:47:19.161  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 15:47:19.179  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 15:47:19.255  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 15:47:19.275  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 15:47:19.276  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.111 seconds (JVM running for 4850.205)
2020-04-08 15:47:19.276  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 15:49:30.663  INFO 4844 --- [Thread-38] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 15:49:30.665  INFO 4844 --- [Thread-38] com.alibaba.druid.pool.DruidDataSource   : {dataSource-7} closed
2020-04-08 15:49:31.126  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:49:31.126 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:49:31.126  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:49:31.344  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:49:31.345  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:49:31.345  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:49:31.357  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-2].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:49:31.357  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 229 ms
2020-04-08 15:49:31.387  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:49:31.435  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-8} inited
2020-04-08 15:49:31.900  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 15:49:31.917  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 15:49:31.988  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 15:49:32.005  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 15:49:32.005  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.906 seconds (JVM running for 4982.935)
2020-04-08 15:49:32.006  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 15:50:54.678  INFO 4844 --- [Thread-46] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 15:50:54.680  INFO 4844 --- [Thread-46] com.alibaba.druid.pool.DruidDataSource   : {dataSource-8} closed
2020-04-08 15:50:55.084  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:50:55.084 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:50:55.084  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:50:55.270  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:50:55.271  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:50:55.271  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:50:55.281  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-2].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:50:55.282  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 196 ms
2020-04-08 15:50:55.314  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:50:55.415  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-9} inited
2020-04-08 15:50:55.442  WARN 4844 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 1; 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
2020-04-08 15:50:55.443  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-9} closed
2020-04-08 15:50:55.443  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-08 15:50:55.450  INFO 4844 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 15:50:55.451 ERROR 4844 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 1; 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 1; 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 1; 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1526)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1406)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 37 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 1; 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1511)
	... 48 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 1; 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 61 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 1; 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:595)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.afterPropertiesSet(MybatisSqlSessionFactoryBean.java:430)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.getObject(MybatisSqlSessionFactoryBean.java:628)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration.sqlSessionFactory(MybatisPlusAutoConfiguration.java:214)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.CGLIB$sqlSessionFactory$1(<generated>)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2$$FastClassBySpringCGLIB$$80771bf6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 62 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 1; 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:263)
	at org.apache.ibatis.parsing.XPathParser.<init>(XPathParser.java:127)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.<init>(XMLMapperBuilder.java:80)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:592)
	... 75 common frames omitted
Caused by: org.xml.sax.SAXParseException: 元素类型 "select" 必须后跟属性规范 ">" 或 "/>"。
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:400)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)
	at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1472)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.seekCloseOfStartTag(XMLDocumentFragmentScannerImpl.java:1394)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1324)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2784)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:842)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:771)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:243)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:339)
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:261)
	... 78 common frames omitted

2020-04-08 15:51:29.484  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:51:29.485 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:51:29.485  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:51:29.780  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:51:29.781  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:51:29.781  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:51:29.798  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:51:29.798  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 311 ms
2020-04-08 15:51:29.833  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:51:29.929  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-10} inited
2020-04-08 15:51:30.427  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 15:51:30.455  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 15:51:30.537  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 15:51:30.556  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 15:51:30.557  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.111 seconds (JVM running for 5101.487)
2020-04-08 15:51:30.558  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 15:55:04.813  INFO 4844 --- [Thread-51] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 15:55:04.814  INFO 4844 --- [Thread-51] com.alibaba.druid.pool.DruidDataSource   : {dataSource-10} closed
2020-04-08 15:55:05.275  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 15:55:05.275 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 15:55:05.275  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 15:55:05.559  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 15:55:05.560  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 15:55:05.560  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 15:55:05.572  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 15:55:05.572  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 295 ms
2020-04-08 15:55:05.601  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 15:55:05.649  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-11} inited
2020-04-08 15:55:06.019  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 15:55:06.036  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 15:55:06.106  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 15:55:06.125  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 15:55:06.126  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.877 seconds (JVM running for 5317.055)
2020-04-08 15:55:06.127  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:04:25.025  INFO 4844 --- [Thread-59] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:04:25.027  INFO 4844 --- [Thread-59] com.alibaba.druid.pool.DruidDataSource   : {dataSource-11} closed
2020-04-08 16:04:25.509  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:04:25.509 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:04:25.509  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:04:25.740  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:04:25.741  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:04:25.741  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:04:25.752  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:04:25.752  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 241 ms
2020-04-08 16:04:25.779  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:04:25.824  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-12} inited
2020-04-08 16:04:26.164  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:04:26.179  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:04:26.258  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:04:26.279  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:04:26.280  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.804 seconds (JVM running for 5877.209)
2020-04-08 16:04:26.281  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:05:24.891  INFO 4844 --- [Thread-64] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:05:24.892  INFO 4844 --- [Thread-64] com.alibaba.druid.pool.DruidDataSource   : {dataSource-12} closed
2020-04-08 16:05:25.309  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:05:25.309 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:05:25.309  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:05:25.541  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:05:25.542  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:05:25.542  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:05:25.557  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:05:25.557  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 246 ms
2020-04-08 16:05:25.592  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:05:25.639  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-13} inited
2020-04-08 16:05:26.123  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:05:26.159  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:05:26.341  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:05:26.384  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:05:26.384  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.107 seconds (JVM running for 5937.314)
2020-04-08 16:05:26.386  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:10:54.069  INFO 4844 --- [Thread-69] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:10:54.071  INFO 4844 --- [Thread-69] com.alibaba.druid.pool.DruidDataSource   : {dataSource-13} closed
2020-04-08 16:10:54.572  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:10:54.572 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:10:54.572  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:10:54.783  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:10:54.783  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:10:54.783  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:10:54.800  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-3].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:10:54.800  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 226 ms
2020-04-08 16:10:54.828  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:10:54.882  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-14} inited
2020-04-08 16:10:54.917  WARN 4844 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryController': Unsatisfied dependency expressed through field 'categoryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryServiceImpl': Unsatisfied dependency expressed through field 'categoryMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\CategoryMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
2020-04-08 16:10:54.918  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-14} closed
2020-04-08 16:10:54.918  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-08 16:10:54.924  INFO 4844 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 16:10:54.925 ERROR 4844 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryController': Unsatisfied dependency expressed through field 'categoryService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryServiceImpl': Unsatisfied dependency expressed through field 'categoryMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\CategoryMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryServiceImpl': Unsatisfied dependency expressed through field 'categoryMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\CategoryMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'categoryMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\CategoryMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1526)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1406)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 37 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1511)
	... 48 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 61 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:595)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.afterPropertiesSet(MybatisSqlSessionFactoryBean.java:430)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.getObject(MybatisSqlSessionFactoryBean.java:628)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration.sqlSessionFactory(MybatisPlusAutoConfiguration.java:214)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.CGLIB$sqlSessionFactory$1(<generated>)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2$$FastClassBySpringCGLIB$$80771bf6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 62 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:593)
	... 75 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:262)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:253)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElements(XMLMapperBuilder.java:245)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:118)
	... 77 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.domain.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 81 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.domain.Article
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 83 common frames omitted

2020-04-08 16:10:57.473  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:10:57.473 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:10:57.473  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:10:57.783  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:10:57.783  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:10:57.784  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:10:57.795  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-4].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:10:57.795  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 319 ms
2020-04-08 16:10:57.829  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:10:57.896  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-15} inited
2020-04-08 16:10:57.937  WARN 4844 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
2020-04-08 16:10:57.938  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-15} closed
2020-04-08 16:10:57.938  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-08 16:10:57.944  INFO 4844 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 16:10:57.945 ERROR 4844 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1526)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1406)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 37 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1511)
	... 48 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 61 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:595)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.afterPropertiesSet(MybatisSqlSessionFactoryBean.java:430)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.getObject(MybatisSqlSessionFactoryBean.java:628)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration.sqlSessionFactory(MybatisPlusAutoConfiguration.java:214)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.CGLIB$sqlSessionFactory$1(<generated>)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2$$FastClassBySpringCGLIB$$80771bf6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$84e063d2.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 62 common frames omitted
Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)
	at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)
	at com.baomidou.mybatisplus.core.metadata.TableInfoHelper.initTableFields(TableInfoHelper.java:288)
	at com.baomidou.mybatisplus.core.metadata.TableInfoHelper.initTableInfo(TableInfoHelper.java:142)
	at com.baomidou.mybatisplus.core.injector.AbstractSqlInjector.inspectInject(AbstractSqlInjector.java:53)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:122)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:82)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:103)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.bindMapperForNamespace(XMLMapperBuilder.java:436)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:96)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:593)
	... 75 common frames omitted

2020-04-08 16:11:01.243  INFO 9884 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Starting ArticleServiceImplTest on DESKTOP-QNDK7AF with PID 9884 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:11:01.244 DEBUG 9884 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:11:01.244  INFO 9884 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : The following profiles are active: dev
2020-04-08 16:11:02.931  INFO 9884 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:11:03.555  INFO 9884 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:11:03.801  WARN 9884 --- [main] o.s.w.c.s.GenericWebApplicationContext   : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
2020-04-08 16:11:03.804  INFO 9884 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:11:03.814  INFO 9884 --- [main] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 16:11:03.819 ERROR 9884 --- [main] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:126)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:337)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:342)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:337)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:336)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:259)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:252)
	at java.util.Optional.orElseGet(Optional.java:267)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:251)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 81 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1526)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1406)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 94 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1511)
	... 105 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 118 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:595)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.afterPropertiesSet(MybatisSqlSessionFactoryBean.java:430)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.getObject(MybatisSqlSessionFactoryBean.java:628)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration.sqlSessionFactory(MybatisPlusAutoConfiguration.java:214)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$92da4839.CGLIB$sqlSessionFactory$1(<generated>)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$92da4839$$FastClassBySpringCGLIB$$7f889d84.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$92da4839.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 119 common frames omitted
Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)
	at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)
	at com.baomidou.mybatisplus.core.metadata.TableInfoHelper.initTableFields(TableInfoHelper.java:288)
	at com.baomidou.mybatisplus.core.metadata.TableInfoHelper.initTableInfo(TableInfoHelper.java:142)
	at com.baomidou.mybatisplus.core.injector.AbstractSqlInjector.inspectInject(AbstractSqlInjector.java:53)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:122)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:82)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:103)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.bindMapperForNamespace(XMLMapperBuilder.java:436)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:96)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:593)
	... 132 common frames omitted

2020-04-08 16:11:03.826 ERROR 9884 --- [main] o.s.test.context.TestContextManager      : Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener@272113c4] to prepare test instance [site.alanliang.geekblog.service.impl.ArticleServiceImplTest@f88bfbe]

java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:337)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:342)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:337)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:336)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:259)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:252)
	at java.util.Optional.orElseGet(Optional.java:267)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:251)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:126)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	... 63 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleServiceImpl': Unsatisfied dependency expressed through field 'articleMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 81 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleMapper' defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\mapper\ArticleMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1526)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1406)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 94 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1290)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1511)
	... 105 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 118 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:595)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.afterPropertiesSet(MybatisSqlSessionFactoryBean.java:430)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.getObject(MybatisSqlSessionFactoryBean.java:628)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration.sqlSessionFactory(MybatisPlusAutoConfiguration.java:214)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$92da4839.CGLIB$sqlSessionFactory$1(<generated>)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$92da4839$$FastClassBySpringCGLIB$$7f889d84.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$92da4839.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 119 common frames omitted
Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: annotation of @TableLogic can't more than one in class : site.alanliang.geekblog.domain.Article.
	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)
	at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)
	at com.baomidou.mybatisplus.core.metadata.TableInfoHelper.initTableFields(TableInfoHelper.java:288)
	at com.baomidou.mybatisplus.core.metadata.TableInfoHelper.initTableInfo(TableInfoHelper.java:142)
	at com.baomidou.mybatisplus.core.injector.AbstractSqlInjector.inspectInject(AbstractSqlInjector.java:53)
	at com.baomidou.mybatisplus.core.MybatisMapperAnnotationBuilder.parse(MybatisMapperAnnotationBuilder.java:122)
	at com.baomidou.mybatisplus.core.MybatisMapperRegistry.addMapper(MybatisMapperRegistry.java:82)
	at com.baomidou.mybatisplus.core.MybatisConfiguration.addMapper(MybatisConfiguration.java:103)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.bindMapperForNamespace(XMLMapperBuilder.java:436)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:96)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:593)
	... 132 common frames omitted

2020-04-08 16:14:08.641  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:14:08.641 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:14:08.641  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:14:08.889  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:14:08.889  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:14:08.890  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:14:08.908  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-5].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:14:08.908  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 264 ms
2020-04-08 16:14:08.935  WARN 4844 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'articleController': Lookup method resolution failed; nested exception is java.lang.IllegalStateException: Failed to introspect Class [site.alanliang.geekblog.controller.admin.ArticleController] from ClassLoader [org.springframework.boot.devtools.restart.classloader.RestartClassLoader@5ef256bd]
2020-04-08 16:14:08.935  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-08 16:14:08.941  INFO 4844 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 16:14:08.942 ERROR 4844 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'articleController': Lookup method resolution failed; nested exception is java.lang.IllegalStateException: Failed to introspect Class [site.alanliang.geekblog.controller.admin.ArticleController] from ClassLoader [org.springframework.boot.devtools.restart.classloader.RestartClassLoader@5ef256bd]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:289)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1286)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1201)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.lang.IllegalStateException: Failed to introspect Class [site.alanliang.geekblog.controller.admin.ArticleController] from ClassLoader [org.springframework.boot.devtools.restart.classloader.RestartClassLoader@5ef256bd]
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:481)
	at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:321)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:267)
	... 23 common frames omitted
Caused by: java.lang.NoClassDefFoundError: site/alanliang/geekblog/domain/Article
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:368)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:362)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:361)
	at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.findClass(RestartClassLoader.java:159)
	at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.loadClass(RestartClassLoader.java:141)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.getDeclaredMethods(Class.java:1975)
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:463)
	... 25 common frames omitted
Caused by: java.lang.ClassNotFoundException: site.alanliang.geekblog.domain.Article
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.loadClass(RestartClassLoader.java:144)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 41 common frames omitted

2020-04-08 16:14:11.528  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:14:11.529 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:14:11.529  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:14:12.094  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:14:12.095  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:14:12.096  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:14:12.121  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-6].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:14:12.121  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 588 ms
2020-04-08 16:14:12.188  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:14:12.264  INFO 17528 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Starting ArticleServiceImplTest on DESKTOP-QNDK7AF with PID 17528 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:14:12.265 DEBUG 17528 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:14:12.266  INFO 17528 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : The following profiles are active: dev
2020-04-08 16:14:12.277  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-16} inited
2020-04-08 16:14:13.113  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:14:13.153  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:14:13.297  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:14:13.339  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:14:13.340  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.879 seconds (JVM running for 6464.27)
2020-04-08 16:14:13.341  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:14:14.044  INFO 17528 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:14:14.579  INFO 17528 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:14:16.118  INFO 17528 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:14:16.242  INFO 17528 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:14:16.601  INFO 17528 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Started ArticleServiceImplTest in 5.049 seconds (JVM running for 6.506)
2020-04-08 16:14:16.928  INFO 17528 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:14:16.934  INFO 17528 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:21:45.398  INFO 4844 --- [Thread-74] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:21:45.401  INFO 4844 --- [Thread-74] com.alibaba.druid.pool.DruidDataSource   : {dataSource-16} closed
2020-04-08 16:21:46.246  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:21:46.246 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:21:46.246  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:21:46.600  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:21:46.600  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:21:46.600  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:21:46.613  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-6].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:21:46.613  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 364 ms
2020-04-08 16:21:46.656  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:21:46.734  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-17} inited
2020-04-08 16:21:47.483  INFO 12848 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Starting ArticleServiceImplTest on DESKTOP-QNDK7AF with PID 12848 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:21:47.485 DEBUG 12848 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:21:47.485  INFO 12848 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : The following profiles are active: dev
2020-04-08 16:21:47.588  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:21:47.624  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:21:47.782  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:21:47.823  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:21:47.824  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.629 seconds (JVM running for 6918.754)
2020-04-08 16:21:47.826  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:21:49.044  INFO 12848 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:21:49.577  INFO 12848 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:21:51.086  INFO 12848 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:21:51.217  INFO 12848 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:21:51.601  INFO 12848 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Started ArticleServiceImplTest in 4.868 seconds (JVM running for 6.328)
2020-04-08 16:21:51.921  INFO 12848 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:21:51.926  INFO 12848 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:23:56.249  INFO 4844 --- [Thread-88] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:23:56.251  INFO 4844 --- [Thread-88] com.alibaba.druid.pool.DruidDataSource   : {dataSource-17} closed
2020-04-08 16:23:56.854  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:23:56.854 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:23:56.854  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:23:57.299  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:23:57.300  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:23:57.300  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:23:57.333  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-6].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:23:57.333  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 476 ms
2020-04-08 16:23:57.476  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:23:57.606  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-18} inited
2020-04-08 16:23:58.089  INFO 1612 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Starting ArticleServiceImplTest on DESKTOP-QNDK7AF with PID 1612 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:23:58.091 DEBUG 1612 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:23:58.091  INFO 1612 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : The following profiles are active: dev
2020-04-08 16:23:58.341  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:23:58.376  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:23:58.525  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:23:58.565  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:23:58.565  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.768 seconds (JVM running for 7049.495)
2020-04-08 16:23:58.567  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:23:59.635  INFO 1612 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:24:00.142  INFO 1612 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:24:01.714  INFO 1612 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:24:01.848  INFO 1612 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:24:02.228  INFO 1612 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Started ArticleServiceImplTest in 4.925 seconds (JVM running for 6.406)
2020-04-08 16:24:02.579 DEBUG 1612 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 16:24:02.606 DEBUG 1612 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 16:24:02.632 DEBUG 1612 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 16:24:02.634 DEBUG 1612 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 5(Long)
2020-04-08 16:24:02.712 DEBUG 1612 --- [main] s.a.g.m.A.selectPageWithExtra            : <==      Total: 5
2020-04-08 16:24:02.715 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:24:02.716 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 16:24:02.720 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 16:24:02.722 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:24:02.722 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 16:24:02.725 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:24:02.726 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:24:02.726 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 16:24:02.729 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:24:02.730 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:24:02.731 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 16:24:02.733 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:24:02.735 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:24:02.735 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 16:24:02.737 DEBUG 1612 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:24:02.757  INFO 1612 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:24:02.761  INFO 1612 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:25:39.723  INFO 4844 --- [Thread-93] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:25:39.724  INFO 4844 --- [Thread-93] com.alibaba.druid.pool.DruidDataSource   : {dataSource-18} closed
2020-04-08 16:25:40.107  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:25:40.107 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:25:40.107  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:25:40.288  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:25:40.289  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:25:40.289  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:25:40.298  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-6].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:25:40.299  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 191 ms
2020-04-08 16:25:40.324  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:25:40.366  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-19} inited
2020-04-08 16:25:40.679  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:25:40.703  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:25:40.771  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:25:40.791  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:25:40.791  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.702 seconds (JVM running for 7151.721)
2020-04-08 16:25:40.792  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:28:29.661  INFO 4844 --- [Thread-98] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:28:29.664  INFO 4844 --- [Thread-98] com.alibaba.druid.pool.DruidDataSource   : {dataSource-19} closed
2020-04-08 16:28:30.142  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:28:30.142 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:28:30.142  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:28:30.479  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:28:30.480  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:28:30.480  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:28:30.497  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-6].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:28:30.497  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 352 ms
2020-04-08 16:28:30.534  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:28:30.603  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-20} inited
2020-04-08 16:28:31.185  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:28:31.227  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:28:31.360  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:28:31.405  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:28:31.405  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.297 seconds (JVM running for 7322.335)
2020-04-08 16:28:31.407  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:28:32.947  INFO 8480 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Starting ArticleServiceImplTest on DESKTOP-QNDK7AF with PID 8480 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:28:32.948 DEBUG 8480 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:28:32.948  INFO 8480 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : The following profiles are active: dev
2020-04-08 16:28:34.469  INFO 8480 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:28:34.995  INFO 8480 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:28:36.624  INFO 8480 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:28:36.750  INFO 8480 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:28:37.121  INFO 8480 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Started ArticleServiceImplTest in 4.871 seconds (JVM running for 6.207)
2020-04-08 16:28:37.502 DEBUG 8480 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 16:28:37.541 DEBUG 8480 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 16:28:37.567 DEBUG 8480 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 16:28:37.570 DEBUG 8480 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 5(Long)
2020-04-08 16:28:37.651 DEBUG 8480 --- [main] s.a.g.m.A.selectPageWithExtra            : <==      Total: 5
2020-04-08 16:28:37.655 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:28:37.656 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 16:28:37.661 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 16:28:37.663 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:28:37.664 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 16:28:37.667 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:28:37.669 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:28:37.669 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 16:28:37.672 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:28:37.674 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:28:37.674 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 16:28:37.676 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:28:37.679 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:28:37.679 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 16:28:37.681 DEBUG 8480 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:28:37.705  INFO 8480 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:28:37.710  INFO 8480 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:36:42.724  INFO 4844 --- [Thread-103] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:36:42.727  INFO 4844 --- [Thread-103] com.alibaba.druid.pool.DruidDataSource   : {dataSource-20} closed
2020-04-08 16:36:43.255  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:36:43.255 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:36:43.255  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:36:43.660  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:36:43.661  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:36:43.661  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:36:43.676  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-6].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:36:43.676  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 419 ms
2020-04-08 16:36:43.699  WARN 4844 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'site.alanliang.geekblog.service.ArticleService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2020-04-08 16:36:43.699  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-08 16:36:43.708  INFO 4844 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 16:36:43.864 ERROR 4844 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field articleService in site.alanliang.geekblog.controller.admin.ArticleController required a bean of type 'site.alanliang.geekblog.service.ArticleService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'site.alanliang.geekblog.service.ArticleService' in your configuration.

2020-04-08 16:36:45.366  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:36:45.367 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:36:45.367  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:36:45.602  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:36:45.603  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:36:45.603  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:36:45.614  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-7].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:36:45.615  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 246 ms
2020-04-08 16:36:45.640  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:36:45.702  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-21} inited
2020-04-08 16:36:46.082  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:36:46.101  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:36:46.196  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:36:46.214  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:36:46.214  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 0.88 seconds (JVM running for 7817.144)
2020-04-08 16:36:46.215  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:36:48.752  INFO 26136 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Starting ArticleServiceImplTest on DESKTOP-QNDK7AF with PID 26136 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:36:48.753 DEBUG 26136 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:36:48.753  INFO 26136 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : The following profiles are active: dev
2020-04-08 16:36:50.279  INFO 26136 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:36:50.775  INFO 26136 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:36:52.262  INFO 26136 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:36:52.388  INFO 26136 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:36:52.832  INFO 26136 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Started ArticleServiceImplTest in 4.814 seconds (JVM running for 6.114)
2020-04-08 16:36:53.168 DEBUG 26136 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 16:36:53.204 DEBUG 26136 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 16:36:53.230 DEBUG 26136 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 16:36:53.232 DEBUG 26136 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 5(Long)
2020-04-08 16:36:53.293 DEBUG 26136 --- [main] s.a.g.m.A.selectPageWithExtra            : <==      Total: 5
2020-04-08 16:36:53.301 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:36:53.302 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 16:36:53.307 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 16:36:53.308 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:36:53.308 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 16:36:53.312 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:36:53.313 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:36:53.314 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 16:36:53.317 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:36:53.318 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:36:53.319 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 16:36:53.321 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:36:53.323 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:36:53.323 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 16:36:53.325 DEBUG 26136 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:36:53.347  INFO 26136 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:36:53.351  INFO 26136 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:38:30.315  INFO 4844 --- [Thread-108] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:38:30.317  INFO 4844 --- [Thread-108] com.alibaba.druid.pool.DruidDataSource   : {dataSource-21} closed
2020-04-08 16:38:30.984  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:38:30.984 DEBUG 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:38:30.984  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:38:31.318  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:38:31.319  INFO 4844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:38:31.319  INFO 4844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:38:31.336  INFO 4844 --- [restartedMain] o.a.c.c.C.[Tomcat-7].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:38:31.336  INFO 4844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 350 ms
2020-04-08 16:38:31.370  INFO 4844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:38:31.433  INFO 4844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-22} inited
2020-04-08 16:38:32.018  INFO 4844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:38:32.047  INFO 4844 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:38:32.189  INFO 4844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:38:32.220  INFO 4844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:38:32.221  INFO 4844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.277 seconds (JVM running for 7923.15)
2020-04-08 16:38:32.222  INFO 4844 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:38:33.904  INFO 18520 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Starting ArticleServiceImplTest on DESKTOP-QNDK7AF with PID 18520 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:38:33.905 DEBUG 18520 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:38:33.905  INFO 18520 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : The following profiles are active: dev
2020-04-08 16:38:35.398  INFO 18520 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:38:35.909  INFO 18520 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:38:37.417  INFO 18520 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:38:37.551  INFO 18520 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:38:37.961  INFO 18520 --- [main] s.a.g.s.impl.ArticleServiceImplTest      : Started ArticleServiceImplTest in 4.743 seconds (JVM running for 6.208)
2020-04-08 16:38:38.335 DEBUG 18520 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 16:38:38.361 DEBUG 18520 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 16:38:38.385 DEBUG 18520 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 16:38:38.386 DEBUG 18520 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 5(Long)
2020-04-08 16:38:38.454 DEBUG 18520 --- [main] s.a.g.m.A.selectPageWithExtra            : <==      Total: 5
2020-04-08 16:38:38.462 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:38:38.462 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 16:38:38.464 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 16:38:38.466 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:38:38.466 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 16:38:38.469 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:38:38.471 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:38:38.471 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 16:38:38.473 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:38:38.475 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:38:38.475 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 16:38:38.477 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:38:38.478 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:38:38.479 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 16:38:38.480 DEBUG 18520 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:38:38.501  INFO 18520 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:38:38.504  INFO 18520 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:40:29.833  INFO 22684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 22684 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:40:29.836 DEBUG 22684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:40:29.836  INFO 22684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:40:29.877  INFO 22684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 16:40:29.877  INFO 22684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 16:40:31.018  INFO 22684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:40:31.033  INFO 22684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:40:31.033  INFO 22684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:40:31.107  INFO 22684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 16:40:31.107  INFO 22684 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1230 ms
2020-04-08 16:40:31.255  INFO 22684 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:40:31.498  INFO 22684 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:40:32.290  INFO 22684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:40:32.345  INFO 22684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:40:32.481  INFO 22684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:40:32.529  INFO 22684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:40:32.532  INFO 22684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.262 seconds (JVM running for 4.083)
2020-04-08 16:40:44.531  INFO 22684 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 16:40:44.532  INFO 22684 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 16:40:44.537  INFO 22684 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms
2020-04-08 16:40:44.610 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 16:40:44.625 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 16:40:44.642 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 16:40:44.643 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 1(Long)
2020-04-08 16:40:44.675 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 16:40:44.685 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:40:44.686 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 16:40:44.690 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 16:41:13.722  INFO 22684 --- [Thread-11] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:41:13.724  INFO 22684 --- [Thread-11] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:41:14.196  INFO 22684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 22684 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:41:14.196 DEBUG 22684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:41:14.196  INFO 22684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:41:14.514  INFO 22684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:41:14.515  INFO 22684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:41:14.515  INFO 22684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:41:14.534  INFO 22684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 16:41:14.534  INFO 22684 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 336 ms
2020-04-08 16:41:14.567  INFO 22684 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:41:14.617  INFO 22684 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-04-08 16:41:15.192  INFO 22684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:41:15.223  INFO 22684 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:41:15.335  INFO 22684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:41:15.359  INFO 22684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:41:15.360  INFO 22684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.198 seconds (JVM running for 46.911)
2020-04-08 16:41:15.362  INFO 22684 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:41:24.660  INFO 22684 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 16:41:24.661  INFO 22684 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 16:41:24.670  INFO 22684 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-08 16:41:24.677 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 16:41:24.677 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 16:41:24.687 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 16:41:24.688 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 1(Long)
2020-04-08 16:41:24.706 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 16:41:24.715 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:41:24.715 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 16:41:24.722 DEBUG 22684 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 16:41:33.457  INFO 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 14168 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:41:33.459 DEBUG 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:41:33.459  INFO 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:41:33.504  INFO 14168 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 16:41:33.504  INFO 14168 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 16:41:34.597  INFO 14168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:41:34.604  INFO 14168 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:41:34.604  INFO 14168 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:41:34.664  INFO 14168 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 16:41:34.665  INFO 14168 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1161 ms
2020-04-08 16:41:34.812  INFO 14168 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:41:35.043  INFO 14168 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:41:35.883  INFO 14168 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:41:35.952  INFO 14168 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:41:36.085  INFO 14168 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:41:36.129  INFO 14168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:41:36.132  INFO 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.333 seconds (JVM running for 4.563)
2020-04-08 16:41:39.556  INFO 14168 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 16:41:39.557  INFO 14168 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 16:41:39.562  INFO 14168 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms
2020-04-08 16:41:39.634 DEBUG 14168 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 16:41:39.648 DEBUG 14168 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 16:41:39.663 DEBUG 14168 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 16:41:39.664 DEBUG 14168 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 1(Long)
2020-04-08 16:41:39.693 DEBUG 14168 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 16:41:39.702 DEBUG 14168 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:41:39.703 DEBUG 14168 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 16:41:39.704 DEBUG 14168 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 16:52:30.566  INFO 14168 --- [Thread-12] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:52:30.569  INFO 14168 --- [Thread-12] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 16:52:31.266  INFO 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 14168 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:52:31.266 DEBUG 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:52:31.266  INFO 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:52:31.649  INFO 14168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:52:31.650  INFO 14168 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:52:31.651  INFO 14168 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:52:31.673  INFO 14168 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 16:52:31.674  INFO 14168 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 403 ms
2020-04-08 16:52:31.704  WARN 14168 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'articleService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'site.alanliang.geekblog.service.ArticleService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2020-04-08 16:52:31.705  INFO 14168 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-04-08 16:52:31.710  INFO 14168 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-08 16:52:31.970 ERROR 14168 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field articleService in site.alanliang.geekblog.controller.admin.ArticleController required a bean of type 'site.alanliang.geekblog.service.ArticleService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'site.alanliang.geekblog.service.ArticleService' in your configuration.

2020-04-08 16:53:26.706  INFO 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 14168 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:53:26.706 DEBUG 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:53:26.707  INFO 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 16:53:27.060  INFO 14168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 16:53:27.062  INFO 14168 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 16:53:27.062  INFO 14168 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 16:53:27.102  INFO 14168 --- [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-04-08 16:53:27.102  INFO 14168 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 393 ms
2020-04-08 16:53:27.244  INFO 14168 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:53:27.566  INFO 14168 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-04-08 16:53:28.520  INFO 14168 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:53:28.562  INFO 14168 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:53:28.664  INFO 14168 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 16:53:28.688  INFO 14168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 16:53:28.689  INFO 14168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 2.019 seconds (JVM running for 717.121)
2020-04-08 16:53:28.691  INFO 14168 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 16:53:33.083  INFO 19492 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Starting ArticleServiceImplTests on DESKTOP-QNDK7AF with PID 19492 (started by AlanLiang in D:\idea\geekblog)
2020-04-08 16:53:33.084 DEBUG 19492 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 16:53:33.084  INFO 19492 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : The following profiles are active: dev
2020-04-08 16:53:34.804  INFO 19492 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 16:53:35.737  INFO 19492 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 16:53:37.308  INFO 19492 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 16:53:37.456  INFO 19492 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 16:53:37.919  INFO 19492 --- [main] s.a.g.s.impl.ArticleServiceImplTests     : Started ArticleServiceImplTests in 5.527 seconds (JVM running for 6.971)
2020-04-08 16:53:38.279 DEBUG 19492 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 16:53:38.306 DEBUG 19492 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 16:53:38.331 DEBUG 19492 --- [main] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 16:53:38.333 DEBUG 19492 --- [main] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 5(Long)
2020-04-08 16:53:38.416 DEBUG 19492 --- [main] s.a.g.m.A.selectPageWithExtra            : <==      Total: 5
2020-04-08 16:53:38.429 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:53:38.430 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 16:53:38.434 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 16:53:38.436 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:53:38.437 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 16:53:38.440 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:53:38.442 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:53:38.443 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 16:53:38.445 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 16:53:38.447 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:53:38.447 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 16:53:38.449 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:53:38.451 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 16:53:38.451 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 16:53:38.453 DEBUG 19492 --- [main] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 16:53:38.481  INFO 19492 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 16:53:38.486  INFO 19492 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 17:00:00.406  INFO 24220 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 24220 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 17:00:00.408 DEBUG 24220 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 17:00:00.409  INFO 24220 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 17:00:00.465  INFO 24220 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 17:00:00.465  INFO 24220 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 17:00:01.718  INFO 24220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 17:00:01.729  INFO 24220 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 17:00:01.729  INFO 24220 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 17:00:01.832  INFO 24220 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 17:00:01.832  INFO 24220 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1367 ms
2020-04-08 17:00:02.018  INFO 24220 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 17:00:02.489  INFO 24220 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 17:00:03.668  INFO 24220 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 17:00:03.737  INFO 24220 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 17:00:03.916  INFO 24220 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 17:00:03.977  INFO 24220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 17:00:03.980  INFO 24220 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 4.165 seconds (JVM running for 5.071)
2020-04-08 17:00:06.800  INFO 24220 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 17:00:06.800  INFO 24220 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 17:00:06.807  INFO 24220 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-08 17:00:06.883 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:00:06.897 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:00:06.914 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:00:06.915 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 1(Long)
2020-04-08 17:00:06.948 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 17:00:06.958 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:00:06.959 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:00:06.961 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:00:06.963 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:00:06.963 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:00:06.964 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:00:50.620  INFO 24220 --- [http-nio-8888-exec-2] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=7D1E829B8FD70B54C132AC7F83DBFE86] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 17:00:51.127 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:00:51.128 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:00:51.135 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:00:51.138  INFO 24220 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 41ms, description = 初始化后台主页}
2020-04-08 17:00:51.139  INFO 24220 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:00:51.493 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:00:51.494 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:00:51.496 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:00:51.497 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:00:51.513 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:00:51.516 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:00:51.518 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:00:51.520 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:00:51.521 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:00:51.521 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:00:51.522 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:00:51.524 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:00:51.525 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:00:51.526 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:00:51.528 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:00:51.528 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:00:51.531 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:00:51.535 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:00:51.535 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:00:51.538 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:00:51.539 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:00:51.539 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:00:51.541 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:00:51.542 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:00:51.543 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:00:51.544 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:02:31.482 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:02:31.483 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:02:31.486 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:02:31.486  INFO 24220 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 17:02:31.486  INFO 24220 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:02:31.892 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:02:31.893 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:02:31.895 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:02:31.896 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:02:31.904 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:02:31.906 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:02:31.907 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:02:31.910 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:02:31.913 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:02:31.914 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:02:31.916 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:02:31.918 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:02:31.919 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:02:31.921 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:02:31.923 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:02:31.924 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:02:31.927 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:02:31.928 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:02:31.928 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:02:31.929 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:02:31.931 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:02:31.931 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:02:31.932 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:02:31.933 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:02:31.933 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:02:31.934 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:03:54.810  INFO 24220 --- [Thread-13] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-08 17:03:54.812  INFO 24220 --- [Thread-13] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-08 17:03:55.281  INFO 24220 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 24220 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 17:03:55.281 DEBUG 24220 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 17:03:55.281  INFO 24220 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 17:03:55.638  INFO 24220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 17:03:55.638  INFO 24220 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 17:03:55.639  INFO 24220 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 17:03:55.666  INFO 24220 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 17:03:55.667  INFO 24220 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 381 ms
2020-04-08 17:03:55.710  INFO 24220 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 17:03:55.766  INFO 24220 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-04-08 17:03:56.187  INFO 24220 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 17:03:56.205  INFO 24220 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 17:03:56.308  INFO 24220 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 17:03:56.330  INFO 24220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 17:03:56.331  INFO 24220 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.099 seconds (JVM running for 237.421)
2020-04-08 17:03:56.332  INFO 24220 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-04-08 17:03:58.890  INFO 24220 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 17:03:58.891  INFO 24220 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 17:03:58.898  INFO 24220 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-08 17:03:59.088 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:03:59.089 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:03:59.094 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:03:59.097  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 17ms, description = 初始化后台主页}
2020-04-08 17:03:59.097  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:03:59.415 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:03:59.415 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:03:59.419 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:03:59.421 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:03:59.446 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:03:59.473 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:03:59.474 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:03:59.478 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:03:59.479 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:03:59.479 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:03:59.483 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:03:59.487 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:03:59.488 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:03:59.491 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:03:59.493 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:03:59.494 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:03:59.495 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:03:59.496 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:03:59.496 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:03:59.498 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:03:59.499 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:03:59.499 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:03:59.500 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:03:59.505 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:03:59.506 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:03:59.508 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:06:25.831 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:06:25.831 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:06:25.835 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:06:25.836  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 17:06:25.836  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:06:26.152 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:06:26.153 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:06:26.156 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:06:26.157 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:06:26.172 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:06:26.173 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:06:26.174 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:06:26.176 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:06:26.177 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:06:26.177 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:06:26.179 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:06:26.181 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:06:26.181 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:06:26.186 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:06:26.187 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:06:26.187 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:06:26.190 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:06:26.192 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:06:26.193 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:06:26.195 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:06:26.197 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:06:26.197 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:06:26.199 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:06:26.201 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:06:26.201 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:06:26.204 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:07:08.899 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:07:08.900 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:07:08.903 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:07:08.903  INFO 24220 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 17:07:08.904  INFO 24220 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:07:09.270 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:07:09.270 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:07:09.276 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:07:09.277 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:07:09.300 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:07:09.301 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:09.302 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:07:09.305 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:07:09.310 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:09.311 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:07:09.313 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:07:09.314 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:09.315 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:07:09.316 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:07:09.323 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:09.324 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:07:09.326 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:07:09.331 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:09.331 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:07:09.332 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:07:09.334 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:09.334 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:07:09.336 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:07:09.337 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:07:09.337 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:07:09.339 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:07:18.828 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:07:18.829 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:07:18.831 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:07:18.832  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 17:07:18.832  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:07:19.177 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:07:19.178 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:07:19.180 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:07:19.180 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:07:19.192 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:07:19.194 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:19.194 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:07:19.196 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:07:19.198 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:19.198 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:07:19.200 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:07:19.201 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:19.201 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:07:19.204 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:07:19.207 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:19.208 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:07:19.210 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:07:19.211 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:19.211 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:07:19.213 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:07:19.214 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:19.215 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:07:19.216 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:07:19.218 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:07:19.218 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:07:19.222 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:07:45.107 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:07:45.107 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:07:45.109 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:07:45.110  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 17:07:45.110  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:07:45.426 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:07:45.427 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:07:45.429 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:07:45.430 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:07:45.444 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:07:45.446 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:45.447 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:07:45.451 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:07:45.454 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:45.454 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:07:45.456 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:07:45.457 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:45.458 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:07:45.460 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:07:45.461 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:45.462 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:07:45.464 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:07:45.467 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:45.467 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:07:45.469 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:07:45.470 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:45.471 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:07:45.472 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:07:45.474 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:07:45.474 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:07:45.475 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:07:54.739 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:07:54.739 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:07:54.742 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:07:54.742  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 17:07:54.742  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:07:55.089 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:07:55.089 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:07:55.091 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:07:55.092 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:07:55.103 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:07:55.105 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:55.105 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:07:55.116 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:07:55.118 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:55.119 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:07:55.120 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:07:55.121 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:55.121 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:07:55.123 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:07:55.124 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:55.124 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:07:55.125 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:07:55.126 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:55.127 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:07:55.132 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:07:55.133 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:07:55.133 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:07:55.135 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:07:55.137 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:07:55.137 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:07:55.139 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:08:02.389 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:08:02.389 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:08:02.392 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:08:02.393  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 17:08:02.394  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:08:02.741 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:08:02.743 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:08:02.749 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:08:02.749 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:08:02.762 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:08:02.764 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:02.765 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:08:02.767 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:08:02.768 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:02.769 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:08:02.771 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:08:02.772 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:02.772 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:08:02.774 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:08:02.777 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:02.779 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:08:02.781 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:08:02.782 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:02.783 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:08:02.785 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:08:02.786 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:02.786 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:08:02.788 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:08:02.789 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:08:02.789 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:08:02.791 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:08:26.801 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:08:26.802 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:08:26.806 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:08:26.806  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 17:08:26.807  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:08:27.151 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:08:27.152 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:08:27.156 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:08:27.157 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:08:27.164 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:08:27.165 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:27.166 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:08:27.168 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:08:27.170 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:27.171 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:08:27.175 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:08:27.177 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:27.177 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:08:27.178 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:08:27.179 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:27.180 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:08:27.181 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:08:27.183 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:27.183 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:08:27.185 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:08:27.186 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:27.186 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:08:27.190 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:08:27.193 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:08:27.193 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:08:27.195 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:08:38.385 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:08:38.385 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:08:38.387 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:08:38.388  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 17:08:38.388  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:08:38.706 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:08:38.706 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:08:38.708 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:08:38.708 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:08:38.717 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:08:38.720 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:38.720 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:08:38.722 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:08:38.724 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:38.724 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:08:38.726 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:08:38.727 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:38.728 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:08:38.729 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:08:38.731 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:38.731 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:08:38.736 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:08:38.737 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:38.738 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:08:38.739 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:08:38.741 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:38.742 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:08:38.744 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:08:38.745 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:08:38.746 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:08:38.747 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:08:55.140 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:08:55.140 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:08:55.142 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:08:55.142  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 17:08:55.142  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:08:55.492 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:08:55.492 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:08:55.494 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:08:55.495 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:08:55.507 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:08:55.509 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:55.509 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:08:55.510 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:08:55.513 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:55.514 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:08:55.518 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:08:55.519 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:55.519 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:08:55.521 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:08:55.522 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:55.523 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:08:55.525 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:08:55.526 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:55.526 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:08:55.530 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:08:55.534 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:08:55.534 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:08:55.536 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:08:55.537 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:08:55.537 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:08:55.539 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:09:12.295 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:09:12.295 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:09:12.298 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:09:12.298  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 17:09:12.298  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:09:12.637 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:09:12.638 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:09:12.639 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:09:12.639 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:09:12.650 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:09:12.651 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:12.651 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:09:12.654 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:09:12.655 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:12.656 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:09:12.657 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:09:12.661 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:12.662 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:09:12.664 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:09:12.665 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:12.666 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:09:12.667 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:09:12.669 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:12.669 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:09:12.671 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:09:12.672 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:12.672 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:09:12.673 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:09:12.675 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:09:12.676 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:09:12.677 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:09:20.529 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:09:20.529 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:09:20.531 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:09:20.532  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 17:09:20.532  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:09:20.924 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:09:20.924 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:09:20.928 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:09:20.929 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:09:20.938 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:09:20.941 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:20.942 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:09:20.946 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:09:20.948 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:20.948 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:09:20.951 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:09:20.953 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:20.953 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:09:20.955 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:09:20.958 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:20.960 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:09:20.962 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:09:20.964 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:20.964 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:09:20.966 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:09:20.968 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:09:20.968 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:09:20.970 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:09:20.971 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:09:20.972 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:09:20.975 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:10:50.989 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:10:50.989 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:10:50.992 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:10:50.993  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 17:10:50.993  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:10:51.283 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:10:51.283 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:10:51.290 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:10:51.290 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:10:51.298 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:10:51.298 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:10:51.299 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:10:51.301 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:10:51.305 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:10:51.306 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:10:51.308 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:10:51.309 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:10:51.310 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:10:51.311 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:10:51.313 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:10:51.313 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:10:51.314 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:10:51.315 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:10:51.316 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:10:51.319 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:10:51.322 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:10:51.323 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:10:51.324 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:10:51.326 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:10:51.326 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:10:51.327 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:11:24.893 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:11:24.894 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:11:24.897 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:11:24.898 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:11:24.898 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:11:24.900 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:11:29.587 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 17:11:29.587 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 17:11:29.590 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 17:11:29.591 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:11:29.594 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 17:11:29.595  INFO 24220 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 12ms, description = 分页查询用户}
2020-04-08 17:11:29.595  INFO 24220 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 17:15:06.903 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:15:06.904 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:15:06.908 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:15:06.908  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 17:15:06.908  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:15:07.265 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:15:07.265 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:15:07.268 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:15:07.268 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:15:07.279 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 17:15:07.281 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:15:07.281 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 1(Long)
2020-04-08 17:15:07.283 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 0
2020-04-08 17:15:07.284 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:15:07.284 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 2(Long)
2020-04-08 17:15:07.286 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:15:07.288 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:15:07.289 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 3(Long)
2020-04-08 17:15:07.293 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 3
2020-04-08 17:15:07.294 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:15:07.295 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 4(Long)
2020-04-08 17:15:07.296 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:15:07.298 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:15:07.298 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 5(Long)
2020-04-08 17:15:07.300 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:15:07.301 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:15:07.301 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 6(Long)
2020-04-08 17:15:07.310 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 17:15:07.312 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:15:07.312 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:15:07.314 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:29:26.053 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:29:26.053 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:29:26.055 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:29:26.055  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 17:29:26.055  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:29:26.288 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:29:26.289 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:29:26.291 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:29:26.291 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:29:26.291 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:31:15.056 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:31:15.056 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:31:15.058 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:31:15.058  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 17:31:15.058  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:31:18.908 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:31:18.908 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:31:18.910 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:31:18.910 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:31:18.911 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:31:18.912 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:31:21.242 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:31:21.243 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:31:21.244 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:31:21.244 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:31:21.245 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:31:23.584 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:31:23.584 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:31:23.584 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:31:23.585 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:31:23.589 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:31:23.589 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:31:37.980 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:31:37.981 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:31:37.981 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:31:37.981 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:31:37.983 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:31:37.984 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:31:55.753 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:31:55.753 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:31:55.753 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:31:55.753 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:31:55.754 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:31:55.755 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:31:58.103 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:31:58.103 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:31:58.104 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:31:58.104 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:31:58.105 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:32:01.285 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:32:01.285 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:32:01.285 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:32:01.285 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:32:01.286 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:32:01.286 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:32:22.363 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:32:22.363 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:32:22.364 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:32:22.365  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 17:32:22.365  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:32:22.637 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:32:22.637 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:32:22.642 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:32:22.642 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:32:22.643 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:32:25.242 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:32:25.243 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:32:25.243 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:32:25.243 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:32:25.244 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:32:25.244 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:34:25.574 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:34:25.574 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:34:25.575 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:34:25.576  INFO 24220 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 17:34:25.576  INFO 24220 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:34:25.744 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:34:25.745 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:34:25.746 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:34:25.746 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:34:25.747 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:34:45.706 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:34:45.706 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:34:45.707 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:34:45.708  INFO 24220 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 17:34:45.708  INFO 24220 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:34:46.025 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:34:46.025 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:34:46.027 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:34:46.027 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:34:46.028 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:35:08.021 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:35:08.021 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:35:08.022 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:35:08.022  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 2ms, description = 初始化后台主页}
2020-04-08 17:35:08.022  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:35:08.222 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:35:08.222 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:35:08.224 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:35:08.224 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:35:08.224 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:35:10.368 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:35:10.369 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:35:10.370 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:35:10.370 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:35:10.371 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:35:10.372 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:36:14.066 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:36:14.067 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:36:14.068 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:36:14.068  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 17:36:14.068  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:36:14.258 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:36:14.258 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:36:14.265 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:36:14.265 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:36:14.265 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:42:31.923 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:42:31.923 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:42:31.924 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:42:31.924  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 17:42:31.924  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:42:32.112 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:42:32.112 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:42:32.114 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:42:32.115 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:42:32.115 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:43:30.225 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:43:30.225 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:43:30.226 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:43:30.226 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:43:30.227 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:43:30.227 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:49:07.348 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 17:49:07.353 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第1章	认识SSM框架和Redis(String), 这一章节讲述了Spring IOC和Spring AOP的基础概念，还介绍了MyBatis和SpringMVC的特点，以及redis的优点，最后讲述了SSM和Redis的基本结构框图和各种技术的作用(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><br></h1><p cid="n2" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring框架：应用最广泛的框架。</span></p><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">成功来自于理念：</span></p><ul cid="n4" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n5" mdtype="list_item" style="position: relative;"><p cid="n6" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">IoC（Inversion of Control，控制反转）</span></p></li><li cid="n7" mdtype="list_item" style="position: relative;"><p cid="n8" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">AOP（Aspect Oriented Programming，面向切面编程）</span></p></li></ul><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</span></p><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</span></p><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</span></p><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子：使用插座</span></p><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 436px;"></span></p><p cid="n15" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用传统的方式管理对象</span></p><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在使用插座1,代码如下：</span></p><pre spellcheck="false" lang="java" cid="n17" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">Socket</span> <span style="color: rgb(0, 0, 0);">socket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Socket1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">user</span>.<span style="color: rgb(0, 0, 0);">setSocket</span>(<span style="color: rgb(0, 0, 0);">socket</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">user</span>.<span style="color: rgb(0, 0, 0);">userSocket</span>;</span></pre><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n19" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">Socket</span> <span style="color: rgb(0, 0, 0);">socket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Socket2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">user</span>.<span style="color: rgb(0, 0, 0);">setSocket</span>(<span style="color: rgb(0, 0, 0);">socket</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">user</span>.<span style="color: rgb(0, 0, 0);">userSocket</span>;</span></pre><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</span></p><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用Spring IoC容器管理对象</span></p><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n23" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">bean</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"socket"</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"Socket1"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">bean</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">bean</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"user"</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"User"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"socket"</span> <span style="color: rgb(0, 0, 204);">ref</span>=<span style="color: rgb(170, 17, 17);">"socket"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">property</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">bean</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n25" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">bean</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"socket"</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"Socket2"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">bean</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">bean</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"user"</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"User"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"socket"</span> <span style="color: rgb(0, 0, 204);">ref</span>=<span style="color: rgb(170, 17, 17);">"socket"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">property</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">bean</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</span></p><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 436px;"></span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</span></p><p cid="n30" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring AOP</span></p><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">订单超预算例子：</span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 436px;"></span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n35" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">* Spring AOP处理订单伪代码</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">* @param order 订单</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">**/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">proceed</span>(<span style="color: rgb(0, 0, 0);">Order</span> <span style="color: rgb(0, 0, 0);">order</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//判断生产部门是否通过订单，数据库记录订单</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">pflag</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productionDept</span>.<span style="color: rgb(0, 0, 0);">isPass</span>(<span style="color: rgb(0, 0, 0);">order</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span>(<span style="color: rgb(0, 0, 0);">pflag</span>){<span style="color: rgb(170, 85, 0);">//如果生产部门通过进行财务部门审批</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span>(<span style="color: rgb(0, 0, 0);">financialDept</span>.<span style="color: rgb(0, 0, 0);">isOverBudget</span>(<span style="color: rgb(0, 0, 0);">order</span>)){<span style="color: rgb(170, 85, 0);">//财务审批是否超限</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">RuntimeException</span>(<span style="color: rgb(170, 17, 17);">"预算超限！！！"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n36" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</span></p><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis</span></p><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</span></p><p cid="n39" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Hibernate</span></p><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">完全面向POJO</span></p><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Hibernate和Mybatis的区别</span></p><p cid="n42" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</span></p><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</span></p><p cid="n45" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring MVC</span></p><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</span></p><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Redis</span></p><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</span></p><p><br></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-08 17:49:07.333(Timestamp), 2020-04-08 17:49:07.333(Timestamp), 1(Integer)
2020-04-08 17:49:07.364 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 17:49:07.369 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 17:49:07.369 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 7(Long), 1(Long)
2020-04-08 17:49:07.370 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 17:49:14.936 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:49:14.936 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:49:14.938 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:49:14.939  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 17:49:14.939  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:49:15.153 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:49:15.153 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:49:15.156 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:49:15.156 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:49:15.158 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 17:49:15.159 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:49:15.159 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 17:49:15.162 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:49:15.163 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:49:15.164 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:49:15.165 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:56:13.750 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:56:13.751 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:56:13.753 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:56:13.754  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 17:56:13.754  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:56:13.936 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:56:13.936 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:56:13.938 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:56:13.938 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:56:13.940 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 17:56:13.940 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:56:13.941 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 17:56:13.942 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:56:13.943 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:56:13.944 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:56:13.945 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 17:56:20.709 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:56:20.709 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:56:20.709 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:56:20.709 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:56:20.710 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:56:20.710 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:58:57.391 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:58:57.391 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:58:57.394 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:58:57.394  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 17:58:57.394  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:58:57.707 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:58:57.708 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:58:57.711 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:58:57.712 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:58:57.713 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:58:57.715 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:59:12.890 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:59:12.890 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:59:12.892 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:59:12.894  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 17:59:12.894  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:59:13.280 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:59:13.280 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:59:13.280 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:59:13.280 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:59:13.281 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:59:13.282 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:59:36.422 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 17:59:36.422 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 17:59:36.423 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 17:59:36.424  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 17:59:36.424  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 17:59:36.700 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 17:59:36.700 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 17:59:36.700 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 17:59:36.700 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 17:59:36.703 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 17:59:36.703 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 17:59:41.658 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 17:59:41.659 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 17:59:41.660 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 17:59:41.660 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 17:59:41.662 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 17:59:41.663 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 17:59:41.663 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 17:59:41.666 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 17:59:41.668 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 17:59:41.669 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 17:59:41.670 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:05:42.120 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:05:42.120 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:05:42.121 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:05:42.121  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 2ms, description = 初始化后台主页}
2020-04-08 18:05:42.121  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:05:42.416 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:05:42.416 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:05:42.416 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:05:42.416 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:05:42.417 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:05:42.417 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:05:47.683 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:05:47.683 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:05:47.684 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:05:47.684 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:05:47.686 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 18:05:47.687 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:05:47.687 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:05:47.689 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:05:47.690 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:05:47.690 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:05:47.693 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:06:39.271 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:06:39.272 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:06:39.273 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:06:39.273  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 18:06:39.273  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:06:39.535 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:06:39.536 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:06:39.536 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:06:39.536 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:06:39.537 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:06:39.537 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:06:45.469 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:06:45.469 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:06:45.470 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:06:45.470 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:06:45.474 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 18:06:45.475 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:06:45.475 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:06:45.479 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:06:45.481 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:06:45.481 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:06:45.482 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:13:56.728 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:13:56.728 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:13:56.729 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:13:56.730  INFO 24220 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 18:13:56.730  INFO 24220 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:13:56.992 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:13:56.993 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:13:56.993 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:13:56.993 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:13:56.994 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:13:56.994 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:15:57.261 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:15:57.261 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:15:57.263 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:15:57.263  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 18:15:57.263  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:15:57.553 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:15:57.553 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:15:57.553 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:15:57.554 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:15:57.555 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:15:57.555 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:16:27.126 ERROR 24220 --- [http-nio-8888-exec-6] s.a.g.e.handler.GlobalExceptionHandler   : 参数验证失败

org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-04-08 18:16:27.132  WARN 24220 --- [http-nio-8888-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public site.alanliang.geekblog.common.JsonResult site.alanliang.geekblog.controller.admin.ArticleController.save(site.alanliang.geekblog.dto.ArticleDto): [Field error in object 'articleDto' on field 'title': rejected value []; codes [NotBlank.articleDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [articleDto.title,title]; arguments []; default message [title]]; default message [文章标题不能为空]] ]
2020-04-08 18:16:56.885 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:16:56.885 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:16:56.886 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:16:56.887  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 18:16:56.887  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:16:57.116 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:16:57.116 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:16:57.116 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:16:57.116 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:16:57.118 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:16:57.118 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:16:59.930 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:16:59.931 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:16:59.932 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:16:59.932 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:16:59.934 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 18:16:59.934 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:16:59.935 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:16:59.936 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:16:59.937 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:16:59.937 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:16:59.939 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:26:25.393 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:26:25.393 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:26:25.394 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:26:25.394 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:26:25.395 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:26:25.396 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:26:53.368 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:26:53.368 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:26:53.370 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:26:53.370  INFO 24220 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 18:26:53.370  INFO 24220 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:26:53.645 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:26:53.645 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:26:53.646 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:26:53.646 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:26:53.649 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:26:53.650 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:27:17.865 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:27:17.874 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-08 18:27:17.853(Timestamp), 2020-04-08 18:27:17.853(Timestamp), 1(Integer)
2020-04-08 18:27:18.032 ERROR 24220 --- [http-nio-8888-exec-8] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO t_article  ( title, summary, content,   views, likes, comments, appreciable, commentable, published,  category_id, create_time, update_time, type )  VALUES  ( ?, ?, ?,   ?, ?, ?, ?, ?, ?,  ?, ?, ?, ? )
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
; Data truncation: Data too long for column 'content' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
2020-04-08 18:27:18.035  WARN 24220 --- [http-nio-8888-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO t_article  ( title, summary, content,   views, likes, comments, appreciable, commentable, published,  category_id, create_time, update_time, type )  VALUES  ( ?, ?, ?,   ?, ?, ?, ?, ?, ?,  ?, ?, ?, ? )
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
; Data truncation: Data too long for column 'content' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1]
2020-04-08 18:27:38.868 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:27:38.872 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-08 18:27:38.855(Timestamp), 2020-04-08 18:27:38.855(Timestamp), 1(Integer)
2020-04-08 18:27:38.889 ERROR 24220 --- [http-nio-8888-exec-9] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8888/admin/article, Exception : 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO t_article  ( title, summary, content,   views, likes, comments, appreciable, commentable, published,  category_id, create_time, update_time, type )  VALUES  ( ?, ?, ?,   ?, ?, ?, ?, ?, ?,  ?, ?, ?, ? )
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
; Data truncation: Data too long for column 'content' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
2020-04-08 18:27:38.889  WARN 24220 --- [http-nio-8888-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
### The error may exist in site/alanliang/geekblog/mapper/ArticleMapper.java (best guess)
### The error may involve site.alanliang.geekblog.mapper.ArticleMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO t_article  ( title, summary, content,   views, likes, comments, appreciable, commentable, published,  category_id, create_time, update_time, type )  VALUES  ( ?, ?, ?,   ?, ?, ?, ?, ?, ?,  ?, ?, ?, ? )
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1
; Data truncation: Data too long for column 'content' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'content' at row 1]
2020-04-08 18:30:35.717 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:30:35.721 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-08 18:30:35.716(Timestamp), 2020-04-08 18:30:35.716(Timestamp), 1(Integer)
2020-04-08 18:30:35.750 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 18:30:35.751 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 18:30:35.751 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 8(Long), 1(Long)
2020-04-08 18:30:35.752 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 18:30:52.511 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:30:52.513 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-08 18:30:52.509(Timestamp), 2020-04-08 18:30:52.509(Timestamp), 1(Integer)
2020-04-08 18:30:52.533 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 18:30:52.534 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 18:30:52.534 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 9(Long), 1(Long)
2020-04-08 18:30:52.535 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 18:31:07.355 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:31:07.358 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-08 18:31:07.352(Timestamp), 2020-04-08 18:31:07.352(Timestamp), 1(Integer)
2020-04-08 18:31:07.371 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 18:31:07.372 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 18:31:07.372 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 10(Long), 1(Long)
2020-04-08 18:31:07.373 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 18:32:17.773 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:32:17.773 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:32:17.775 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:32:17.775  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 18:32:17.775  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:32:18.042 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:32:18.043 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:32:18.043 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:32:18.043 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:32:18.045 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:32:18.045 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:32:40.788 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:32:40.795 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">在Java框架中运用了很多的设计模式，常见的包括<span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">代理模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">责任链模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">观察者模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">普通工厂模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">抽象工厂模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">和</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">建造者模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">等，那么下面让我们一起来了解一下。</span><br></h1><h2 cid="n6" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">1、什么是设计模式</span></h2><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-08 18:32:40.787(Timestamp), 2020-04-08 18:32:40.787(Timestamp), 1(Integer)
2020-04-08 18:32:40.806 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 18:32:40.807 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 18:32:40.807 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 11(Long), 1(Long)
2020-04-08 18:32:40.808 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 18:32:45.539 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:32:45.542 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">在Java框架中运用了很多的设计模式，常见的包括<span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">代理模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">责任链模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">观察者模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">普通工厂模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">抽象工厂模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">和</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">建造者模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">等，那么下面让我们一起来了解一下。</span><br></h1><h2 cid="n6" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">1、什么是设计模式</span></h2><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-08 18:32:45.538(Timestamp), 2020-04-08 18:32:45.538(Timestamp), 1(Integer)
2020-04-08 18:32:45.559 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 18:32:45.560 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 18:32:45.560 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 12(Long), 1(Long)
2020-04-08 18:32:45.561 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 18:32:55.009 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:32:55.012 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">在Java框架中运用了很多的设计模式，常见的包括<span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">代理模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">责任链模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">观察者模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">普通工厂模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">、</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">抽象工厂模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">和</span><span md-inline="strong" style="font-size: 16px; orphans: 4; font-weight: normal;"><strong><span md-inline="plain">建造者模式</span></strong></span><span md-inline="plain" style="font-size: 16px; orphans: 4; font-weight: normal;">等，那么下面让我们一起来了解一下。</span><br></h1><h2 cid="n6" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">1、什么是设计模式</span></h2><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-08 18:32:55.008(Timestamp), 2020-04-08 18:32:55.008(Timestamp), 1(Integer)
2020-04-08 18:32:55.023 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 18:32:55.025 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 18:32:55.025 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 13(Long), 1(Long)
2020-04-08 18:32:55.027 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 18:33:33.843 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:33:33.844 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:33:33.846 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:33:33.847  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 18:33:33.847  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:33:34.440 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:33:34.440 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:33:34.440 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:33:34.440 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:33:34.441 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:33:34.442 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:34:05.199 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:34:05.206 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第2章	Java设计模式(String), 在Java框架中运用了很多的设计模式，常见的包括代理模式、责任链模式、观察者模式、普通工厂模式、抽象工厂模式和建造者模式等，那么下面让我们一起来了解一下。(String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、什么是设计模式<br></h1><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">设计模式</span></strong></span><span md-inline="plain">（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</span></p><h2 cid="n8" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、Java反射技术</span></h2><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java反射技术应用广泛，能够配置类的</span><span md-inline="strong"><strong><span md-inline="plain">全限定名</span></strong></span><span md-inline="plain">、</span><span md-inline="strong"><strong><span md-inline="plain">方法</span></strong></span><span md-inline="plain">和</span><span md-inline="strong"><strong><span md-inline="plain">参数</span></strong></span><span md-inline="plain">，</span><span md-inline="strong"><strong><span md-inline="plain">完成对象的初始化</span></strong></span><span md-inline="plain">等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</span></p><p cid="n10" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">我们简单了解一下反射的应用：</span></p><h3 cid="n11" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.1、通过反射构建对象</span></h3><p cid="n12" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（1）通过</span><span md-inline="strong"><strong><span md-inline="plain">无参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n13" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n14" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">（2）通过</span><span md-inline="strong"><strong><span md-inline="plain">有参构造</span></strong></span><span md-inline="plain">方式构建对象，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n15" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ReflectServiceImpl2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">name</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">name</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">name</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">err</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello "</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">name</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">getInstance</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span><span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">//通过反射生成对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span><span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl2</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">getConstructor</span>(<span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><ul cid="n16" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">优点</span></strong></span><span md-inline="plain">：只要配置就可以生成对象，可以解除程序的耦合度。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">反射的</span><span md-inline="strong"><strong><span md-inline="plain">缺点</span></strong></span><span md-inline="plain">：运行较慢。</span></p></li></ul><p cid="n21" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</span></p><h3 cid="n22" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.2、反射方法</span></h3><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n24" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflectMethod</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//当有具体对象target但不知道它是哪个类的可以这样写</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用方法，相当于target.sayHello("张三")</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">returnObj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">returnObj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><h3 cid="n25" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2.3、实例</span></h3><p cid="n26" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n27" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 255);">reflect</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">object</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.reflect.ReflectServiceImpl"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">object</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getMethod</span>(<span style="color: rgb(170, 17, 17);">"sayHello"</span>, <span style="color: rgb(0, 136, 85);">String</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">object</span>,<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InstantiationException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IllegalAccessException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">ClassNotFoundException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">NoSuchMethodException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">InvocationTargetException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">object</span>;</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">main</span>(<span style="color: rgb(0, 136, 85);">String</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(0, 0, 0);">reflect</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行程序，得到以下结果：</span></p><pre spellcheck="false" lang="" cid="n29" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span></pre><h2 cid="n30" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、动态代理模式</span></h2><p cid="n31" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</span></strong></span></p><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</span></p><p cid="n33" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n34" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</span></strong></span></p><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代理分为两个步骤：</span></p><ol start="" cid="n36" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n37" mdtype="list_item" style="position: relative;"><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">代理对象和真实对象之间建立代理关系</span></strong></span></p></li><li cid="n39" mdtype="list_item" style="position: relative;"><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">实现代理对象的代理逻辑方法</span></strong></span></p></li></ol><p cid="n41" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Java中最常用的动态代理技术有：</span></p><ul cid="n42" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n43" mdtype="list_item" style="position: relative;"><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">JDK动态代理</span></strong></span><span md-inline="plain">。JDK自带功能，必须使用接口，比较复杂</span></p></li><li cid="n45" mdtype="list_item" style="position: relative;"><p cid="n46" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="strong"><strong><span md-inline="plain">CGLIB</span></strong></span><span md-inline="plain">。第三方提供技术，不必使用接口，比较简单</span></p></li></ul><h3 cid="n47" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、JDK动态代理</span></h3><p cid="n48" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">首先定义</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorld</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n49" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n50" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后提供实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">HelloWorldImp</code></span><span md-inline="plain">l来实现接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n51" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">HelloWorldImpl</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">HelloWorld</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">sayHelloWorld</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"Hello World"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">动态代理绑定和代理逻辑实现，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JdkProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 建立代理对象和真实对象的代理关系</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理方法逻辑</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 当前调度方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 当前方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"进入代理逻辑方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之前的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);<span style="color: rgb(170, 85, 0);">//相当于调用sayHelloWord方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"在调用真实对象之后的服务"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">obj</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试JDK动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testJdkProxy</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JdkProxyExample</span> <span style="color: rgb(0, 0, 0);">jdkProxy</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JdkProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">jdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>());</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n56" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n57" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">进入代理逻辑方法</span><br><span role="presentation" style="padding-right: 0.1px;">在调度真实对象之前的服务</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">在调用真实对象之后的服务</span></pre><h3 cid="n58" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.2、CGLIB动态代理</span></h3><p cid="n59" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码如下：</span></p><pre spellcheck="false" lang="java" cid="n60" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">CglibProxyExample</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">MethodInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 生成CGLIB代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param clazz Class类</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return Class类的CGLIB对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">Class</span> <span style="color: rgb(0, 0, 0);">clazz</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//CGLIB enhancer增强类对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Enhancer</span> <span style="color: rgb(0, 0, 0);">enhancer</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Enhancer</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//设置增强类型</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setSuperclass</span>(<span style="color: rgb(0, 0, 0);">clazz</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">setCallback</span>(<span style="color: rgb(119, 0, 136);">this</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//生成并返回代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">enhancer</span>.<span style="color: rgb(0, 0, 0);">create</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 代理逻辑方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 执行方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param methodProxy 方法代理</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理逻辑返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">intercept</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>, <span style="color: rgb(0, 0, 0);">MethodProxy</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象前"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">methodProxy</span>.<span style="color: rgb(0, 0, 0);">invokeSuper</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"调用真实对象后"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n61" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试CGLIB动态代理，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n62" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestProxy</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testCGLIBProxy</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">CglibProxyExample</span> <span style="color: rgb(0, 0, 0);">cglibProxyExample</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">CglibProxyExample</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span> <span style="color: rgb(0, 0, 0);">obj</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>) <span style="color: rgb(0, 0, 0);">cglibProxyExample</span>.<span style="color: rgb(0, 0, 0);">getProxy</span>(<span style="color: rgb(0, 0, 0);">ReflectServiceImpl</span>.<span style="color: rgb(119, 0, 136);">class</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">obj</span>.<span style="color: rgb(0, 0, 0);">sayHello</span>(<span style="color: rgb(170, 17, 17);">"张三"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n63" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n64" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">调用真实对象前</span><br><span role="presentation" style="padding-right: 0.1px;">Hello 张三</span><br><span role="presentation" style="padding-right: 0.1px;">调用真实对象后</span></pre><h3 cid="n65" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.3、拦截器</span></h3><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</span></p><h3 cid="n67" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.4、实例</span></h3><p cid="n68" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Interceptor</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n69" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">Interceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 在真实对象前调用</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy 代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 当返回真实对象方法或者around方法执行后，调用after方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>,<span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n70" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">实现这个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n71" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">MyInterceptor</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法前逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">false</span>;<span style="color: rgb(170, 85, 0);">//不反射被代理对象原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"反射方法后逻辑"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"取代了被代理对象的方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n72" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在JDK动态代理中使用拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n73" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">InterceptorJdkProxy</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">InvocationHandler</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//拦截器全限定名</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">target</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">target</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">interceptorClass</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 绑定委托对象并返回一个[代理占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param target 真实对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理对象[占位]</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">InterceptorClass</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">Proxy</span>.<span style="color: rgb(0, 0, 0);">newProxyInstance</span>(<span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getClassLoader</span>(), <span style="color: rgb(0, 0, 0);">target</span>.<span style="color: rgb(0, 0, 0);">getClass</span>().<span style="color: rgb(0, 0, 0);">getInterfaces</span>(), <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">InterceptorClass</span>));</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 通过代理对象调用方法，首先进入这个方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param proxy  代理对象</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param method 被调用方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param args &nbsp; 方法参数</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 代理结果返回</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @throws Throwable 异常</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) <span style="color: rgb(119, 0, 136);">throws</span> <span style="color: rgb(0, 0, 0);">Throwable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptorClass</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//没有设置拦截器则直接反射原有方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//通过反射生成拦截器</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">Interceptor</span> <span style="color: rgb(0, 0, 0);">interceptor</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">Interceptor</span>) <span style="color: rgb(0, 0, 0);">Class</span>.<span style="color: rgb(0, 0, 0);">forName</span>(<span style="color: rgb(0, 0, 0);">interceptorClass</span>).<span style="color: rgb(0, 0, 0);">newInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用前置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>)) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回true反射原有对象方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">result</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">method</span>.<span style="color: rgb(0, 0, 0);">invoke</span>(<span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//返回false执行around方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//调用后置方法</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">interceptor</span>.<span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 0, 0);">args</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">result</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n74" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">代码的执行步骤：</span></p><ol start="" cid="n75" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</span></p></li><li cid="n78" mdtype="list_item" style="position: relative;"><p cid="n79" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</span></p></li><li cid="n80" mdtype="list_item" style="position: relative;"><p cid="n81" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">通过反射生成拦截器，并准备使用它。</span></p></li><li cid="n82" mdtype="list_item" style="position: relative;"><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">before</code></span><span md-inline="plain">方法，如果返回true则反射原来的方法；否则运行拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">around</code></span><span md-inline="plain">方法。</span></p></li><li cid="n84" mdtype="list_item" style="position: relative;"><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">调用拦截器的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">after</code></span><span md-inline="plain">方法</span></p></li><li cid="n86" mdtype="list_item" style="position: relative;"><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">返回结果</span></p></li></ol><p cid="n88" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n89" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestInterceptor</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testInterceptor</span>(){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(),<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.MyInterceptor"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 0, 0);">proxy</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span></pre><p cid="n90" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试结果如下：</span></p><pre spellcheck="false" lang="" cid="n91" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">反射方法前逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">反射方法后逻辑</span><br><span role="presentation" style="padding-right: 0.1px;">取代了被代理对象的方法</span></pre><h2 cid="n92" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、责任链模式</span></h2><p cid="n93" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</span></p><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n95" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</span></strong></span></p><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">target</code></span><span md-inline="plain">）来到项目经理处时，使用第一个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">，当他来到部门经理处时，部门经理会得到一个在项目经理的代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy1</code></span><span md-inline="plain">基础上生成的第二个动态代理</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">proxy2</code></span><span md-inline="plain">来处理部门经理的逻辑，以此类推。</span></p><p cid="n97" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">拦截逻辑如下图：</span></p><p cid="n98" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><h3 cid="n99" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4.1、实例</span></h3><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义三个拦截器，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n101" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器1】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器2*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器2】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(170, 85, 0);">/************************************拦截器3*************************************/</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">Interceptor3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Interceptor</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">boolean</span> <span style="color: rgb(0, 0, 0);">before</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的before方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">true</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">around</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">after</span>(<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">proxy</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">target</span>, <span style="color: rgb(0, 0, 0);">Method</span> <span style="color: rgb(0, 0, 0);">method</span>, <span style="color: rgb(0, 136, 85);">Object</span>[] <span style="color: rgb(0, 0, 0);">args</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"【拦截器3】的after方法"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试责任链模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n103" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 255);">testInterceptors</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy1</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">HelloWorldImpl</span>(), <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy2</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy1</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor2"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">HelloWorld</span> <span style="color: rgb(0, 0, 0);">proxy3</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 0, 0);">HelloWorld</span>) <span style="color: rgb(0, 0, 0);">InterceptorJdkProxy</span>.<span style="color: rgb(0, 0, 0);">bind</span>(<span style="color: rgb(0, 0, 0);">proxy2</span>, <span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter2.interceptor.Interceptor3"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">proxy3</span>.<span style="color: rgb(0, 0, 0);">sayHelloWorld</span>();</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n104" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n105" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的before方法</span><br><span role="presentation" style="padding-right: 0.1px;">Hello World</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器1】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器2】的after方法</span><br><span role="presentation" style="padding-right: 0.1px;">【拦截器3】的after方法</span></pre><p cid="n106" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</span></strong></span></p><h2 cid="n107" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、观察者（Observer）模式</span></h2><p cid="n108" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</span></strong></span></p><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</span></p><p cid="n110" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</span></p><pre spellcheck="false" lang="" cid="n111" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n112" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</span></p><pre spellcheck="false" lang="" cid="n113" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">if(产品库有新产品){</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到淘宝;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到京东；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到国美;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到苏宁；</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到当当;</span><br><span role="presentation" style="padding-right: 0.1px;"><span role="presentation" cm-text="	" style="font-family: var(--monospace); position: relative; display: inline-block;">    </span>推送新产品到唯品会；</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n114" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</span></p><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">而观察者模式更利用扩展，责任也更加清晰。</span></strong></span><span md-inline="plain">首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</span></strong></span></p><p cid="n118" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</span></strong></span></p><h3 cid="n119" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、实例</span></h3><p cid="n120" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">被观察者——产品列表，继承</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observable</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n121" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductList</span> <span style="color: rgb(119, 0, 136);">extends</span> <span style="color: rgb(0, 0, 0);">Observable</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//产品列表</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">List</span><span style="color: rgb(152, 26, 26);">&lt;</span><span style="color: rgb(0, 136, 85);">String</span><span style="color: rgb(152, 26, 26);">&gt;</span> <span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//类的唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//构造方法私有化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">private</span> <span style="color: rgb(0, 0, 0);">ProductList</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 取得唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @return 产品列表唯一实例</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">getInstance</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductList</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">instance</span>.<span style="color: rgb(0, 0, 0);">productList</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ArrayList</span><span style="color: rgb(152, 26, 26);">&lt;&gt;</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">instance</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 增加观察者（电商接口）</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param observer 观察者</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProductListObserver</span>(<span style="color: rgb(0, 0, 0);">Observer</span> <span style="color: rgb(0, 0, 0);">observer</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">observer</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">/**</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* 新增产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">* @param newProduct 新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; <span style="color: rgb(170, 85, 0);">*/</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">productList</span>.<span style="color: rgb(0, 0, 0);">add</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"产品列表增加了新的产品 "</span><span style="color: rgb(152, 26, 26);">+</span><span style="color: rgb(0, 0, 0);">newProduct</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">setChanged</span>();<span style="color: rgb(170, 85, 0);">//设置被观察对象发生变化</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">this</span>.<span style="color: rgb(0, 0, 0);">notifyObservers</span>(<span style="color: rgb(0, 0, 0);">newProduct</span>);<span style="color: rgb(170, 85, 0);">//通知观察者，并传递新产品</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n122" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getInstance()</code></span><span md-inline="plain">方法获得产品列表单例，这里使用了单例模式。</span></p><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Observer</code></span><span md-inline="plain">接口的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">update</code></span><span md-inline="plain">方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TaoBaoObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到淘宝商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n125" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">JingDongObserver</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">Observer</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">update</span>(<span style="color: rgb(0, 0, 0);">Observable</span> <span style="color: rgb(0, 0, 0);">o</span>, <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">product</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">=</span> (<span style="color: rgb(0, 136, 85);">String</span>) <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"发送新产品【"</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">newProduct</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(170, 17, 17);">"】同步到京东商城"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n126" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">测试观察者模式，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n127" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">ublic</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestObserver</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testObserver</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">ProductList</span> <span style="color: rgb(0, 0, 0);">observable</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">ProductList</span>.<span style="color: rgb(0, 0, 0);">getInstance</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TaoBaoObserver</span> <span style="color: rgb(0, 0, 0);">taoBaoObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TaoBaoObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">JingDongObserver</span> <span style="color: rgb(0, 0, 0);">jingDongObserver</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">JingDongObserver</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">taoBaoObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addObserver</span>(<span style="color: rgb(0, 0, 0);">jingDongObserver</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">observable</span>.<span style="color: rgb(0, 0, 0);">addProduct</span>(<span style="color: rgb(170, 17, 17);">"新增产品1"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">运行结果如下：</span></p><pre spellcheck="false" lang="" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;">产品列表增加了新的产品 新增产品1</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到京东商城</span><br><span role="presentation" style="padding-right: 0.1px;">发送新产品【新增产品1】同步到淘宝商城</span></pre><h2 cid="n130" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、工厂模式和抽象工厂模式</span></h2><p cid="n131" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</span></p><h3 cid="n132" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、普通工厂（Simple Factory）模式：</span></h3><p cid="n133" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">例如，有个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的产品接口，它下面有5个实现类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product1</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product2</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product3</code></span><span md-inline="plain">、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product4</code></span><span md-inline="plain">和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Product5</code></span><span md-inline="plain">。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：</span><span md-inline="tab" style="display: inline-block; white-space: pre;">	</span></p><p cid="n134" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n135" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">的伪代码如下：</span></p><pre spellcheck="false" lang="java" cid="n136" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span>{</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">switch</span>(<span style="color: rgb(0, 0, 0);">productNo</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"1"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product1</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"2"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product2</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"3"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product3</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"4"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product4</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">case</span> <span style="color: rgb(170, 17, 17);">"5"</span>:<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">Product5</span>(<span style="color: rgb(0, 0, 0);">XXX</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">default</span>:</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">throw</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">NotSupprotedException</span>(<span style="color: rgb(170, 17, 17);">"未支持此编号产品生产。"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n137" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">对于程序调用者而言，他只需要知道通过工厂的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">createProduct</code></span><span md-inline="plain">方法，指定产品编号——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">productNo</code></span><span md-inline="plain">可以得到对应的产品，而产品满足接口</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProduct</code></span><span md-inline="plain">的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</span></p><h3 cid="n138" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、抽象工厂（Abstract Factory）模式</span></h3><p cid="n139" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</span></p><p cid="n140" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n141" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了统一，需要制定一个接口规范（</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">IProductFactory</code></span><span md-inline="plain">），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n142" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n143" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">现在再实现3个工厂类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n144" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory1</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂1生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n145" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory2</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂2生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre spellcheck="false" lang="java" cid="n146" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory3</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">product</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">XXX</span>;<span style="color: rgb(170, 85, 0);">//工厂3生成产品对象规则，可以是一类产品的规则</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">product</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n147" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">x创建对象。代码如下：</span></p><pre spellcheck="false" lang="java" cid="n148" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">ProductFactory</span> <span style="color: rgb(119, 0, 136);">implements</span> <span style="color: rgb(0, 0, 0);">IProductFactory</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Override</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">IProduct</span> <span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">productNo</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">char</span> <span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">productNo</span>.<span style="color: rgb(0, 0, 0);">charAt</span>(<span style="color: rgb(17, 102, 68);">0</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">IProductFactory</span> <span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'1'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory1</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'2'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory2</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">else</span> <span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">ch</span> <span style="color: rgb(152, 26, 26);">==</span> <span style="color: rgb(170, 17, 17);">'3'</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">ProductFactory3</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">factory</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(0, 0, 0);">factory</span>.<span style="color: rgb(0, 0, 0);">createProduct</span>(<span style="color: rgb(0, 0, 0);">productNo</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n149" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">对于设计者而言，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">ProductFactory</code></span><span md-inline="plain">就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</span></strong></span></p><h2 cid="n150" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、建造者（Builder）模式</span></h2><p cid="n151" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="strong"><strong><span md-inline="plain">建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</span></strong></span></p><p cid="n152" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</span></p><p cid="n153" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Builder</code></span><span md-inline="plain">模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</span></p><h3 cid="n154" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7.1、实例</span></h3><p cid="n155" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一个配置类的对象</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TickerHelper</code></span><span md-inline="plain">，它能够帮助我们一步步构建对象。代码如下所示：</span></p><pre spellcheck="false" lang="java" cid="n156" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketHelper</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建成年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建有座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建无座儿童票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建老年人票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">info</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"构建军人及其家属票逻辑："</span> <span style="color: rgb(152, 26, 26);">+</span> <span style="color: rgb(0, 0, 0);">info</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n157" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">然后，需要一个构造类——</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">TicketBuilder</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n158" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TicketBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">static</span> <span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span>){</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">System</span>.<span style="color: rgb(0, 0, 0);">out</span>.<span style="color: rgb(0, 0, 0);">println</span>(<span style="color: rgb(170, 17, 17);">"通过TicketHelper构建套票信息"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">return</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n159" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">通过这两个类就可以构建出套票，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n160" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestBuilder</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testBuilder</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">TicketHelper</span> <span style="color: rgb(0, 0, 0);">helper</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">TicketHelper</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildAdult</span>(<span style="color: rgb(170, 17, 17);">"成人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForSeat</span>(<span style="color: rgb(170, 17, 17);">"有座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildChildrenForNoSeat</span>(<span style="color: rgb(170, 17, 17);">"无座儿童"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildElderly</span>(<span style="color: rgb(170, 17, 17);">"老年人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">helper</span>.<span style="color: rgb(0, 0, 0);">buildSoldier</span>(<span style="color: rgb(170, 17, 17);">"军人票"</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">Object</span> <span style="color: rgb(0, 0, 0);">ticket</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">TicketBuilder</span>.<span style="color: rgb(0, 0, 0);">builder</span>(<span style="color: rgb(0, 0, 0);">helper</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><p cid="n161" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-08 18:34:05.198(Timestamp), 2020-04-08 18:34:05.198(Timestamp), 1(Integer)
2020-04-08 18:34:05.217 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 18:34:05.218 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 18:34:05.218 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 14(Long), 1(Long)
2020-04-08 18:34:05.219 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 18:34:07.903 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:34:07.903 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:34:07.905 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:34:07.905 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:34:07.912 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 6
2020-04-08 18:34:07.914 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:34:07.915 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:34:07.916 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:34:07.917 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:34:07.917 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 18:34:07.918 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:34:07.919 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:34:07.920 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 18:34:07.921 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:34:07.922 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:34:07.922 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 18:34:07.923 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:34:07.925 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:34:07.925 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 18:34:07.926 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:34:07.927 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:34:07.928 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 18:34:07.929 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:34:07.930 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:34:07.930 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:34:07.933 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:35:26.651 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:35:26.651 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:35:26.652 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:35:26.652  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 18:35:26.653  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:35:26.986 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:35:26.986 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:35:26.986 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:35:26.986 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:35:26.991 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:35:27.002 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:36:18.147 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 18:36:18.148 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-08 18:36:18.146(Timestamp), 2020-04-08 18:36:18.146(Timestamp), 1(Integer)
2020-04-08 18:36:18.155 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 18:36:18.156 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 18:36:18.156 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 15(Long), 1(Long)
2020-04-08 18:36:18.157 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 18:36:19.766 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:36:19.766 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:36:19.775 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:36:19.775 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:36:19.782 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 18:36:19.783 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:36:19.783 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:36:19.785 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:36:19.785 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:36:19.785 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 18:36:19.786 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:36:19.787 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:36:19.787 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 18:36:19.787 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:36:19.788 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:36:19.788 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 18:36:19.789 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:36:19.790 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:36:19.791 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 18:36:19.793 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:36:19.794 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:36:19.794 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 18:36:19.795 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:36:19.796 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:36:19.796 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 18:36:19.797 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:36:19.798 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:36:19.798 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:36:19.798 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:40:28.921 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:40:28.921 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:40:28.922 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:40:28.923  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 18:40:28.923  INFO 24220 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:40:29.225 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:40:29.225 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:40:29.226 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:40:29.226 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:40:29.226 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:40:29.227 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:40:32.860 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 18:40:32.860 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 18:40:32.864 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 18:40:32.864 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:40:32.866 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 18:40:32.867  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 7ms, description = 分页查询用户}
2020-04-08 18:40:32.867  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 18:40:53.595 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:40:53.596 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:40:53.598 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:40:53.598  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 18:40:53.598  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:40:53.999 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:40:53.999 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:40:54.001 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:40:54.002 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:40:54.010 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 18:40:54.011 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:40:54.012 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:40:54.014 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:40:54.015 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:40:54.015 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 18:40:54.016 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:40:54.016 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:40:54.017 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 18:40:54.018 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:40:54.018 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:40:54.018 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 18:40:54.019 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:40:54.020 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:40:54.020 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 18:40:54.022 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:40:54.025 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:40:54.025 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 18:40:54.027 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:40:54.028 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:40:54.028 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 18:40:54.030 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:40:54.031 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:40:54.031 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:40:54.033 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:41:45.300 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:41:45.300 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:41:45.301 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:41:45.301  INFO 24220 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 18:41:45.302  INFO 24220 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:41:45.599 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:41:45.599 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:41:45.601 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:41:45.601 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:41:45.605 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 18:41:45.606 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:45.606 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:41:45.608 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:45.608 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:45.609 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 18:41:45.611 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:45.614 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:45.615 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 18:41:45.616 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:45.618 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:45.618 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 18:41:45.619 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:45.620 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:45.620 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 18:41:45.622 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:45.623 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:45.623 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 18:41:45.625 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:45.626 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:45.626 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 18:41:45.631 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:45.632 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:41:45.632 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:41:45.633 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:41:53.055 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:41:53.055 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:41:53.057 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:41:53.057  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 18:41:53.057  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:41:53.335 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:41:53.335 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:41:53.338 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:41:53.338 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:41:53.348 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 18:41:53.350 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:53.350 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:41:53.352 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:53.353 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:53.354 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 18:41:53.356 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:53.356 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:53.357 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 18:41:53.358 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:53.360 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:53.361 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 18:41:53.363 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:53.365 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:53.366 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 18:41:53.367 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:53.368 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:53.368 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 18:41:53.370 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:53.371 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:41:53.371 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 18:41:53.372 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:41:53.373 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:41:53.373 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:41:53.373 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:42:02.130 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:42:02.130 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:42:02.131 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:42:02.131  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 18:42:02.131  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:42:02.385 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:42:02.385 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:42:02.386 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:42:02.386 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:42:02.393 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 18:42:02.394 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:42:02.394 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:42:02.396 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:42:02.397 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:42:02.398 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 18:42:02.400 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:42:02.400 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:42:02.400 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 18:42:02.402 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:42:02.403 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:42:02.403 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 18:42:02.404 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:42:02.405 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:42:02.405 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 18:42:02.407 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:42:02.410 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:42:02.410 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 18:42:02.412 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:42:02.413 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:42:02.414 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 18:42:02.415 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:42:02.415 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:42:02.416 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:42:02.416 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:47:41.123 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:47:41.123 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:47:41.126 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:47:41.126  INFO 24220 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 18:47:41.126  INFO 24220 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:47:41.339 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:47:41.339 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:47:41.343 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:47:41.343 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:47:41.351 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 18:47:41.352 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:47:41.353 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:47:41.354 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:47:41.355 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:47:41.355 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 18:47:41.356 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:47:41.359 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:47:41.359 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 18:47:41.361 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:47:41.364 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:47:41.364 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 18:47:41.366 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:47:41.367 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:47:41.367 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 18:47:41.367 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:47:41.368 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:47:41.368 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 18:47:41.369 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:47:41.369 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:47:41.369 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 18:47:41.370 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:47:41.370 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:47:41.370 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:47:41.371 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 18:47:44.785 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:47:44.785 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:47:44.785 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:47:44.785 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:47:44.786 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:47:44.786 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:47:56.977 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:47:56.977 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:47:56.978 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:47:56.979  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 18:47:56.979  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:47:57.346 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:47:57.346 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:47:57.347 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:48:12.643 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:48:12.643 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:48:12.644 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:48:12.645  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 18:48:12.645  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:48:13.025 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:48:13.025 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:48:13.025 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:48:13.025 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:48:13.026 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:48:13.027 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:51:21.270 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:51:21.271 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:51:21.274 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:51:21.275  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 18:51:21.275  INFO 24220 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:51:21.673 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:51:21.673 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:51:21.674 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:51:21.674 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:51:21.675 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:51:21.675 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:51:37.526 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:51:37.526 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:51:37.526 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:51:37.526 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:51:37.527 DEBUG 24220 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:51:37.527 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:54:00.702 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:54:00.703 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:54:00.705 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:54:00.705  INFO 24220 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 18:54:00.705  INFO 24220 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:54:02.751 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:54:02.752 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:54:02.752 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:54:02.752 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:54:02.753 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:54:02.753 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:59:48.066 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 18:59:48.066 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 18:59:48.068 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 18:59:48.068  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 18:59:48.068  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 18:59:48.290 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 18:59:48.290 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 18:59:48.290 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 18:59:48.290 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 18:59:48.291 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 18:59:48.291 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 18:59:52.059 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 18:59:52.059 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 18:59:52.060 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 18:59:52.060 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 18:59:52.066 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 18:59:52.066 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:59:52.067 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 18:59:52.068 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:59:52.068 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:59:52.069 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 18:59:52.070 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:59:52.072 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:59:52.072 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 18:59:52.073 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:59:52.074 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:59:52.074 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 18:59:52.075 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:59:52.076 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:59:52.077 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 18:59:52.078 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:59:52.079 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:59:52.079 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 18:59:52.082 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:59:52.084 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 18:59:52.084 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 18:59:52.085 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 18:59:52.086 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 18:59:52.086 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 18:59:52.087 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:00:22.529 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:00:22.529 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:00:22.530 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:00:22.531  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 19:00:22.531  INFO 24220 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:00:22.766 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:00:22.766 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:00:22.766 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:00:22.766 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:00:22.767 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:00:22.767 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:00:26.429 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:00:26.429 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:00:26.431 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:00:26.431 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:00:26.434 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 19:00:26.436 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:00:26.438 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:00:26.441 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:00:26.442 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:00:26.442 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:00:26.444 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:00:26.444 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:00:26.444 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:00:26.446 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:00:26.447 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:00:26.447 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:00:26.449 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:00:26.449 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:00:26.450 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:00:26.450 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:00:26.451 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:00:26.451 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:00:26.453 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:00:26.456 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:00:26.457 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:00:26.458 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:00:26.459 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:00:26.459 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:00:26.459 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:01:50.619 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:01:50.620 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:01:50.620 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:01:50.621  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 19:01:50.621  INFO 24220 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:01:50.909 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:01:50.909 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:01:50.909 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:01:50.909 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:01:50.910 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:01:50.910 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:01:54.191 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:01:54.191 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:01:54.192 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:01:54.192 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:01:54.196 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 19:01:54.198 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:01:54.198 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:01:54.201 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:01:54.202 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:01:54.202 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:01:54.203 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:01:54.204 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:01:54.204 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:01:54.204 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:01:54.205 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:01:54.205 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:01:54.206 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:01:54.207 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:01:54.207 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:01:54.208 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:01:54.209 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:01:54.209 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:01:54.210 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:01:54.210 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:01:54.210 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:01:54.211 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:01:54.212 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:01:54.212 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:01:54.212 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:02:35.623 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:02:35.623 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:02:35.625 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:02:35.626  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 19:02:35.626  INFO 24220 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:02:35.929 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:02:35.929 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:02:35.931 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:02:35.932 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:02:35.940 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 19:02:35.942 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:02:35.943 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:02:35.945 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:02:35.946 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:02:35.946 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:02:35.947 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:02:35.948 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:02:35.949 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:02:35.950 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:02:35.951 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:02:35.952 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:02:35.953 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:02:35.958 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:02:35.959 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:02:35.960 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:02:35.961 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:02:35.962 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:02:35.964 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:02:35.965 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:02:35.965 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:02:35.967 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:02:35.968 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:02:35.968 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:02:35.969 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:02:40.007 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:02:40.008 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:02:40.008 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:02:40.008 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:02:40.009 DEBUG 24220 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:02:40.009 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:03:01.210 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:03:01.210 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:03:01.212 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:03:01.212  INFO 24220 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 19:03:01.212  INFO 24220 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:03:01.537 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:03:01.537 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:03:01.537 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:03:01.537 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:03:01.538 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:03:01.539 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:03:04.038 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:03:04.039 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:03:04.040 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:03:04.040 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:03:04.043 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 19:03:04.043 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:03:04.044 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:03:04.045 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:03:04.046 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:03:04.046 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:03:04.049 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:03:04.050 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:03:04.050 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:03:04.051 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:03:04.051 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:03:04.051 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:03:04.052 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:03:04.053 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:03:04.054 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:03:04.055 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:03:04.055 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:03:04.056 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:03:04.056 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:03:04.057 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:03:04.057 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:03:04.058 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:03:04.059 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:03:04.059 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:03:04.059 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:04:05.150 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:04:05.151 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:04:05.153 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:04:05.153  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 19:04:05.154  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:04:05.445 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:04:05.445 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:04:05.445 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:04:05.445 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:04:05.446 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:04:05.446 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:04:08.546 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:04:08.546 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:04:08.549 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:04:08.550 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:04:08.554 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 7
2020-04-08 19:04:08.554 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:04:08.554 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:04:08.556 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:04:08.556 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:04:08.557 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:04:08.558 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:04:08.559 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:04:08.559 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:04:08.560 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:04:08.561 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:04:08.561 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:04:08.562 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:04:08.563 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:04:08.563 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:04:08.564 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:04:08.567 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:04:08.567 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:04:08.568 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:04:08.569 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:04:08.569 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:04:08.572 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:04:08.574 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:04:08.574 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:04:08.575 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:05:16.255 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:05:16.255 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:05:16.255 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:05:16.255 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:05:16.256 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:05:16.256 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:05:36.221 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 19:05:36.229 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-08 19:05:36.22(Timestamp), 2020-04-08 19:05:36.22(Timestamp), 1(Integer)
2020-04-08 19:05:36.235 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 19:05:36.236 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 19:05:36.236 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 16(Long), 1(Long)
2020-04-08 19:05:36.237 DEBUG 24220 --- [http-nio-8888-exec-1] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 19:05:53.540 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 19:05:53.542 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-04-08 19:05:53.54(Timestamp), 2020-04-08 19:05:53.54(Timestamp), 1(Integer)
2020-04-08 19:05:53.546 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 19:05:53.547 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 19:05:53.547 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 17(Long), 1(Long)
2020-04-08 19:05:53.547 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 19:05:57.657 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 19:05:57.658 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-08 19:05:57.656(Timestamp), 2020-04-08 19:05:57.656(Timestamp), 1(Integer)
2020-04-08 19:05:57.662 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 19:05:57.663 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 19:05:57.664 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 18(Long), 1(Long)
2020-04-08 19:05:57.665 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 19:06:20.333 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==>  Preparing: INSERT INTO t_article ( title, summary, content, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-08 19:06:20.335 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : ==> Parameters: 第3章	认识Mybatis核心组件(String), (String), <h1 cid="n0" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 2.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.2; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;">1、持久层的概念和MyBatis的特点<br></h1><p cid="n3" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">持久层可以将业务数据存储到磁盘，具有长期存储能力。</span></p><p cid="n4" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis成功的原因：</span></p><ul cid="n5" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n6" mdtype="list_item" style="position: relative;"><p cid="n7" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</span></p></li><li cid="n8" mdtype="list_item" style="position: relative;"><p cid="n9" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</span></p></li><li cid="n10" mdtype="list_item" style="position: relative;"><p cid="n11" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</span></p></li></ul><h2 cid="n12" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">2、MyBatis的核心组件</span></h2><p cid="n13" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">Mybatis的核心组件分为4个部分：</span></p><ul cid="n14" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n15" mdtype="list_item" style="position: relative;"><p cid="n16" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">（构造器）:它会根据配置或者代码来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，采用的是分步构建的建造者模式。</span></p></li><li cid="n17" mdtype="list_item" style="position: relative;"><p cid="n18" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">（工厂接口）：依靠它来生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">，使用的是工厂模式。</span></p></li><li cid="n19" mdtype="list_item" style="position: relative;"><p cid="n20" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</span></p></li><li cid="n21" mdtype="list_item" style="position: relative;"><p cid="n22" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQL Mapper</code></span><span md-inline="plain">（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</span></p></li></ul><p cid="n23" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis核心组件如图1所示:</span></p><p cid="n24" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n25" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default; transition: background 0.5s linear 0s; background: var(--rawblock-edit-panel-bd);"><center>图1 MyBatis核心组件</center></div><span style="position: absolute;"></span></div><h2 cid="n26" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h2><p cid="n27" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">为了生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，MyBatis提供了构造器</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryBuilder</code></span><span md-inline="plain">，它提供了一个类</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">作为引导类，采用了</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">builder</code></span><span md-inline="plain">模式，具体的分步则是在</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类中完成。</span></p><p cid="n28" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Configuration</code></span><span md-inline="plain">类对象构建整个MyBatis的上下文。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">是一个接口，有两个实现类，一般由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">DefaultSqlSessionFactory</code></span><span md-inline="plain">去实现，它们之间的关系如图2所示：</span></p><p cid="n29" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><div spellcheck="false" cid="n30" mdtype="html_block" style="margin-top: 1rem; margin-bottom: 1rem; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span style="position: absolute;"></span><div tabindex="-1" style="min-height: 20px; cursor: default;"><center>图1 SqlSessionFactory与其实现类</center></div><span style="position: absolute;"></span></div><h4 cid="n31" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.25em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">3.1、使用XML构建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h4><p cid="n32" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中的XML分为两类：</span></p><ul cid="n33" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n34" mdtype="list_item" style="position: relative;"><p cid="n35" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</span></p></li><li cid="n36" mdtype="list_item" style="position: relative;"><p cid="n37" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">一类是映射文件，用来配置映射关系、SQL、参数等信息</span></p></li></ul><p cid="n38" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建一份简易的基础配置文件，我们把它命名为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n39" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE configuration</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--别名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">typeAlias</span> <span style="color: rgb(0, 0, 204);">alias</span>=<span style="color: rgb(170, 17, 17);">"role"</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.pojo.Role"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">typeAliases</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--数据库环境--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environments</span> <span style="color: rgb(0, 0, 204);">default</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">environment</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"development"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">transactionManager</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"JDBC"</span><span style="color: rgb(17, 119, 0);">&gt;&lt;/</span><span style="color: rgb(17, 119, 0);">transactionManager</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">dataSource</span> <span style="color: rgb(0, 0, 204);">type</span>=<span style="color: rgb(170, 17, 17);">"POOLED"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"driver"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"com.mysql.jdbc.Driver"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"url"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"jdbc:mysql://localhost:3306/ssm_learn/"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"username"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"root"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">property</span> <span style="color: rgb(0, 0, 204);">name</span>=<span style="color: rgb(170, 17, 17);">"password"</span> <span style="color: rgb(0, 0, 204);">value</span>=<span style="color: rgb(170, 17, 17);">"1234"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">dataSource</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environment</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">environments</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">&lt;!--映射文件--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mappers</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">configuration</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><p cid="n40" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">生成</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n41" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">class</span> <span style="color: rgb(0, 0, 255);">TestMyBatis</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">SqlSessionFactory</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 136, 85);">String</span> <span style="color: rgb(0, 0, 0);">resource</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(170, 17, 17);">"mybatis-config.xml"</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">InputStream</span> <span style="color: rgb(0, 0, 0);">inputStream</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span cm-text=""></span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Test</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 136, 85);">void</span> <span style="color: rgb(0, 0, 0);">testSqlSessionFactory</span>() {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//读取mybatis-config.xml</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">inputStream</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">Resources</span>.<span style="color: rgb(0, 0, 0);">getResourceAsStream</span>(<span style="color: rgb(0, 0, 0);">resource</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSessionFactory</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(119, 0, 136);">new</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactoryBuilder</span>().<span style="color: rgb(0, 0, 0);">build</span>(<span style="color: rgb(0, 0, 0);">inputStream</span>);</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  } <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">IOException</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">e</span>.<span style="color: rgb(0, 0, 0);">printStackTrace</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n42" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h2><p cid="n43" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">在MyBatis中，</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">是其核心接口，作用类似于</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">JDBC</code></span><span md-inline="plain">中的</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Connnection</code></span><span md-inline="plain">对象，代表一个连接资源的启用。</span></p><p cid="n44" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">具体而言，它的作用有3个：</span></p><ul cid="n45" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n46" mdtype="list_item" style="position: relative;"><p cid="n47" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">获取Mapper接口。</span></p></li><li cid="n48" mdtype="list_item" style="position: relative;"><p cid="n49" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">发送SQL给数据库。</span></p></li><li cid="n50" mdtype="list_item" style="position: relative;"><p cid="n51" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">控制数据库事务。</span></p></li></ul><p cid="n52" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">创建方法如下：</span></p><pre spellcheck="false" lang="java" cid="n53" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">SqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span></pre><p cid="n54" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">控制数据库事务的方法，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n55" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(0, 0, 0);">SqlSession</span> <span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(34, 17, 153);">null</span>;</span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">try</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//打开SqlSession会话</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">=</span> <span style="color: rgb(0, 0, 0);">sqlSessionFactory</span>.<span style="color: rgb(0, 0, 0);">openSession</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//some code...</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">commit</span>();<span style="color: rgb(170, 85, 0);">//提交事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">catch</span> (<span style="color: rgb(0, 0, 0);">Exception</span> <span style="color: rgb(0, 0, 0);">e</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">rollback</span>();<span style="color: rgb(170, 85, 0);">//回滚事务</span></span><br><span role="presentation" style="padding-right: 0.1px;">} <span style="color: rgb(119, 0, 136);">finally</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(170, 85, 0);">//在finally语句中确保资源被顺利关闭</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">if</span> (<span style="color: rgb(0, 0, 0);">sqlSession</span> <span style="color: rgb(152, 26, 26);">!=</span> <span style="color: rgb(34, 17, 153);">null</span>) {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 0, 0);">sqlSession</span>.<span style="color: rgb(0, 0, 0);">close</span>();</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h2 cid="n56" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5、映射器</span></h2><p cid="n57" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</span></p><ul cid="n58" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n59" mdtype="list_item" style="position: relative;"><p cid="n60" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">描述映射规则</span></p></li><li cid="n61" mdtype="list_item" style="position: relative;"><p cid="n62" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</span></p></li><li cid="n63" mdtype="list_item" style="position: relative;"><p cid="n64" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">配置缓存</span></p></li><li cid="n65" mdtype="list_item" style="position: relative;"><p cid="n66" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">提供动态SQL</span></p></li></ul><p cid="n67" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</span></p><h3 cid="n68" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.1、用XML实现映射器</span></h3><p cid="n69" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">定义接口，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n70" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;?xml</span> <span style="color: rgb(85, 85, 85);">version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(85, 85, 85);">&lt;!DOCTYPE mapper</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">namespace</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper"</span><span style="color: rgb(17, 119, 0);">&gt;</span><span style="color: rgb(170, 85, 0);">&lt;!--namespace对应接口的全限定名--&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">select</span> <span style="color: rgb(0, 0, 204);">id</span>=<span style="color: rgb(170, 17, 17);">"getRole"</span> <span style="color: rgb(0, 0, 204);">parameterType</span>=<span style="color: rgb(170, 17, 17);">"long"</span> <span style="color: rgb(0, 0, 204);">resultType</span>=<span style="color: rgb(170, 17, 17);">"role"</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; select id,role_name as roleName,note from t_role where id = #{id}</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; <span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">select</span><span style="color: rgb(17, 119, 0);">&gt;</span></span><br><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;/</span><span style="color: rgb(17, 119, 0);">mapper</span><span style="color: rgb(17, 119, 0);">&gt;</span></span></pre><ul cid="n71" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n72" mdtype="list_item" style="position: relative;"><p cid="n73" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">mapper中namespace的值对应于所映射接口的全限定名</span></p></li><li cid="n74" mdtype="list_item" style="position: relative;"><p cid="n75" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</span></p></li><li cid="n76" mdtype="list_item" style="position: relative;"><p cid="n77" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="escape">#</span><span md-inline="plain">{id}表示传递进去的参数</span></p></li></ul><p cid="n78" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</span></p><h3 cid="n79" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.2、用注解实现映射器</span></h3><pre spellcheck="false" lang="java" cid="n80" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(119, 0, 136);">interface</span> <span style="color: rgb(0, 0, 255);">RoleMapper2</span> {</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(85, 85, 85);">@Select</span>(<span style="color: rgb(170, 17, 17);">"select id, role_name as roleName, note from t_role where id = #{id}"</span>)</span><br><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span style="color: rgb(119, 0, 136);">public</span> <span style="color: rgb(0, 0, 0);">Role</span> <span style="color: rgb(0, 0, 0);">getRole</span>(<span style="color: rgb(0, 136, 85);">Long</span> <span style="color: rgb(0, 0, 0);">id</span>);</span><br><span role="presentation" style="padding-right: 0.1px;">}</span></pre><h3 cid="n81" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.3、对比XML方式和注解方式实现映射器</span></h3><p cid="n82" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</span></p><p cid="n83" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">这个接口也可以在XML中定义，例如只需将</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">中配置XML语句：</span></p><pre spellcheck="false" lang="xml" cid="n84" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">resource</span>=<span style="color: rgb(170, 17, 17);">"com/ssm/learn/chapter3/mapper/RoleMapper.xml"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n85" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">修改成下面的形式即可：</span></p><pre spellcheck="false" lang="xml" cid="n86" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;"><span role="presentation" style="padding-right: 0.1px;"><span style="color: rgb(17, 119, 0);">&lt;</span><span style="color: rgb(17, 119, 0);">mapper</span> <span style="color: rgb(0, 0, 204);">class</span>=<span style="color: rgb(170, 17, 17);">"com.ssm.learn.chapter3.mapper.RoleMapper2"</span><span style="color: rgb(17, 119, 0);">/&gt;</span></span></pre><p cid="n87" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">也可以使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">configuration</code></span><span md-inline="plain">对象注册这个接口，比如：</span></p><pre spellcheck="false" lang="java" cid="n88" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">configuration.addMapper(RoleMapper2.class)；</pre><h3 cid="n89" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span><span md-inline="plain">发送SQL</span></h3><pre spellcheck="false" lang="java" cid="n90" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);</pre><p cid="n91" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">selectOne</code></span><span md-inline="plain">方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">getRole</code></span><span md-inline="plain">的SQL，则可以简写为：</span></p><pre spellcheck="false" lang="java" cid="n92" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">Role role = (Role)sqlSession.selectOne("getRole", 1L);</pre><h3 cid="n93" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.5、用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span><span md-inline="plain">接口发送SQL</span></h3><p cid="n94" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">还可以获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口发送SQL，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n95" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);</pre><p cid="n96" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</span></p><h3 cid="n97" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">5.6、对比两种发送SQL的方式</span></h3><ul cid="n98" mdtype="list" style="margin-top: 0.8em; margin-bottom: 0.8em; margin-left: 0px; padding-left: 30px; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><li cid="n99" mdtype="list_item" style="position: relative;"><p cid="n100" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">直接发送</span></p></li><li cid="n101" mdtype="list_item" style="position: relative;"><p cid="n102" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0px; margin-bottom: 0.5rem; white-space: pre-wrap; position: relative;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">获取</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口，再通过</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">发送</span></p></li></ul><p cid="n103" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程可以消除</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">带来的功能性代码，提高可读性。</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">需要</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SQLid</code></span><span md-inline="plain">，晦涩难懂，而</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Mapper</code></span><span md-inline="plain">接口编程。</span></p><h2 cid="n104" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6、生命周期</span></h2><p cid="n105" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">所谓生命周期就是每一个对象应该存活的时间。</span></p><h3 cid="n106" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.1、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactoryBuilder</code></span></h3><p cid="n107" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其作用在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，创建成功后就失去作用，所以它只能存在于创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">的方法中，而不能让其长期存在。</span></p><h3 cid="n108" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.2、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSessionFactory</code></span></h3><p cid="n109" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">可以被认为是数据库连接池，其作用是创建</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</span></p><h3 cid="n110" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.3、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">SqlSession</code></span></h3><p cid="n111" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">，否则可能会导致数据库资源耗尽。</span></p><h3 cid="n112" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.5em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.43; cursor: text; white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">6.4、</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: inherit;">Mapper</code></span></h3><p cid="n113" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">它由</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">创建，所以它的生命周期至多和</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSession</code></span><span md-inline="plain">保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</span></p><h2 cid="n114" mdtype="heading" style="break-after: avoid-page; break-inside: avoid; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom: 1px solid rgb(238, 238, 238); white-space: pre-wrap; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;"><span md-inline="plain">7、实例</span></h2><p cid="n115" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">项目结构如图：</span></p><p cid="n116" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="image" style="min-width: 10px; min-height: 10px; position: relative; word-break: break-all; font-family: monospace; display: inline-block; width: 800px;"></span></p><p cid="n117" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">log4j.properties</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="properties" cid="n118" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</pre><p cid="n119" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Role</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n120" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}</pre><p cid="n121" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper</code></span><span md-inline="plain">接口，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n122" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}</pre><p cid="n123" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">RoleMapper.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n124" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;
&lt;mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id="insertRole" parameterType="role"&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id="deleteRole" parameterType="long"&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id="updateRole" parameterType="role"&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id="getRole" parameterType="long" resultType="role"&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id="findRoles" parameterType="string" resultType="role"&gt;
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    &lt;/select&gt;
&lt;/mapper&gt;</pre><p cid="n125" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactoryUtils</code></span><span md-inline="plain">工具类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n126" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}</pre><p cid="n127" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">synchronized</code></span><span md-inline="plain">关键字加锁，主要是防止在多线程中多次实例化</span><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">SqlSessionFactory</code></span><span md-inline="plain">对象，保证唯一性。</span></p><p cid="n128" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">mybatis-config.xml</code></span><span md-inline="plain">文件，代码如下：</span></p><pre spellcheck="false" lang="xml" cid="n129" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default="development"&gt;
        &lt;environment id="development"&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type="POOLED"&gt;&lt;!--type="POOLED"表示采用MyBatis内部连接池--&gt;
                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;
                &lt;property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/&gt;
                &lt;property name="username" value="root"/&gt;
                &lt;property name="password" value="1234"/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;</pre><p cid="n130" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="code" spellcheck="false"><code style="font-family: var(--monospace); vertical-align: initial; border: 1px solid rgb(231, 234, 237); background-color: rgb(243, 244, 244); padding: 0px 2px; font-size: 0.9em;">Chapter3Main</code></span><span md-inline="plain">类，代码如下：</span></p><pre spellcheck="false" lang="java" cid="n131" mdtype="fences" style="overflow: visible; font-family: var(--monospace); font-size: 0.9em; break-inside: avoid; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit; color: rgb(51, 51, 51); position: relative !important;">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}</pre><p cid="n132" mdtype="paragraph" style="line-height: inherit; orphans: 4; margin-top: 0.8em; margin-bottom: 0.8em; white-space: pre-wrap; position: relative; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Clear Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 16px;"><span md-inline="plain">本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</span></p>(String), 0(Integer), 0(Integer), 0(Integer), true(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-04-08 19:06:20.333(Timestamp), 2020-04-08 19:06:20.333(Timestamp), 1(Integer)
2020-04-08 19:06:20.340 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.insert        : <==    Updates: 1
2020-04-08 19:06:20.341 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-04-08 19:06:20.341 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : ==> Parameters: 19(Long), 1(Long)
2020-04-08 19:06:20.341 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.ArticleTagMapper.batchInsert     : <==    Updates: 1
2020-04-08 19:06:33.539 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:06:33.539 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:06:33.540 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:06:33.540 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:06:33.546 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:06:33.547 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.547 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:06:33.549 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.549 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.550 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:06:33.551 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.551 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.551 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:06:33.552 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.552 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.552 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:06:33.553 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.553 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.553 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:06:33.554 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.554 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.554 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:06:33.555 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.555 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.555 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:06:33.555 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.556 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.556 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:06:33.556 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.557 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.557 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:06:33.558 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.558 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.558 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:06:33.558 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.559 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:33.559 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:06:33.559 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:33.560 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:06:33.560 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:06:33.560 DEBUG 24220 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:06:42.754 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:06:42.754 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:06:42.755 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:06:42.756 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 10(Long)
2020-04-08 19:06:42.763 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 10
2020-04-08 19:06:42.764 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.764 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:06:42.766 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.766 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.766 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:06:42.767 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.768 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.768 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:06:42.770 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.771 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.771 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:06:42.772 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.773 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.773 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:06:42.773 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.774 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.774 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:06:42.774 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.775 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.775 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:06:42.776 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.776 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.776 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:06:42.778 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.778 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.779 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:06:42.780 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.780 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:42.780 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:06:42.782 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:42.782 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:06:42.782 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:06:42.783 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:06:43.873 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:06:43.873 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:06:43.874 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:06:43.874 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 10(Long), 10(Long)
2020-04-08 19:06:43.875 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 19:06:43.876 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:43.876 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:06:43.877 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:43.878 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:06:43.878 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:06:43.879 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:06:45.313 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:06:45.313 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:06:45.313 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:06:45.314 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 10(Long)
2020-04-08 19:06:45.323 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 10
2020-04-08 19:06:45.324 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.324 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:06:45.325 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.326 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.326 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:06:45.327 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.328 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.328 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:06:45.329 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.330 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.330 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:06:45.331 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.331 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.331 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:06:45.332 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.332 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.332 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:06:45.332 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.333 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.333 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:06:45.333 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.334 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.334 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:06:45.334 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.335 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.335 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:06:45.336 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.336 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:45.336 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:06:45.337 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:45.337 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:06:45.337 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:06:45.338 DEBUG 24220 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:06:47.091 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:06:47.091 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:06:47.091 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:06:47.092 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 10(Long), 10(Long)
2020-04-08 19:06:47.093 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 1
2020-04-08 19:06:47.093 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:47.094 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:06:47.095 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:47.095 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:06:47.095 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:06:47.096 DEBUG 24220 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:06:48.009 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:06:48.010 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:06:48.010 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:06:48.010 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 10(Long)
2020-04-08 19:06:48.017 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.A.selectPageWithExtra            : <==      Total: 10
2020-04-08 19:06:48.017 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.017 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:06:48.018 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.019 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.019 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:06:48.019 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.020 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.020 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:06:48.020 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.020 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.020 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:06:48.021 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.021 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.021 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:06:48.022 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.022 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.022 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:06:48.022 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.023 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.023 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:06:48.023 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.023 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.023 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:06:48.024 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.024 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.024 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:06:48.025 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.025 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:06:48.025 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:06:48.027 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:06:48.027 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:06:48.028 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:06:48.029 DEBUG 24220 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:19:54.838 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:19:54.838 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:19:54.840 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:19:54.841 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:19:54.845 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:19:54.846 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.846 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:19:54.847 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.848 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.849 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:19:54.850 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.851 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.851 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:19:54.851 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.852 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.852 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:19:54.853 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.853 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.853 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:19:54.854 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.854 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.854 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:19:54.855 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.855 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.855 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:19:54.855 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.856 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.856 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:19:54.856 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.856 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.856 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:19:54.857 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.857 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.857 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:19:54.858 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.858 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:19:54.858 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:19:54.858 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:19:54.859 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:19:54.859 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:19:54.859 DEBUG 24220 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:24:21.446 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:24:21.447 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:24:21.448 DEBUG 24220 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:24:21.448  INFO 24220 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 19:24:21.448  INFO 24220 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:25:40.626 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:25:40.626 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:25:40.627 DEBUG 24220 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:25:40.627  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 2ms, description = 初始化后台主页}
2020-04-08 19:25:40.627  INFO 24220 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:26:04.911  INFO 6784 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 6784 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 19:26:04.915 DEBUG 6784 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 19:26:04.915  INFO 6784 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 19:26:04.982  INFO 6784 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 19:26:04.983  INFO 6784 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 19:26:06.136  INFO 6784 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 19:26:06.143  INFO 6784 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 19:26:06.143  INFO 6784 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 19:26:06.211  INFO 6784 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 19:26:06.211  INFO 6784 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1228 ms
2020-04-08 19:26:06.381  INFO 6784 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 19:26:06.633  INFO 6784 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 19:26:07.495  INFO 6784 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 19:26:07.551  INFO 6784 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 19:26:07.693  INFO 6784 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 19:26:07.742  INFO 6784 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 19:26:07.745  INFO 6784 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.654 seconds (JVM running for 4.579)
2020-04-08 19:26:10.635  INFO 6784 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=90EEEBDCC6180AE02DF2660DAF8BF967] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 19:26:10.641  INFO 6784 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 19:26:10.641  INFO 6784 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 19:26:10.652  INFO 6784 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-04-08 19:26:11.220 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:26:11.236 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:26:11.250 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:26:11.253  INFO 6784 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 109ms, description = 初始化后台主页}
2020-04-08 19:26:11.254  INFO 6784 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:28:46.489 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:28:46.489 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:28:46.492 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:28:46.493  INFO 6784 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-08 19:28:46.493  INFO 6784 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:28:46.946 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:28:46.947 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:28:46.962 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:28:46.965 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:28:47.041 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:28:47.059 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.059 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:28:47.061 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.063 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.063 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:28:47.065 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.066 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.066 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:28:47.068 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.071 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.072 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:28:47.074 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.075 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.076 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:28:47.077 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.078 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.078 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:28:47.080 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.081 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.082 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:28:47.083 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.087 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.088 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:28:47.089 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.090 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.090 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:28:47.092 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.093 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.093 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:28:47.095 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.096 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:28:47.097 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:28:47.098 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:28:47.100 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:28:47.101 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:28:47.104 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:29:01.458 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:29:01.459 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:29:01.462 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:29:01.464  INFO 6784 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 19:29:01.464  INFO 6784 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:29:01.772 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:29:01.773 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:29:01.774 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:29:01.775 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:29:01.798 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:29:01.802 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.803 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:29:01.804 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.806 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.806 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:29:01.808 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.810 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.810 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:29:01.812 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.813 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.814 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:29:01.817 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.820 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.820 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:29:01.825 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.828 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.829 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:29:01.831 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.835 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.835 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:29:01.837 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.838 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.838 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:29:01.839 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.840 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.840 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:29:01.841 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.842 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.842 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:29:01.843 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.844 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:29:01.845 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:29:01.846 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:29:01.847 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:29:01.848 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:29:01.851 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:30:25.856 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:30:25.856 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:30:25.860 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:30:25.861  INFO 6784 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 19:30:25.861  INFO 6784 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:30:47.653 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:30:47.653 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:30:47.657 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:30:47.657  INFO 6784 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 19:30:47.657  INFO 6784 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:31:00.474 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:31:00.474 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:31:00.479 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:31:00.479  INFO 6784 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 19:31:00.479  INFO 6784 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:31:10.205 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:31:10.205 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:31:10.207 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:31:10.207  INFO 6784 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 19:31:10.207  INFO 6784 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:31:20.760 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:31:20.761 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:31:20.764 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:31:20.765  INFO 6784 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 19:31:20.766  INFO 6784 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:31:21.039 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:31:21.039 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:31:21.041 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:31:21.041 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:31:21.059 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:31:21.061 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.061 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:31:21.065 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.068 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.069 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:31:21.072 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.073 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.073 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:31:21.075 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.076 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.076 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:31:21.078 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.081 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.082 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:31:21.084 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.085 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.085 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:31:21.086 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.087 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.087 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:31:21.088 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.089 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.089 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:31:21.090 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.091 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.091 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:31:21.093 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.094 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.096 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:31:21.100 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.103 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:31:21.103 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:31:21.105 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:31:21.107 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:31:21.107 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:31:21.108 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:32:14.393 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:32:14.393 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:32:14.395 DEBUG 6784 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:32:14.396  INFO 6784 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 19:32:14.396  INFO 6784 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:32:14.704 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:32:14.705 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:32:14.707 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:32:14.708 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:32:14.727 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:32:14.730 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.730 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:32:14.732 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.738 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.739 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:32:14.741 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.743 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.743 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:32:14.746 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.747 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.747 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:32:14.749 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.751 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.752 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:32:14.754 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.756 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.756 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:32:14.758 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.760 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.761 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:32:14.763 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.764 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.764 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:32:14.766 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.767 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.767 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:32:14.769 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.771 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.771 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:32:14.774 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.776 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:14.777 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:32:14.779 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:14.782 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:32:14.783 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:32:14.786 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:32:34.448 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:32:34.449 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:32:34.451 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:32:34.451  INFO 6784 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 19:32:34.451  INFO 6784 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:32:34.772 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:32:34.772 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:32:34.774 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:32:34.775 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:32:34.791 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:32:34.792 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.792 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:32:34.793 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.794 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.795 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:32:34.798 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.800 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.801 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:32:34.802 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.804 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.804 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:32:34.806 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.806 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.807 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:32:34.808 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.809 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.809 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:32:34.811 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.815 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.816 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:32:34.818 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.819 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.820 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:32:34.821 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.822 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.822 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:32:34.823 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.824 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.824 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:32:34.825 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.826 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:32:34.826 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:32:34.827 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:32:34.831 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:32:34.832 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:32:34.833 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:33:12.559 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:33:12.560 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:33:12.561 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:33:12.562  INFO 6784 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 19:33:12.562  INFO 6784 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:33:12.878 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:33:12.878 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:33:12.880 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:33:12.880 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:33:12.894 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:33:12.896 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.896 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:33:12.899 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.901 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.901 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:33:12.905 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.907 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.908 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:33:12.918 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.921 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.922 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:33:12.925 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.926 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.926 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:33:12.927 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.928 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.929 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:33:12.930 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.931 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.931 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:33:12.932 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.933 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.933 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:33:12.934 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.935 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.936 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:33:12.940 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.941 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.942 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:33:12.943 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.944 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:33:12.945 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:33:12.946 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:33:12.947 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:33:12.947 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:33:12.948 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:33:15.744 DEBUG 6784 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:33:15.745 DEBUG 6784 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:33:15.746 DEBUG 6784 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:33:15.748 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:33:15.748 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:33:15.750 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:33:21.926 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:33:21.926 DEBUG 6784 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:33:21.926 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:33:21.926 DEBUG 6784 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:33:21.928 DEBUG 6784 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:33:21.929 DEBUG 6784 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:33:36.157 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:33:36.157 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:33:36.157 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:33:36.157 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:33:36.158 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:33:36.159 DEBUG 6784 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:35:59.384 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:35:59.384 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:35:59.386 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:35:59.387  INFO 6784 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 19:35:59.387  INFO 6784 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:35:59.638 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:35:59.638 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:35:59.640 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:35:59.640 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:35:59.654 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:35:59.654 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.655 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:35:59.657 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.658 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.658 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:35:59.659 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.660 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.660 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:35:59.662 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.665 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.665 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:35:59.667 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.668 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.668 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:35:59.669 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.670 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.671 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:35:59.672 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.672 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.673 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:35:59.675 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.676 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.676 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:35:59.677 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.679 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.680 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:35:59.682 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.683 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.683 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:35:59.684 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.685 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:35:59.685 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:35:59.686 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:35:59.688 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:35:59.689 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:35:59.691 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:36:01.541 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:36:01.541 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:36:01.541 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:36:01.541 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:36:01.543 DEBUG 6784 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:36:01.543 DEBUG 6784 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:36:09.903 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:36:09.903 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:36:09.904 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:36:09.904 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:36:09.905 DEBUG 6784 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:36:09.905 DEBUG 6784 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:47:44.855  INFO 13184 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 13184 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 19:47:44.857 DEBUG 13184 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 19:47:44.858  INFO 13184 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 19:47:44.907  INFO 13184 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 19:47:44.907  INFO 13184 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 19:47:46.051  INFO 13184 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 19:47:46.058  INFO 13184 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 19:47:46.058  INFO 13184 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 19:47:46.126  INFO 13184 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 19:47:46.126  INFO 13184 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1218 ms
2020-04-08 19:47:46.295  INFO 13184 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 19:47:46.571  INFO 13184 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 19:47:47.487  INFO 13184 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 19:47:47.545  INFO 13184 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 19:47:47.720  INFO 13184 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 19:47:47.768  INFO 13184 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 19:47:47.771  INFO 13184 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.54 seconds (JVM running for 4.64)
2020-04-08 19:47:52.817  INFO 13184 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 19:47:52.817  INFO 13184 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 19:47:52.826  INFO 13184 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-08 19:47:52.870 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 19:47:52.883 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 1(Long)
2020-04-08 19:47:52.895 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 0
2020-04-08 19:48:36.956  INFO 13184 --- [http-nio-8888-exec-2] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=90EEEBDCC6180AE02DF2660DAF8BF967] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 19:48:37.353 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:48:37.355 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:48:37.362 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:48:37.365  INFO 13184 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 71ms, description = 初始化后台主页}
2020-04-08 19:48:37.366  INFO 13184 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:48:37.826 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:48:37.827 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:48:37.835 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:48:37.837 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:48:37.839 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:48:37.846 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:48:43.010 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 19:48:43.011 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 19:48:43.019 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 19:48:43.020 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:48:43.084 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 19:48:43.098 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.099 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 19:48:43.101 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.102 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.102 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 19:48:43.103 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.104 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.104 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 19:48:43.105 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.106 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.106 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 19:48:43.109 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.110 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.110 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 19:48:43.113 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.115 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.115 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 19:48:43.116 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.117 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.117 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 19:48:43.118 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.119 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.120 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 19:48:43.120 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.121 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.122 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 19:48:43.123 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.125 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.126 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 19:48:43.127 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.131 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 19:48:43.131 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 19:48:43.133 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 19:48:43.135 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 19:48:43.135 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 19:48:43.136 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 19:48:45.181 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 19:48:45.182 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 19:48:45.186 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 19:48:45.347 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:48:45.347 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:48:45.347 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:48:45.347 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:48:45.349 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:48:45.350 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:54:12.797 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:54:12.797 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:54:12.799 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:54:12.800  INFO 13184 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 19:54:12.800  INFO 13184 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:54:12.833 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 19:54:12.834 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 19:54:12.837 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 19:54:13.217 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:54:13.218 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:54:13.220 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:54:13.221 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:54:13.222 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:54:13.225 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:54:18.452 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 19:54:18.452 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 19:54:18.454 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 19:54:18.455 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 19:54:18.458 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 19:54:18.460  INFO 13184 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 12ms, description = 分页查询用户}
2020-04-08 19:54:18.461  INFO 13184 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 19:54:21.747 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:54:21.747 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:54:21.748 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:54:21.748 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:54:21.750 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:54:21.750 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:54:27.619 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:54:27.620 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:54:27.621 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:54:27.622  INFO 13184 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 19:54:27.622  INFO 13184 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:54:28.025 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:54:28.025 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:54:28.025 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:54:28.025 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:54:28.028 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:54:28.028 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:55:23.415 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:55:23.416 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:55:23.420 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:55:23.420  INFO 13184 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 19:55:23.420  INFO 13184 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:55:23.786 DEBUG 13184 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:55:23.786 DEBUG 13184 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:55:23.786 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:55:23.787 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:55:23.788 DEBUG 13184 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:55:23.789 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 19:55:28.989 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 19:55:28.989 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 19:55:28.992 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 19:55:28.993  INFO 13184 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 19:55:28.993  INFO 13184 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 19:55:29.391 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 19:55:29.391 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 19:55:29.392 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 19:55:29.392 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 19:55:29.394 DEBUG 13184 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 19:55:29.394 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:01:15.895 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 20:01:15.895 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 20:01:15.897 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 20:01:15.897 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:01:15.913 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 20:01:15.914 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.914 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 20:01:15.916 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.917 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.917 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 20:01:15.918 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.919 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.919 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 20:01:15.921 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.921 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.922 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 20:01:15.923 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.926 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.926 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 20:01:15.927 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.930 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.930 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 20:01:15.933 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.936 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.937 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 20:01:15.938 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.940 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.941 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 20:01:15.944 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.945 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.945 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 20:01:15.947 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.948 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.948 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 20:01:15.949 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.950 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:01:15.950 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 20:01:15.951 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:01:15.951 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 20:01:15.952 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 20:01:15.952 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 20:01:16.877 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:01:16.878 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:01:16.879 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:08:05.702 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:08:05.702 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:08:05.705 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:08:05.706  INFO 13184 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 20:08:05.707  INFO 13184 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:08:05.739 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:08:05.740 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:08:05.743 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:08:06.132 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:08:06.132 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:08:06.133 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:08:06.133 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:08:06.134 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:08:06.135 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:10:21.574 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:10:21.574 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:10:21.576 DEBUG 13184 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:10:21.576  INFO 13184 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 20:10:21.576  INFO 13184 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:10:21.612 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:10:21.612 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:10:21.614 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:10:21.952 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:10:21.952 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:10:21.953 DEBUG 13184 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:10:21.953 DEBUG 13184 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:10:21.955 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:10:21.957 DEBUG 13184 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:10:43.606 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 20:10:43.606 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 20:10:43.608 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 20:10:43.608 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:10:43.611 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 20:10:43.612  INFO 13184 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 8ms, description = 分页查询用户}
2020-04-08 20:10:43.612  INFO 13184 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 20:10:47.248 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:10:47.248 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:10:47.248 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:10:47.248 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:10:47.253 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:10:47.253 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:12:26.131 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 20:12:26.132 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 20:12:26.133 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 20:12:26.133 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:12:26.139 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 20:12:26.140 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.140 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 20:12:26.142 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.143 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.143 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 20:12:26.145 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.145 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.145 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 20:12:26.147 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.147 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.148 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 20:12:26.149 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.149 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.150 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 20:12:26.151 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.152 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.152 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 20:12:26.153 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.155 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.155 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 20:12:26.157 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.158 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.158 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 20:12:26.159 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.160 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.161 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 20:12:26.164 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.164 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.165 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 20:12:26.166 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.167 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:12:26.167 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 20:12:26.168 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:12:26.169 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 20:12:26.169 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 20:12:26.170 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 20:12:30.519 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:12:30.520 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:12:30.521 DEBUG 13184 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:12:30.521  INFO 13184 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 20:12:30.521  INFO 13184 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:12:30.554 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:12:30.554 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:12:30.555 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:12:30.931 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:12:30.932 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:12:30.932 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:12:30.932 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:12:30.933 DEBUG 13184 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:12:30.934 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:12:33.177 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 20:12:33.178 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 20:12:33.179 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 20:12:33.179 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:12:33.180 DEBUG 13184 --- [http-nio-8888-exec-8] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 20:12:33.181  INFO 13184 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 5ms, description = 分页查询用户}
2020-04-08 20:12:33.181  INFO 13184 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 20:13:08.362 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:13:08.362 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:13:08.364 DEBUG 13184 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:13:08.366  INFO 13184 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 20:13:08.366  INFO 13184 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:13:08.392 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:13:08.392 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:13:08.394 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:13:08.639 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:13:08.639 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:13:08.640 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:13:08.640 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:13:08.640 DEBUG 13184 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:13:08.641 DEBUG 13184 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:13:10.926 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 20:13:10.926 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 20:13:10.928 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 20:13:10.928 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:13:10.929 DEBUG 13184 --- [http-nio-8888-exec-5] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 20:13:10.929  INFO 13184 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 4ms, description = 分页查询用户}
2020-04-08 20:13:10.929  INFO 13184 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 20:14:07.522  INFO 22832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 22832 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 20:14:07.529 DEBUG 22832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 20:14:07.529  INFO 22832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 20:14:07.591  INFO 22832 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 20:14:07.591  INFO 22832 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 20:14:09.515  INFO 22832 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 20:14:09.523  INFO 22832 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 20:14:09.524  INFO 22832 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 20:14:09.624  INFO 22832 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 20:14:09.624  INFO 22832 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2033 ms
2020-04-08 20:14:09.803  INFO 22832 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 20:14:10.301  INFO 22832 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 20:14:11.475  INFO 22832 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 20:14:11.557  INFO 22832 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 20:14:11.740  INFO 22832 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 20:14:11.802  INFO 22832 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 20:14:11.805  INFO 22832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 5.877 seconds (JVM running for 8.328)
2020-04-08 20:14:14.437  INFO 22832 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=90EEEBDCC6180AE02DF2660DAF8BF967] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 20:14:14.445  INFO 22832 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 20:14:14.445  INFO 22832 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 20:14:14.454  INFO 22832 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-08 20:14:15.167 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:14:15.190 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:14:15.207 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:14:15.210  INFO 22832 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 133ms, description = 初始化后台主页}
2020-04-08 20:14:15.211  INFO 22832 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:14:15.591 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 20:14:15.591 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 20:14:15.604 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 20:14:15.605 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:14:15.612 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 20:14:15.614  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 62ms, description = 分页查询用户}
2020-04-08 20:14:15.615  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 20:14:37.470 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:14:37.471 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:14:37.480 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:14:37.481  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 14ms, description = 初始化后台主页}
2020-04-08 20:14:37.481  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:14:38.023 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 20:14:38.023 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 20:14:38.028 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 20:14:38.029 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:14:38.037 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 20:14:38.038  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 16ms, description = 分页查询用户}
2020-04-08 20:14:38.038  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 20:14:50.583 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:14:50.584 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:14:50.590 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:14:50.592  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 12ms, description = 初始化后台主页}
2020-04-08 20:14:50.593  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:14:51.178 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-04-08 20:14:51.179 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 
2020-04-08 20:14:51.181 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-04-08 20:14:51.181 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:14:51.186 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysUserMapper.selectPage    : <==      Total: 15
2020-04-08 20:14:51.186  INFO 22832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.SysUserController.list, args = [1, 15], time = 9ms, description = 分页查询用户}
2020-04-08 20:14:51.187  INFO 22832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=100)
2020-04-08 20:15:01.952 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:15:01.953 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:15:01.958 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:15:01.962 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:15:01.963 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:15:01.966 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:15:03.748 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 20:15:03.748 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 20:15:03.750 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 20:15:03.750 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:15:03.799 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 20:15:03.811 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.812 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 20:15:03.813 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.814 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.814 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 20:15:03.815 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.816 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.816 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 20:15:03.817 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.819 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.819 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 20:15:03.821 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.823 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.823 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 20:15:03.826 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.827 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.827 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 20:15:03.829 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.830 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.830 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 20:15:03.831 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.832 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.832 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 20:15:03.833 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.834 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.834 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 20:15:03.835 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.837 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.837 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 20:15:03.838 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.839 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:15:03.840 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 20:15:03.843 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:15:03.844 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 20:15:03.844 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 20:15:03.845 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 20:15:12.137 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:15:12.137 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:15:12.140 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:15:12.313 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:15:12.313 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:15:12.313 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:15:12.313 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:15:12.316 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:15:12.316 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:15:41.353 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:15:41.353 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:15:41.357 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:15:41.358  INFO 22832 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 20:15:41.358  INFO 22832 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:15:41.395 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:15:41.396 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:15:41.399 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:15:41.800 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:15:41.800 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:15:41.800 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:15:41.800 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:15:41.802 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:15:41.803 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:17:00.275 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:17:00.277 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:17:00.279 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:17:00.280  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-08 20:17:00.280  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:17:00.306 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:17:00.306 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:17:00.313 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:17:00.706 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:17:00.706 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:17:00.707 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:17:00.708 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:17:00.711 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:17:00.712 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:22:42.797 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:22:42.797 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:22:42.798 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:22:42.798  INFO 22832 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 20:22:42.799  INFO 22832 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:22:42.990 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 20:22:42.992 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 20:22:42.995 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 20:22:42.996 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:22:43.018 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 20:22:43.020 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.020 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 20:22:43.022 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.025 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.026 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 20:22:43.028 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.030 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.030 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 20:22:43.032 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.033 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.033 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 20:22:43.034 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.037 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.038 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 20:22:43.039 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.046 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.046 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 20:22:43.048 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.049 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.049 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 20:22:43.050 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.050 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.050 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 20:22:43.051 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.052 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.052 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 20:22:43.054 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.056 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.056 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 20:22:43.061 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.064 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:22:43.064 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 20:22:43.066 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:22:43.067 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 20:22:43.067 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 20:22:43.069 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 20:22:46.948 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:22:46.948 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 20:22:46.952 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:22:47.097 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:22:47.098 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:22:47.098 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:22:47.098 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:22:47.099 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:22:47.100 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:25:08.204 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:25:08.205 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:25:08.208 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:25:08.208  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 20:25:08.208  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:25:08.230 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:25:08.230 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 20:25:08.232 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:25:08.502 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:25:08.502 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:25:08.502 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:25:08.502 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:25:08.506 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:25:08.507 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:25:15.980 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 20:25:15.980 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 20:25:15.981 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 20:25:15.981 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 20:25:15.990 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 20:25:15.991 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:15.991 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 20:25:15.993 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:15.994 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:15.994 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 20:25:15.994 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:15.995 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:15.995 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 20:25:15.996 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:15.996 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:15.996 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 20:25:15.997 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:15.998 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:15.998 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 20:25:15.999 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:15.999 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:15.999 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 20:25:16.000 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:16.001 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:16.001 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 20:25:16.003 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:16.006 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:16.006 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 20:25:16.007 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:16.008 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:16.008 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 20:25:16.009 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:16.010 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:16.010 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 20:25:16.011 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:16.012 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 20:25:16.012 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 20:25:16.013 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 20:25:16.014 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 20:25:16.014 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 20:25:16.014 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 20:25:17.669 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:25:17.669 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:25:17.677 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:25:17.850 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:25:17.850 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:25:17.850 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:25:17.850 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:25:17.852 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:25:17.853 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:26:50.971 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:26:50.971 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:26:50.975 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:26:50.975  INFO 22832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 20:26:50.975  INFO 22832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:26:51.025 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:26:51.026 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:26:51.029 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:26:51.500 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:26:51.500 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:26:51.501 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:26:51.501 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:26:51.502 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:26:51.502 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:27:00.021 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:27:00.022 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:27:00.024 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:27:00.024  INFO 22832 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 20:27:00.024  INFO 22832 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:27:00.051 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:27:00.051 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:27:00.052 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:27:00.355 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:27:00.355 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:27:00.355 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:27:00.355 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:27:00.356 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:27:00.357 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:27:43.578 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:27:43.578 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:27:43.581 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:27:43.582  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 20:27:43.582  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:27:43.657 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:27:43.657 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:27:43.659 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:27:44.206 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:27:44.206 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:27:44.206 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:27:44.206 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:27:44.209 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:27:44.209 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:28:12.740 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:28:12.740 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:28:12.741 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:28:12.743  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 20:28:12.743  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:28:12.802 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:28:12.802 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:28:12.804 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:28:13.183 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:28:13.183 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:28:13.183 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:28:13.183 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:28:13.185 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:28:13.185 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:28:52.833 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:28:52.834 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:28:52.836 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:28:52.836  INFO 22832 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 20:28:52.837  INFO 22832 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:28:52.880 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:28:52.880 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:28:52.884 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:28:53.303 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:28:53.304 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:28:53.305 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:28:53.305 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:28:53.305 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:28:53.308 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:29:35.008 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:29:35.009 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:29:35.012 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:29:35.012  INFO 22832 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 20:29:35.013  INFO 22832 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:29:35.060 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:29:35.061 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:29:35.063 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:29:35.485 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:29:35.485 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:29:35.486 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:29:35.487 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:29:35.487 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:29:35.489 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:29:48.077 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:29:48.078 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:29:48.080 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:29:48.080  INFO 22832 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 20:29:48.080  INFO 22832 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:29:48.116 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:29:48.116 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:29:48.118 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:29:48.523 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:29:48.524 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:29:48.524 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:29:48.524 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:29:48.526 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:29:48.526 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:30:05.038 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:30:05.038 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:30:05.040 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:30:05.041  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 20:30:05.041  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:30:05.070 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:30:05.070 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:30:05.072 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:30:05.407 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:30:05.408 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:30:05.408 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:30:05.408 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:30:05.410 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:30:05.411 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:30:16.043 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:30:16.044 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:30:16.047 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:30:16.048  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 20:30:16.048  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:30:16.089 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:30:16.090 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:30:16.091 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:30:16.507 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:30:16.507 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:30:16.508 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:30:16.508 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:30:16.509 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:30:16.509 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:31:19.657 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:31:19.657 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:31:19.659 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:31:19.659  INFO 22832 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 20:31:19.659  INFO 22832 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:31:19.703 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:31:19.703 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:31:19.706 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:31:20.173 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:31:20.174 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:31:20.174 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:31:20.174 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:31:20.175 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:31:20.177 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:31:35.320 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:31:35.320 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:31:35.323 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:31:35.324  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 20:31:35.324  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:31:35.382 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:31:35.382 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:31:35.384 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:31:35.815 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:31:35.815 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:31:35.816 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:31:35.816 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:31:35.816 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:31:35.817 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:31:49.613 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:31:49.613 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:31:49.615 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:31:49.615  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 20:31:49.615  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:31:49.649 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:31:49.649 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:31:49.650 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:31:49.982 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:31:49.982 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:31:49.982 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:31:49.982 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:31:49.983 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:31:49.984 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 20:32:06.756 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 20:32:06.757 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 20:32:06.758 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 20:32:06.758  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 20:32:06.758  INFO 22832 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 20:32:06.794 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 20:32:06.795 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 20:32:06.796 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 20:32:07.256 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 20:32:07.256 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 20:32:07.257 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 20:32:07.257 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 20:32:07.258 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 20:32:07.258 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:17:08.516 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:17:08.517 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:17:08.519 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:17:08.521  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 21:17:08.521  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:17:08.564 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:17:08.564 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:17:08.566 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:17:08.877 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:17:08.877 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:17:08.877 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:17:08.878 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:17:08.879 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:17:08.879 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:17:29.106 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:17:29.107 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:17:29.108 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:17:29.108  INFO 22832 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 21:17:29.108  INFO 22832 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:17:29.151 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:17:29.151 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:17:29.153 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:17:29.466 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:17:29.467 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:17:29.467 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:17:29.467 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:17:29.468 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:17:29.469 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:17:56.685 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:17:56.685 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:17:56.688 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:17:56.688  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 21:17:56.688  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:17:56.742 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:17:56.742 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:17:56.744 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:17:57.150 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:17:57.150 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:17:57.150 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:17:57.150 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:17:57.152 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:17:57.152 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:18:55.585 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:18:55.586 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:18:55.587 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:18:55.587  INFO 22832 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 21:18:55.587  INFO 22832 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:18:55.619 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:18:55.619 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:18:55.620 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:18:55.919 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:18:55.919 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:18:55.920 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:18:55.920 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:18:55.921 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:18:55.922 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:19:10.476 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:19:10.476 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:19:10.479 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:19:10.479  INFO 22832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 21:19:10.479  INFO 22832 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:19:10.526 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:19:10.526 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:19:10.527 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:19:10.924 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:19:10.924 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:19:10.924 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:19:10.925 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:19:10.926 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:19:10.926 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:19:26.870 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:19:26.871 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:19:26.873 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:19:26.873  INFO 22832 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 21:19:26.873  INFO 22832 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:19:26.909 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:19:26.910 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:19:26.911 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:19:27.309 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:19:27.309 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:19:27.310 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:19:27.310 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:19:27.311 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:19:27.311 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:20:34.455 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:20:34.455 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:20:34.458 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:20:34.458  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 21:20:34.459  INFO 22832 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:20:34.506 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:20:34.506 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:20:34.508 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:20:35.280 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:20:35.280 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:20:35.280 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:20:35.280 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:20:35.281 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:20:35.281 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:22:33.844 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:22:33.844 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:22:33.846 DEBUG 22832 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:22:33.846  INFO 22832 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 21:22:33.847  INFO 22832 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:22:33.901 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:22:33.901 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:22:33.903 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:22:34.382 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:22:34.382 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:22:34.382 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:22:34.382 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:22:34.383 DEBUG 22832 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:22:34.384 DEBUG 22832 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:29:55.321 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:29:55.322 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:29:55.323 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:29:55.323  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 21:29:55.324  INFO 22832 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:29:55.362 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:29:55.363 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:29:55.367 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:29:55.777 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:29:55.777 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:29:55.778 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:29:55.778 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:29:55.778 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:29:55.780 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:30:09.244 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 21:30:09.244 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 21:30:09.246 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 21:30:09.246 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 21:30:09.253 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 21:30:09.254 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.254 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:30:09.255 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.256 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.256 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:30:09.257 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.259 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.260 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 21:30:09.262 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.263 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.263 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 21:30:09.264 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.265 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.265 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 21:30:09.266 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.267 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.267 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 21:30:09.268 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.268 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.269 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 21:30:09.269 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.270 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.270 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 21:30:09.271 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.272 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.272 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 21:30:09.273 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.274 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.274 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 21:30:09.275 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.276 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:09.276 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 21:30:09.278 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:09.280 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 21:30:09.281 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 21:30:09.282 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 21:30:10.761 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:30:10.761 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:30:10.763 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:30:10.932 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:30:10.933 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:30:10.933 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:30:10.933 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:30:10.934 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:30:10.934 DEBUG 22832 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:30:22.636 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:30:22.637 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 11(Long)
2020-04-08 21:30:22.641 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:30:22.812 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:30:22.812 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:30:22.812 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:30:22.812 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:30:22.814 DEBUG 22832 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:30:22.814 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:30:51.628 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:30:51.628 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:30:51.629 DEBUG 22832 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:30:51.630  INFO 22832 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 3ms, description = 初始化后台主页}
2020-04-08 21:30:51.630  INFO 22832 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:30:51.871 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 21:30:51.872 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 21:30:51.873 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 21:30:51.874 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 21:30:51.881 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 21:30:51.882 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.882 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:30:51.886 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.887 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.888 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:30:51.890 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.891 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.891 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 21:30:51.891 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.892 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.892 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 21:30:51.893 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.894 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.894 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 21:30:51.895 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.895 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.895 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 21:30:51.896 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.897 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.897 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 21:30:51.899 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.900 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.901 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 21:30:51.903 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.905 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.905 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 21:30:51.906 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.907 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.907 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 21:30:51.907 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.908 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:30:51.908 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 21:30:51.908 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:30:51.909 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 21:30:51.909 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 21:30:51.910 DEBUG 22832 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 21:30:57.731 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:30:57.732 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 11(Long)
2020-04-08 21:30:57.734 DEBUG 22832 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:30:57.905 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:30:57.905 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:30:57.905 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:30:57.905 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:30:57.906 DEBUG 22832 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:30:57.907 DEBUG 22832 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:38:08.251  INFO 7272 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 7272 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 21:38:08.255 DEBUG 7272 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 21:38:08.255  INFO 7272 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 21:38:08.322  INFO 7272 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 21:38:08.322  INFO 7272 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 21:38:09.428  INFO 7272 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 21:38:09.436  INFO 7272 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 21:38:09.437  INFO 7272 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 21:38:09.508  INFO 7272 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 21:38:09.509  INFO 7272 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1187 ms
2020-04-08 21:38:09.691  INFO 7272 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 21:38:09.955  INFO 7272 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 21:38:10.791  INFO 7272 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 21:38:10.850  INFO 7272 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 21:38:10.996  INFO 7272 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 21:38:11.044  INFO 7272 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 21:38:11.047  INFO 7272 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.536 seconds (JVM running for 4.484)
2020-04-08 21:38:13.719  INFO 7272 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=90EEEBDCC6180AE02DF2660DAF8BF967] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 21:38:13.726  INFO 7272 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 21:38:13.726  INFO 7272 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 21:38:13.734  INFO 7272 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-04-08 21:38:14.388 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:38:14.409 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:38:14.430 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:38:14.434  INFO 7272 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 114ms, description = 初始化后台主页}
2020-04-08 21:38:14.435  INFO 7272 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:38:14.546 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:38:14.548 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 11(Long)
2020-04-08 21:38:14.555 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:38:14.559 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:14.560 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 21:38:14.563 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:14.987 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:38:14.988 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:38:14.993 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:38:14.994 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:38:14.994 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:38:14.996 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:38:18.466 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 21:38:18.468 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 21:38:18.477 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 21:38:18.477 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 21:38:18.518 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 21:38:18.531 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.531 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:38:18.532 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.533 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.533 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:38:18.534 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.535 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.535 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 21:38:18.536 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.537 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.537 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 21:38:18.538 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.541 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.541 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 21:38:18.544 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.545 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.545 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 21:38:18.546 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.547 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.548 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 21:38:18.549 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.550 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.550 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 21:38:18.551 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.552 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.552 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 21:38:18.554 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.555 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.557 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 21:38:18.559 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.561 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:18.561 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 21:38:18.563 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:18.564 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 21:38:18.564 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 21:38:18.565 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 21:38:22.006 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:38:22.007 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:38:22.010 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:38:22.011 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:38:22.011 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:38:22.013 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:38:22.192 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:38:22.192 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:38:22.193 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:38:22.193 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:38:22.196 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:38:22.197 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:39:10.340 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:39:10.340 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:39:10.342 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:39:10.343  INFO 7272 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 21:39:10.343  INFO 7272 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:39:10.369 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:39:10.369 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:39:10.372 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:39:10.373 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:39:10.374 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:39:10.375 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:39:10.616 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:39:10.617 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:39:10.617 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:39:10.617 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:39:10.619 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:39:10.620 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:39:38.525 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:39:38.525 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:39:38.527 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:39:38.527  INFO 7272 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 21:39:38.528  INFO 7272 --- [http-nio-8888-exec-3] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:39:38.549 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:39:38.550 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:39:38.553 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:39:38.556 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:39:38.556 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:39:38.558 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:39:38.810 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:39:38.810 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:39:38.810 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:39:38.811 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:39:38.813 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:39:38.813 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:40:40.613 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:40:40.614 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:40:40.616 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:40:40.617  INFO 7272 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 21:40:40.617  INFO 7272 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:40:40.643 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:40:40.643 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:40:40.646 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:40:40.647 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:40:40.647 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:40:40.649 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:40:40.900 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:40:40.900 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:40:40.900 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:40:40.900 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:40:40.902 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:40:40.902 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:42:13.440 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:42:13.440 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:42:13.442 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:42:13.443  INFO 7272 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 21:42:13.443  INFO 7272 --- [http-nio-8888-exec-1] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:42:13.468 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:42:13.469 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:42:13.472 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:42:13.473 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:42:13.474 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:42:13.475 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:42:13.764 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:42:13.766 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:42:13.766 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:42:13.766 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:42:13.769 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:42:13.769 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:43:28.205 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:43:28.205 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:43:28.207 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:43:28.207  INFO 7272 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 21:43:28.207  INFO 7272 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:43:28.231 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:43:28.233 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:43:28.236 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:43:28.237 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:28.237 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:43:28.239 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:28.568 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:43:28.568 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:43:28.568 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:43:28.568 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:43:28.569 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:43:28.569 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:43:44.834 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 21:43:44.834 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 21:43:44.836 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 21:43:44.836 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 21:43:44.856 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 21:43:44.857 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.857 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:43:44.858 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.861 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.861 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:43:44.864 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.865 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.865 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 21:43:44.867 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.867 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.868 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 21:43:44.869 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.871 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.871 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 21:43:44.872 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.874 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.874 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 21:43:44.877 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.880 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.880 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 21:43:44.881 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.882 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.882 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 21:43:44.883 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.884 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.884 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 21:43:44.884 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.885 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.885 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 21:43:44.886 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.886 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:44.887 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 21:43:44.887 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:44.888 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 21:43:44.888 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 21:43:44.889 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 21:43:50.973 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:43:50.973 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:43:50.976 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:43:50.977  INFO 7272 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 21:43:50.977  INFO 7272 --- [http-nio-8888-exec-10] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:43:51.006 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:43:51.007 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:43:51.012 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:43:51.013 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:43:51.014 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:43:51.015 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:43:51.437 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:43:51.437 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:43:51.437 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:43:51.437 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:43:51.439 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:43:51.439 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:44:28.819 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:44:28.820 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:44:28.822 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:44:28.822  INFO 7272 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 21:44:28.823  INFO 7272 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:44:28.845 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:44:28.846 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 21:44:28.849 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:44:28.851 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:44:28.852 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:44:28.854 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:44:29.153 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:44:29.153 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:44:29.154 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:44:29.154 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:44:29.155 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:44:29.156 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:45:01.539 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 21:45:01.539 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 21:45:01.543 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 21:45:01.544 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 21:45:01.567 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 21:45:01.567 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.568 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:45:01.569 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.569 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.570 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 21:45:01.570 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.571 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.571 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 21:45:01.572 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.572 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.572 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 21:45:01.574 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.576 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.576 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 21:45:01.579 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.580 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.580 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 21:45:01.581 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.582 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.582 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 21:45:01.583 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.583 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.583 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 21:45:01.584 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.584 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.585 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 21:45:01.585 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.586 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.586 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 21:45:01.586 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.587 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:01.587 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 21:45:01.588 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:01.588 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 21:45:01.589 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 21:45:01.592 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 21:45:03.911 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:45:03.912 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 12(Long)
2020-04-08 21:45:03.915 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:45:03.916 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:03.916 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 21:45:03.918 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:04.065 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:45:04.065 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:45:04.065 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:45:04.065 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:45:04.066 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:45:04.067 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:45:09.622 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:45:09.623 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 13(Long)
2020-04-08 21:45:09.625 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:45:09.626 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:09.627 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 21:45:09.628 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:09.761 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:45:09.761 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:45:09.761 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:45:09.761 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:45:09.762 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:45:09.768 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:45:13.849 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:45:13.849 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 19(Long)
2020-04-08 21:45:13.852 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:45:13.853 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:13.853 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 21:45:13.856 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:13.993 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:45:13.993 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:45:13.993 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:45:13.993 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:45:13.994 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:45:13.994 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:45:16.319 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:45:16.320 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:45:16.323 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:45:16.324 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:45:16.324 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:45:16.325 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:45:16.464 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:45:16.464 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:45:16.464 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:45:16.464 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:45:16.465 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:45:16.465 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:46:03.264 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:46:03.264 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:46:03.266 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:46:03.267  INFO 7272 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 9ms, description = 初始化后台主页}
2020-04-08 21:46:03.267  INFO 7272 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:46:03.322 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:46:03.323 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:46:03.325 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:46:03.328 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:46:03.328 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:46:03.331 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:46:03.907 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:46:03.908 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:46:03.910 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:46:03.911 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:46:03.913 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:46:03.913 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:47:28.819 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:47:28.820 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:47:28.823 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:47:28.824  INFO 7272 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 6ms, description = 初始化后台主页}
2020-04-08 21:47:28.824  INFO 7272 --- [http-nio-8888-exec-2] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:47:28.846 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:47:28.846 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:47:28.848 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:47:28.848 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:47:28.849 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:47:28.851 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:47:29.082 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:47:29.082 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:47:29.084 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:47:29.084 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:47:29.084 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:47:29.086 DEBUG 7272 --- [http-nio-8888-exec-1] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:48:07.194 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:48:07.196 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:48:07.199 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:48:07.199  INFO 7272 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 21:48:07.199  INFO 7272 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:48:07.235 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:48:07.236 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:48:07.240 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:48:07.242 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:48:07.242 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:48:07.244 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:48:07.635 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:48:07.635 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:48:07.635 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:48:07.635 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:48:07.636 DEBUG 7272 --- [http-nio-8888-exec-3] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:48:07.637 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:48:46.052 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:48:46.054 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:48:46.057 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:48:46.058  INFO 7272 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 21:48:46.058  INFO 7272 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:48:46.099 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:48:46.099 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:48:46.103 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:48:46.106 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:48:46.106 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:48:46.108 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:48:46.593 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:48:46.594 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:48:46.594 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:48:46.594 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:48:46.596 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:48:46.596 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:50:01.060 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:50:01.060 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:50:01.062 DEBUG 7272 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:50:01.062  INFO 7272 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 21:50:01.062  INFO 7272 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:50:01.098 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:50:01.098 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:50:01.102 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:50:01.104 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:50:01.105 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:50:01.106 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:50:01.626 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:50:01.627 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:50:01.627 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:50:01.627 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:50:01.628 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:50:01.628 DEBUG 7272 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:50:29.635 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:50:29.635 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:50:29.638 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:50:29.639  INFO 7272 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 21:50:29.639  INFO 7272 --- [http-nio-8888-exec-4] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:50:29.693 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:50:29.695 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:50:29.701 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:50:29.702 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:50:29.702 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:50:29.704 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:50:30.244 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:50:30.245 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:50:30.247 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:50:30.247 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:50:30.247 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:50:30.249 DEBUG 7272 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:51:09.428 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:51:09.429 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:51:09.431 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:51:09.431  INFO 7272 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 21:51:09.431  INFO 7272 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:51:09.475 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:51:09.476 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:51:09.477 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:51:09.478 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:51:09.479 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:51:09.480 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:51:09.963 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:51:09.964 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:51:09.964 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:51:09.964 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:51:09.965 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:51:09.967 DEBUG 7272 --- [http-nio-8888-exec-2] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:51:48.302 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:51:48.302 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:51:48.303 DEBUG 7272 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:51:48.304  INFO 7272 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 4ms, description = 初始化后台主页}
2020-04-08 21:51:48.304  INFO 7272 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:51:48.336 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:51:48.336 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:51:48.338 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:51:48.339 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:51:48.339 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:51:48.342 DEBUG 7272 --- [http-nio-8888-exec-10] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:51:48.634 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:51:48.635 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:51:48.635 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:51:48.635 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:51:48.636 DEBUG 7272 --- [http-nio-8888-exec-5] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:51:48.637 DEBUG 7272 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:53:41.645  INFO 12244 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12244 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-04-08 21:53:41.649 DEBUG 12244 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-08 21:53:41.650  INFO 12244 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-04-08 21:53:41.707  INFO 12244 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-08 21:53:41.707  INFO 12244 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-08 21:53:43.009  INFO 12244 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2020-04-08 21:53:43.017  INFO 12244 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-08 21:53:43.017  INFO 12244 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-08 21:53:43.093  INFO 12244 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-08 21:53:43.094  INFO 12244 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1387 ms
2020-04-08 21:53:43.282  INFO 12244 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-04-08 21:53:43.521  INFO 12244 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-08 21:53:44.306  INFO 12244 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-08 21:53:44.360  INFO 12244 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-08 21:53:44.491  INFO 12244 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-04-08 21:53:44.533  INFO 12244 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2020-04-08 21:53:44.535  INFO 12244 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.679 seconds (JVM running for 4.657)
2020-04-08 21:53:47.355  INFO 12244 --- [http-nio-8888-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1585883995; remember-me=YWRtaW46MTU4NzA5NjIwNjA1MjpjOTE3Yjc5OGE4ODBkNDhlNjQxOTc2M2M0ZWM0NDU5Yw; JSESSIONID=90EEEBDCC6180AE02DF2660DAF8BF967] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-08 21:53:47.363  INFO 12244 --- [http-nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-08 21:53:47.363  INFO 12244 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-08 21:53:47.372  INFO 12244 --- [http-nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-04-08 21:53:48.154 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:53:48.180 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:53:48.202 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:53:48.206  INFO 12244 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 167ms, description = 初始化后台主页}
2020-04-08 21:53:48.208  INFO 12244 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:53:48.322 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:53:48.324 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:53:48.332 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:53:48.335 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:53:48.336 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:53:48.339 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:53:48.872 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:53:48.873 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:53:48.876 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:53:48.880 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:53:48.881 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:53:48.886 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:58:31.609 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:58:31.611 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:58:31.615 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:58:31.615  INFO 12244 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 10ms, description = 初始化后台主页}
2020-04-08 21:58:31.615  INFO 12244 --- [http-nio-8888-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:58:31.647 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:58:31.648 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:58:31.651 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:58:31.653 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:58:31.653 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:58:31.655 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:58:31.995 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:58:31.996 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:58:31.999 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:58:32.002 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:58:32.004 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:58:32.015 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 21:59:44.596 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 21:59:44.596 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 21:59:44.601 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 21:59:44.602  INFO 12244 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 21:59:44.602  INFO 12244 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 21:59:44.666 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 21:59:44.667 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 21:59:44.670 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 21:59:44.672 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 21:59:44.673 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 21:59:44.677 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 21:59:45.221 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 21:59:45.222 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 21:59:45.223 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 21:59:45.223 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 21:59:45.227 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 21:59:45.228 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 22:08:42.782 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 22:08:42.784 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 22:08:42.789 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 22:08:42.791  INFO 12244 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 14ms, description = 初始化后台主页}
2020-04-08 22:08:42.792  INFO 12244 --- [http-nio-8888-exec-8] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 22:08:42.832 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 22:08:42.833 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 22:08:42.835 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 22:08:42.837 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:08:42.837 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 22:08:42.839 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:08:43.161 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 22:08:43.161 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 22:08:43.161 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 22:08:43.162 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 22:08:43.164 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 22:08:43.164 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 22:12:00.040 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 22:12:00.040 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 22:12:00.042 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 22:12:00.043  INFO 12244 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 22:12:00.043  INFO 12244 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 22:12:00.082 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 22:12:00.082 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 22:12:00.085 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 22:12:00.086 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:12:00.087 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 22:12:00.088 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:12:00.410 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 22:12:00.410 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 22:12:00.411 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 22:12:00.411 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 22:12:00.413 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 22:12:00.414 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 22:12:31.548 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 22:12:31.549 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 22:12:31.552 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 22:12:31.553  INFO 12244 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 7ms, description = 初始化后台主页}
2020-04-08 22:12:31.553  INFO 12244 --- [http-nio-8888-exec-5] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 22:12:31.613 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 22:12:31.614 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 22:12:31.618 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 22:12:31.621 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:12:31.622 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 22:12:31.625 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:12:32.236 DEBUG 12244 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 22:12:32.237 DEBUG 12244 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 22:12:32.236 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 22:12:32.237 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 22:12:32.239 DEBUG 12244 --- [http-nio-8888-exec-10] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 22:12:32.239 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 22:15:10.228 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 22:15:10.228 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 22:15:10.233 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 22:15:10.234  INFO 12244 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 8ms, description = 初始化后台主页}
2020-04-08 22:15:10.234  INFO 12244 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 22:15:10.282 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 22:15:10.283 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 22:15:10.286 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 22:15:10.287 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:15:10.288 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 22:15:10.290 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:15:10.778 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 22:15:10.779 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 22:15:10.779 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 22:15:10.779 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 22:15:10.781 DEBUG 12244 --- [http-nio-8888-exec-3] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 22:15:10.782 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 22:16:21.218 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 22:16:21.219 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 22:16:21.231 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 22:16:21.232  INFO 12244 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 17ms, description = 初始化后台主页}
2020-04-08 22:16:21.232  INFO 12244 --- [http-nio-8888-exec-7] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 22:16:21.282 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 22:16:21.283 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 22:16:21.285 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 22:16:21.286 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:21.287 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 22:16:21.289 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:21.768 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 22:16:21.768 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 22:16:21.770 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 22:16:21.770 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 22:16:21.770 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 22:16:21.772 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 22:16:36.364 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-04-08 22:16:36.365 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 
2020-04-08 22:16:36.372 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==>  Preparing: select ta.id, ta.title, ta.type, ta.commentable, ta.appreciable, ta.comments, ta.views, ta.likes, ta.published, ta.create_time, ta.update_time, tc.id, tc.name from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-04-08 22:16:36.372 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : ==> Parameters: 0(Long), 15(Long)
2020-04-08 22:16:36.430 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.A.selectPageWithExtra            : <==      Total: 11
2020-04-08 22:16:36.439 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.439 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 22:16:36.441 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.444 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.445 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 22:16:36.446 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.447 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.447 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 11(Long)
2020-04-08 22:16:36.448 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.449 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.449 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 12(Long)
2020-04-08 22:16:36.450 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.450 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.450 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 13(Long)
2020-04-08 22:16:36.451 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.451 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.452 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 14(Long)
2020-04-08 22:16:36.452 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.453 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.453 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 15(Long)
2020-04-08 22:16:36.453 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.454 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.454 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 16(Long)
2020-04-08 22:16:36.455 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.455 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.455 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 17(Long)
2020-04-08 22:16:36.456 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.457 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.457 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 18(Long)
2020-04-08 22:16:36.460 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.462 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:36.462 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 19(Long)
2020-04-08 22:16:36.463 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:36.464 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-04-08 22:16:36.464 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : ==> Parameters: 
2020-04-08 22:16:36.465 DEBUG 12244 --- [http-nio-8888-exec-4] s.a.g.mapper.ArticleMapper.selectCount   : <==      Total: 1
2020-04-08 22:16:37.942 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 22:16:37.943 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 10(Long)
2020-04-08 22:16:37.946 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 22:16:37.947 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:16:37.947 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 10(Long)
2020-04-08 22:16:37.949 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 1
2020-04-08 22:16:38.104 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 22:16:38.104 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 22:16:38.104 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 22:16:38.104 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 22:16:38.105 DEBUG 12244 --- [http-nio-8888-exec-1] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 22:16:38.106 DEBUG 12244 --- [http-nio-8888-exec-5] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 22:17:29.067 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 22:17:29.068 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 22:17:29.070 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 22:17:29.070  INFO 12244 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 22:17:29.070  INFO 12244 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 22:17:29.093 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 22:17:29.093 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 22:17:29.096 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 22:17:29.099 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:17:29.099 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 22:17:29.101 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 22:17:29.344 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 22:17:29.346 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 22:17:29.347 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 22:17:29.348 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 22:17:29.350 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 22:17:29.351 DEBUG 12244 --- [http-nio-8888-exec-6] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
2020-04-08 22:17:56.531 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-04-08 22:17:56.531 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : ==> Parameters: true(Boolean)
2020-04-08 22:17:56.533 DEBUG 12244 --- [http-nio-8888-exec-9] s.a.g.mapper.SysMenuMapper.selectList    : <==      Total: 5
2020-04-08 22:17:56.533  INFO 12244 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8888/admin/init, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.IndexController.init, args = [], time = 5ms, description = 初始化后台主页}
2020-04-08 22:17:56.533  INFO 12244 --- [http-nio-8888-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ <200 OK OK,InitInfoVo(menuInfo=[MenuVo(id=1, pid=0, title=常规管理, icon=fa fa-dashboard, href=, target=_self, child=[MenuVo(id=2, pid=1, title=用户管理, icon=fa fa-users, href=/api/page?pageName=user/user-list, target=null, child=null), MenuVo(id=3, pid=1, title=撰写文章, icon=fa fa-book, href=/api/page?pageName=article/article-edit, target=null, child=null), MenuVo(id=4, pid=1, title=其它管理, icon=fa fa-slideshare, href=null, target=null, child=null), MenuVo(id=5, pid=1, title=所有文章, icon=fa fa-book, href=/api/page?pageName=article/article-list, target=null, child=null)])], homeInfo=InitInfoVo.HomeInfo(title=首页, href=/api/page?pageName=dashboard), logoInfo=InitInfoVo.LogoInfo(title=Geek Blog, image=/static/layuimini/images/logo.png)),[]>
2020-04-08 22:17:56.564 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type FROM t_article WHERE id=? 
2020-04-08 22:17:56.564 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : ==> Parameters: 7(Long)
2020-04-08 22:17:56.566 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.ArticleMapper.selectById    : <==      Total: 1
2020-04-08 22:17:56.567 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==>  Preparing: select tt.id, tt.name from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-04-08 22:17:56.568 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : ==> Parameters: 7(Long)
2020-04-08 22:17:56.570 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.m.TagMapper.selectByArticleId      : <==      Total: 2
2020-04-08 22:17:56.900 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==>  Preparing: SELECT id,name,create_time FROM t_category 
2020-04-08 22:17:56.901 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : ==> Parameters: 
2020-04-08 22:17:56.902 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==>  Preparing: SELECT id,name,create_time FROM t_tag 
2020-04-08 22:17:56.903 DEBUG 12244 --- [http-nio-8888-exec-7] s.a.g.mapper.CategoryMapper.selectList   : <==      Total: 4
2020-04-08 22:17:56.903 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : ==> Parameters: 
2020-04-08 22:17:56.905 DEBUG 12244 --- [http-nio-8888-exec-8] s.a.g.mapper.TagMapper.selectList        : <==      Total: 10
