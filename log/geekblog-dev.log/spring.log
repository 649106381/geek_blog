2020-05-06 08:49:41.970  INFO 12056 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12056 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 08:49:41.970 DEBUG 12056 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 08:49:41.970  INFO 12056 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 08:49:42.064  INFO 12056 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 08:49:42.064  INFO 12056 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 08:49:44.141  INFO 12056 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 08:49:44.141  INFO 12056 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 08:49:44.157  INFO 12056 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 08:49:44.251  INFO 12056 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 08:49:44.266  INFO 12056 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2202 ms
2020-05-06 08:49:44.313  INFO 12056 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 08:49:44.329  INFO 12056 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 08:49:44.579  INFO 12056 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 08:49:45.094  INFO 12056 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 08:49:46.812  INFO 12056 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 08:49:47.281  INFO 12056 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 08:49:47.375  INFO 12056 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 08:49:47.375  INFO 12056 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 6.385 seconds (JVM running for 8.484)
2020-05-06 08:49:56.979  INFO 12056 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 08:49:56.979  INFO 12056 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 08:49:56.989  INFO 12056 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-05-06 08:50:00.358 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 5 
2020-05-06 08:50:00.510 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean)
2020-05-06 08:50:00.527 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 4
2020-05-06 08:50:00.532 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where recommend = 1 and published = 1 limit ? 
2020-05-06 08:50:00.541 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-05-06 08:50:00.546 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 3
2020-05-06 08:50:00.596 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 
2020-05-06 08:50:00.598 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-05-06 08:50:00.612 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 order by ta.create_time desc LIMIT ?,? 
2020-05-06 08:50:00.617 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-05-06 08:50:00.700 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-05-06 08:50:00.802 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 08:50:00.822 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 08:50:00.792(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 432(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 08:50:00.828 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 08:50:01.028 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:50:01.031 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 08:50:01.039 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:50:01.043 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:50:01.043 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 08:50:01.047 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 08:50:01.051 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:50:01.053 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 08:50:01.056 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:50:01.059 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:50:01.060 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 08:50:01.066 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 08:50:01.072 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:50:01.073 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 08:50:01.077 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:50:01.080 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:50:01.081 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 08:50:01.088 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:52:10.877 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 
2020-05-06 08:52:10.878 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-05-06 08:52:10.882 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 order by ta.create_time desc LIMIT ?,? 
2020-05-06 08:52:10.883 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-05-06 08:52:10.889 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 1
2020-05-06 08:52:10.889 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:52:10.889 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 08:52:10.889 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:52:12.592 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 
2020-05-06 08:52:12.593 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-05-06 08:52:12.595 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 order by ta.create_time desc LIMIT ?,? 
2020-05-06 08:52:12.596 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-05-06 08:52:12.608 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-05-06 08:52:12.610 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:52:12.610 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 08:52:12.612 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:52:12.613 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:52:12.614 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 08:52:12.615 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 08:52:12.617 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:52:12.618 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 08:52:12.620 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:52:12.624 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:52:12.624 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 08:52:12.626 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 08:52:12.628 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:52:12.628 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 08:52:12.630 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:52:12.633 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:52:12.634 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 08:52:12.636 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:53:20.173 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 08:53:20.174 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 11(Long)
2020-05-06 08:53:20.176 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 08:53:20.184 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 08:53:20.188 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 1(Integer), 11(Long)
2020-05-06 08:53:20.191 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 08:53:20.192 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 08:53:20.193 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 11(Long)
2020-05-06 08:53:20.196 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 08:53:20.198 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 08:53:20.201 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 11(Long)
2020-05-06 08:53:20.204 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 08:53:20.205 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 08:53:20.206 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 11(Long)
2020-05-06 08:53:20.208 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectNextPreviewById          : <==      Total: 0
2020-05-06 08:53:20.228 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:53:20.228 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 08:53:20.230 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:53:20.261 ERROR 12056 --- [http-nio-8889-exec-10] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8889-exec-10] Exception processing template "web/article": An error happened during template parsing (template: "class path resource [templates/web/article.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/web/article.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "article.author.username" (template: "web/article" - line 513, col 84)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 51 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "article.author.username" (template: "web/article" - line 513, col 84)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 53 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'username' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 72 common frames omitted

2020-05-06 08:53:20.264 ERROR 12056 --- [http-nio-8889-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/web/article.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'username' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-05-06 08:53:20.273 ERROR 12056 --- [http-nio-8889-exec-10] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/article/11] and exception [An error happened during template parsing (template: "class path resource [templates/web/article.html]")] as the response has already been committed. As a result, the response may have the wrong status code.
2020-05-06 08:53:20.774 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 08:53:20.774 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 11(Long)
2020-05-06 08:53:20.776 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 08:53:20.778 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 08:53:20.778 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 11(Long)
2020-05-06 08:53:20.780 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 08:53:20.781 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 08:53:20.781 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 11(Long)
2020-05-06 08:53:20.787 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 08:53:20.788 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 08:53:20.788 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 11(Long)
2020-05-06 08:53:20.791 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 08:53:20.792 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 08:53:20.793 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 11(Long)
2020-05-06 08:53:20.794 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.d.A.selectNextPreviewById          : <==      Total: 0
2020-05-06 08:53:20.805 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:53:20.805 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 08:53:20.807 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:53:20.811 ERROR 12056 --- [http-nio-8889-exec-7] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8889-exec-7] Exception processing template "web/article": An error happened during template parsing (template: "class path resource [templates/web/article.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/web/article.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "article.author.username" (template: "web/article" - line 513, col 84)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 51 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "article.author.username" (template: "web/article" - line 513, col 84)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 53 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'username' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 72 common frames omitted

2020-05-06 08:53:20.812 ERROR 12056 --- [http-nio-8889-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/web/article.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'username' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-05-06 08:53:20.817 ERROR 12056 --- [http-nio-8889-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8889/article/11, Exception : No converter for [class java.util.LinkedHashMap] with preset Content-Type 'text/html;charset=UTF-8'
2020-05-06 08:53:20.820  WARN 12056 --- [http-nio-8889-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class java.util.LinkedHashMap] with preset Content-Type 'text/html;charset=UTF-8']
2020-05-06 08:53:29.283 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 08:53:29.284 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 7(Long)
2020-05-06 08:53:29.287 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 08:53:29.290 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 08:53:29.291 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 79(Integer), 7(Long)
2020-05-06 08:53:29.296 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 08:53:29.297 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 08:53:29.298 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 7(Long)
2020-05-06 08:53:29.302 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 08:53:29.303 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 08:53:29.303 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 7(Long)
2020-05-06 08:53:29.306 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 08:53:29.306 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 08:53:29.307 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 7(Long)
2020-05-06 08:53:29.308 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 08:53:29.317 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:53:29.317 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 08:53:29.319 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 08:53:29.343 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:53:29.343 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 08:53:29.345 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:53:29.348 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:53:29.349 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 08:53:29.352 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 08:54:15.184 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 08:54:15.185 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 7(Long)
2020-05-06 08:54:15.188 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 08:54:15.190 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 08:54:15.191 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 80(Integer), 7(Long)
2020-05-06 08:54:15.212 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 08:54:15.214 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 08:54:15.215 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 7(Long)
2020-05-06 08:54:15.219 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 08:54:15.222 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 08:54:15.222 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 7(Long)
2020-05-06 08:54:15.228 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 08:54:15.230 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 08:54:15.230 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 7(Long)
2020-05-06 08:54:15.233 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 08:54:15.246 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:54:15.246 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 08:54:15.248 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 08:54:15.255 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:54:15.256 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 08:54:15.259 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 08:54:15.261 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 08:54:15.261 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 08:54:15.263 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:09:23.902 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:09:23.904 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 11(Long)
2020-05-06 09:09:23.907 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:09:23.911 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:09:23.911 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 3(Integer), 11(Long)
2020-05-06 09:09:23.913 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:09:23.913 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:09:23.914 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 11(Long)
2020-05-06 09:09:23.918 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:09:23.918 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:09:23.919 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 11(Long)
2020-05-06 09:09:23.921 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:09:23.921 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:09:23.921 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 11(Long)
2020-05-06 09:09:23.922 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.A.selectNextPreviewById          : <==      Total: 0
2020-05-06 09:09:23.931 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:23.932 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 09:09:23.936 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:09:23.939 ERROR 12056 --- [http-nio-8889-exec-3] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8889-exec-3] Exception processing template "web/article": An error happened during template parsing (template: "class path resource [templates/web/article.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/web/article.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "article.author.username" (template: "web/article" - line 513, col 84)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 51 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "article.author.username" (template: "web/article" - line 513, col 84)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 53 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'username' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 72 common frames omitted

2020-05-06 09:09:23.939 ERROR 12056 --- [http-nio-8889-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/web/article.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'username' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-05-06 09:09:23.945 ERROR 12056 --- [http-nio-8889-exec-3] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/article/11] and exception [An error happened during template parsing (template: "class path resource [templates/web/article.html]")] as the response has already been committed. As a result, the response may have the wrong status code.
2020-05-06 09:09:25.635 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:09:25.636 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 7(Long)
2020-05-06 09:09:25.638 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:09:25.639 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:09:25.640 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 81(Integer), 7(Long)
2020-05-06 09:09:25.642 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:09:25.642 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:09:25.643 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 7(Long)
2020-05-06 09:09:25.645 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:09:25.645 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:09:25.645 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 7(Long)
2020-05-06 09:09:25.647 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:09:25.648 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:09:25.648 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 7(Long)
2020-05-06 09:09:25.651 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 09:09:25.652 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:25.652 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 09:09:25.660 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 09:09:25.666 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:25.666 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 09:09:25.668 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:09:25.670 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:25.670 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 09:09:25.672 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:09:38.232 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:09:38.233 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 7(Long)
2020-05-06 09:09:38.236 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:09:38.238 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:09:38.238 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 82(Integer), 7(Long)
2020-05-06 09:09:38.241 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:09:38.242 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:09:38.242 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 7(Long)
2020-05-06 09:09:38.246 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:09:38.248 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:09:38.249 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 7(Long)
2020-05-06 09:09:38.251 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:09:38.253 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:09:38.253 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 7(Long)
2020-05-06 09:09:38.256 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 09:09:38.263 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:38.263 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 09:09:38.263 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 09:09:38.276 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:38.276 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 09:09:38.281 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:09:38.286 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:38.287 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 09:09:38.296 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:09:54.647 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:09:54.647 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 7(Long)
2020-05-06 09:09:54.650 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:09:54.651 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:09:54.652 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 83(Integer), 7(Long)
2020-05-06 09:09:54.654 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:09:54.656 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:09:54.656 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 7(Long)
2020-05-06 09:09:54.662 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:09:54.663 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:09:54.663 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 7(Long)
2020-05-06 09:09:54.666 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:09:54.666 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:09:54.667 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 7(Long)
2020-05-06 09:09:54.670 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 09:09:54.680 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:54.680 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 09:09:54.682 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 09:09:54.688 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:54.689 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 09:09:54.690 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:09:54.692 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:09:54.693 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 09:09:54.694 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:10:10.949 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:10:10.949 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 6(Long)
2020-05-06 09:10:10.951 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:10:10.959 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:10:10.960 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 89(Integer), 6(Long)
2020-05-06 09:10:10.966 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:10:10.967 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:10:10.967 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 6(Long)
2020-05-06 09:10:10.972 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:10:10.973 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:10:10.974 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 6(Long)
2020-05-06 09:10:10.978 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:10:10.979 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:10:10.979 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 6(Long)
2020-05-06 09:10:10.981 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 09:10:10.988 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:10.989 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 09:10:10.991 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:10:10.995 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:10.995 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 09:10:10.996 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:10:10.998 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:10.998 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 09:10:11.000 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 09:10:18.434 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:10:18.435 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 5(Long)
2020-05-06 09:10:18.439 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:10:18.442 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:10:18.443 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 85(Integer), 5(Long)
2020-05-06 09:10:18.446 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:10:18.446 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:10:18.447 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 5(Long)
2020-05-06 09:10:18.449 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:10:18.449 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:10:18.449 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 5(Long)
2020-05-06 09:10:18.451 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:10:18.454 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:10:18.454 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 5(Long)
2020-05-06 09:10:18.458 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 09:10:18.467 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:18.467 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 09:10:18.472 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:10:18.478 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:18.478 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 09:10:18.479 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:10:18.481 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:18.481 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 09:10:18.483 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:10:29.178 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:10:29.179 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 4(Long)
2020-05-06 09:10:29.181 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:10:29.183 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:10:29.184 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 94(Integer), 4(Long)
2020-05-06 09:10:29.187 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:10:29.188 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:10:29.188 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 4(Long)
2020-05-06 09:10:29.191 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:10:29.192 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:10:29.193 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 4(Long)
2020-05-06 09:10:29.195 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:10:29.196 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:10:29.196 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 4(Long)
2020-05-06 09:10:29.200 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 09:10:29.209 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:29.210 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 09:10:29.211 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:10:29.218 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:29.220 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 09:10:29.222 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:10:29.224 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:29.224 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 09:10:29.226 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:10:34.953 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:10:34.954 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 3(Long)
2020-05-06 09:10:34.957 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:10:34.958 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:10:34.959 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 100(Integer), 3(Long)
2020-05-06 09:10:34.962 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:10:34.963 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:10:34.963 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 3(Long)
2020-05-06 09:10:34.970 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:10:34.972 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:10:34.972 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 3(Long)
2020-05-06 09:10:34.975 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:10:34.975 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:10:34.976 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 3(Long)
2020-05-06 09:10:34.977 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 09:10:34.990 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:34.990 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 09:10:34.993 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:10:34.999 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:35.000 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 09:10:35.002 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:10:35.006 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:35.007 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 09:10:35.009 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:10:42.662 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-05-06 09:10:42.662 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 7(Long)
2020-05-06 09:10:42.667 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-05-06 09:10:42.669 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-05-06 09:10:42.670 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 84(Integer), 7(Long)
2020-05-06 09:10:42.672 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 09:10:42.673 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-05-06 09:10:42.673 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 7(Long)
2020-05-06 09:10:42.676 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-05-06 09:10:42.677 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) 
2020-05-06 09:10:42.678 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 7(Long)
2020-05-06 09:10:42.681 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-05-06 09:10:42.681 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) 
2020-05-06 09:10:42.681 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 7(Long)
2020-05-06 09:10:42.685 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-05-06 09:10:42.691 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:42.691 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 09:10:42.693 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 09:10:42.699 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:42.699 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 09:10:42.701 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:10:42.702 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:10:42.702 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 09:10:42.703 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:26:38.320 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 09:26:38.321 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 09:26:38.32(Timestamp), 访问后台登录页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toLogin()(String), { session: org.apache.catalina.session.StandardSessionFacade@456f6196 }(String), 0:0:0:0:0:0:0:1(String), 5(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 09:26:38.323 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 09:26:45.148 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectOne    : ==>  Preparing: SELECT id,username FROM sys_user WHERE (username = ? AND password = ?) 
2020-05-06 09:26:45.148 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectOne    : ==> Parameters: AlanLiang(String), 222fbe64009247406782ab797f991e13(String)
2020-05-06 09:26:45.149 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectOne    : <==      Total: 0
2020-05-06 09:26:45.150 ERROR 12056 --- [http-nio-8889-exec-10] s.a.g.e.handler.GlobalExceptionHandler   : 用户名或密码错误
2020-05-06 09:26:45.153  WARN 12056 --- [http-nio-8889-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户名或密码错误]
2020-05-06 09:26:50.190 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectOne    : ==>  Preparing: SELECT id,username FROM sys_user WHERE (username = ? AND password = ?) 
2020-05-06 09:26:50.190 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectOne    : ==> Parameters: AlanLiang(String), 222fbe64009247406782ab797f991e13(String)
2020-05-06 09:26:50.191 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectOne    : <==      Total: 0
2020-05-06 09:26:50.191 ERROR 12056 --- [http-nio-8889-exec-5] s.a.g.e.handler.GlobalExceptionHandler   : 用户名或密码错误
2020-05-06 09:26:50.192  WARN 12056 --- [http-nio-8889-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户名或密码错误]
2020-05-06 09:26:55.243 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectOne    : ==>  Preparing: SELECT id,username FROM sys_user WHERE (username = ? AND password = ?) 
2020-05-06 09:26:55.243 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectOne    : ==> Parameters: AlanLiang(String), 222fbe64009247406782ab797f991e13(String)
2020-05-06 09:26:55.244 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectOne    : <==      Total: 0
2020-05-06 09:26:55.244 ERROR 12056 --- [http-nio-8889-exec-4] s.a.g.e.handler.GlobalExceptionHandler   : 用户名或密码错误
2020-05-06 09:26:55.245  WARN 12056 --- [http-nio-8889-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户名或密码错误]
2020-05-06 09:26:59.305 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 09:26:59.306 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 09:26:59.304(Timestamp), 访问后台登录页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toLogin()(String), { session: org.apache.catalina.session.StandardSessionFacade@456f6196 }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 09:26:59.310 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 09:27:00.495 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectOne    : ==>  Preparing: SELECT id,username FROM sys_user WHERE (username = ? AND password = ?) 
2020-05-06 09:27:00.495 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectOne    : ==> Parameters: admin(String), 222fbe64009247406782ab797f991e13(String)
2020-05-06 09:27:00.496 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectOne    : <==      Total: 1
2020-05-06 09:27:03.912 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 09:27:03.913 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 09:27:03.914 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 09:27:15.032 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 09:27:15.032 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 09:27:15.034 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 09:27:15.035 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 09:27:15.036 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 09:27:15.040 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 09:27:22.157 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 09:27:22.157 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 09:27:22.158 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 09:27:22.181 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 09:27:22.182 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 09:27:22.186 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 09:27:22.188 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 09:27:22.208 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 09:27:22.211 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.211 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 09:27:22.213 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:27:22.213 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.213 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 09:27:22.214 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:27:22.218 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.219 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 09:27:22.222 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 09:27:22.224 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.224 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 09:27:22.226 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:27:22.226 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.227 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 09:27:22.228 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:27:22.228 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.228 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 09:27:22.229 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:27:22.230 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.230 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 09:27:22.231 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:27:22.231 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.231 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 09:27:22.232 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 09:27:22.233 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 09:27:22.233 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 09:27:22.235 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 09:27:29.323 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 09:27:29.327 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 09:27:29.331 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 09:27:29.332 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 09:27:29.337 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 09:27:37.829 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-05-06 09:27:37.833 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-05-06 09:27:37.837 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-05-06 09:27:37.838 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-05-06 09:27:37.840 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-05-06 10:16:51.710 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 10:16:51.711 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 10:16:51.716 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 10:27:35.269 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-05-06 10:27:35.269 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-05-06 10:27:35.274 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-05-06 10:27:35.274 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-05-06 10:27:35.279 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-05-06 10:27:37.256 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 10:27:37.256 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 10:27:37.259 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 10:27:37.259 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 10:27:37.261 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 10:27:38.997 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 10:27:38.997 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 10:27:38.998 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 10:27:39.009 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 10:27:39.009 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 10:27:39.010 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 10:27:39.011 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 10:27:39.025 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 10:27:39.026 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.026 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 10:27:39.027 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:27:39.028 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.028 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 10:27:39.029 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:27:39.029 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.029 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 10:27:39.030 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 10:27:39.030 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.030 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 10:27:39.031 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 10:27:39.032 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.032 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 10:27:39.035 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:27:39.037 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.037 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 10:27:39.038 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 10:27:39.039 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.039 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 10:27:39.040 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:27:39.041 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.041 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 10:27:39.043 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:27:39.043 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:27:39.044 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 10:27:39.045 DEBUG 12056 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 10:40:38.167 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-05-06 10:40:38.168 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-05-06 10:40:38.170 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-05-06 10:40:38.170 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-05-06 10:40:38.173 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-05-06 10:40:40.448 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 10:40:40.448 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 10:40:40.450 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 10:40:40.450 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 10:40:40.453 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 10:40:43.336 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 10:40:43.336 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 10:40:43.337 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 10:40:43.348 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 10:40:43.348 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 10:40:43.350 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 10:40:43.350 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 10:40:43.356 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 10:40:43.358 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.359 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 10:40:43.363 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:40:43.363 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.363 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 10:40:43.364 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:40:43.365 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.365 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 10:40:43.366 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 10:40:43.367 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.367 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 10:40:43.368 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 10:40:43.368 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.368 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 10:40:43.369 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:40:43.370 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.370 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 10:40:43.371 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 10:40:43.371 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.371 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 10:40:43.372 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:40:43.373 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.373 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 10:40:43.374 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 10:40:43.377 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 10:40:43.377 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 10:40:43.380 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 10:55:44.245 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-05-06 10:55:44.249 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectPage   : ==> Parameters: 
2020-05-06 10:55:44.255 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectPage   : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-05-06 10:55:44.256 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 10:55:44.257 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectPage   : <==      Total: 1
2020-05-06 10:55:44.260  INFO 12056 --- [http-nio-8889-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8889/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.UserController.listByPage, args = [1, 15], time = 20ms, description = 分页查询用户}
2020-05-06 10:55:44.261  INFO 12056 --- [http-nio-8889-exec-9] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=1)
2020-05-06 10:55:48.715 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 10:55:48.716 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 10:55:48.717 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log LIMIT ?,? 
2020-05-06 10:55:48.718 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 10:55:48.723 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 10:58:54.013 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 10:58:54.013 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 10:58:54.015 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:00:03.538 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:00:03.538 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:00:03.540 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:00:29.047 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 11:00:29.047 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 11:00:29.048 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log LIMIT ?,? 
2020-05-06 11:00:29.048 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:00:29.051 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 11:00:53.886 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 11:00:53.886 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 11:00:53.888 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log LIMIT ?,? 
2020-05-06 11:00:53.888 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 495(Long), 15(Long)
2020-05-06 11:00:53.890 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 14
2020-05-06 11:00:55.867 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 11:00:55.867 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 11:00:55.868 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log LIMIT ?,? 
2020-05-06 11:00:55.868 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:00:55.869 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 11:02:02.770 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:02:02.771 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:02:02.772 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:02:02.772 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:02:02.773 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:02:02.774 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:02:03.931 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:02:03.932 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:02:03.933 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:02:03.940 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:02:03.941 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:02:03.942 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:02:03.943 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:02:03.954 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:02:03.956 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.956 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:02:03.958 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:03.958 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.958 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:02:03.959 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:03.959 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.960 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:02:03.961 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:02:03.962 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.962 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:02:03.965 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:02:03.966 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.967 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:02:03.969 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:03.969 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.970 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:02:03.970 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:02:03.971 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.971 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:02:03.972 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:03.972 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.973 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:02:03.973 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:03.974 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:03.974 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:02:03.975 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:02:12.400 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 11:02:12.401 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 11:02:12.403 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 11:02:12.404 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:02:12.405 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 11:02:50.186 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:02:50.188 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 11(Long)
2020-05-06 11:02:50.190 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:02:50.191 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:50.192 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:02:50.194 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:50.303 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:02:50.304 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:02:50.304 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:02:50.304 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:02:50.305 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:02:50.305 DEBUG 12056 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:02:52.667 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:02:52.668 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:02:52.669 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:02:52.671 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:02:52.672 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试标题(String), 测试摘要(String), <p>测试内容</p>
(String), 测试内容(String), (String), true(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-05-06 11:02:52.665(Timestamp), 1(Integer), false(Boolean), true(Boolean), 11(Long)
2020-05-06 11:02:52.673 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:02:52.675 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:02:52.677 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 11(Long)
2020-05-06 11:02:52.678 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-05-06 11:02:52.682 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-05-06 11:02:52.683 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 11(Long), 1(Long), 11(Long), 3(Long), 11(Long), 6(Long), 11(Long), 16(Long)
2020-05-06 11:02:52.684 DEBUG 12056 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-05-06 11:02:59.494 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:02:59.494 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:02:59.495 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:02:59.719 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:02:59.720 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:02:59.721 DEBUG 12056 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:02:59.735 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:02:59.735 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:02:59.737 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:02:59.737 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:02:59.752 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:02:59.754 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.754 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:02:59.755 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:59.756 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.756 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:02:59.757 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:59.758 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.758 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:02:59.758 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:02:59.759 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.759 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:02:59.760 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:02:59.760 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.760 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:02:59.761 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:59.761 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.761 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:02:59.762 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:02:59.762 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.762 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:02:59.763 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:59.763 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.763 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:02:59.765 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:02:59.768 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:02:59.769 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:02:59.771 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:03:03.336 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:03:03.336 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-05-06 11:03:03.338 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:03:03.339 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:03.340 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:03:03.341 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:03:03.433 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:03:03.433 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:03:03.433 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:03:03.433 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:03:03.434 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:03:03.434 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:03:21.284 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:03:21.284 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:03:21.286 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:03:21.286 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:03:21.289 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting2.jpg(String), false(Boolean), true(Boolean), true(Boolean), 2(Long), 2020-05-06 11:03:21.284(Timestamp), 2(Integer), true(Boolean), false(Boolean), 2(Long)
2020-05-06 11:03:21.295 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:03:21.296 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:03:21.296 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-05-06 11:03:21.297 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-05-06 11:03:21.298 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-05-06 11:03:21.298 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-05-06 11:03:21.299 DEBUG 12056 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-05-06 11:03:23.238 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:03:23.238 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:03:23.239 DEBUG 12056 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:03:23.247 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:03:23.248 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:03:23.249 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:03:23.249 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:03:23.254 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:03:23.255 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.255 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:03:23.256 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:03:23.257 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.258 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:03:23.260 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:03:23.261 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.261 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:03:23.262 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:03:23.263 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.263 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:03:23.264 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:03:23.266 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.266 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:03:23.267 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:03:23.267 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.268 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:03:23.268 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:03:23.269 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.269 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:03:23.269 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:03:23.270 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.270 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:03:23.270 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:03:23.271 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:03:23.271 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:03:23.272 DEBUG 12056 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:06:20.875 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:06:20.875 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:06:20.875 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:06:20.876 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:06:20.879 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting2.jpg(String), false(Boolean), true(Boolean), true(Boolean), 2(Long), 2020-05-06 11:06:20.873(Timestamp), 2(Integer), true(Boolean), false(Boolean), 2(Long)
2020-05-06 11:06:20.885 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:06:20.886 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:06:20.886 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-05-06 11:06:20.887 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-05-06 11:06:20.888 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-05-06 11:06:20.888 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-05-06 11:06:20.889 DEBUG 12056 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-05-06 11:06:22.328 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:06:22.329 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:06:22.330 DEBUG 12056 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:06:22.339 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:06:22.339 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:06:22.340 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:06:22.340 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:06:22.347 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:06:22.348 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.349 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:06:22.350 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:06:22.351 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.352 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:06:22.353 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:06:22.354 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.354 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:06:22.355 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:06:22.356 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.356 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:06:22.357 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:06:22.358 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.358 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:06:22.360 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:06:22.360 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.361 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:06:22.362 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:06:22.363 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.363 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:06:22.364 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:06:22.365 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.365 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:06:22.366 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:06:22.367 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:06:22.367 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:06:22.368 DEBUG 12056 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:09:39.902  INFO 21696 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 21696 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 11:09:39.904 DEBUG 21696 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 11:09:39.905  INFO 21696 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 11:09:39.933  INFO 21696 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 11:09:39.933  INFO 21696 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 11:09:40.968  INFO 21696 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 11:09:40.976  INFO 21696 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 11:09:40.976  INFO 21696 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 11:09:41.053  INFO 21696 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 11:09:41.053  INFO 21696 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1120 ms
2020-05-06 11:09:41.091  INFO 21696 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 11:09:41.093  INFO 21696 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 11:09:41.262  INFO 21696 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 11:09:41.528  INFO 21696 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 11:09:42.437  INFO 21696 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 11:09:42.694  INFO 21696 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 11:09:42.740  INFO 21696 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 11:09:42.743  INFO 21696 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.262 seconds (JVM running for 6.762)
2020-05-06 11:10:10.057  INFO 21696 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 11:10:10.058  INFO 21696 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 11:10:10.064  INFO 21696 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
2020-05-06 11:10:10.570 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:10:10.681 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:10:10.697 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:10:15.580 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:10:15.581 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:10:15.584 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:10:15.638 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:10:15.644 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:10:15.654 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:10:15.658 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:10:15.719 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:10:15.733 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.735 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:10:15.737 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:15.738 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.739 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:10:15.740 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:15.743 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.744 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:10:15.746 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:10:15.749 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.749 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:10:15.751 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:10:15.753 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.753 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:10:15.754 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:15.755 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.756 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:10:15.757 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:10:15.761 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.761 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:10:15.765 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:15.766 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.767 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:10:15.768 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:15.769 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:15.769 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:10:15.771 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:10:24.468 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:10:24.470 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 9(Long)
2020-05-06 11:10:24.476 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:10:24.481 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:24.482 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:10:24.485 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:10:24.597 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:10:24.598 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:10:24.602 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:10:24.603 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:10:24.605 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:10:24.613 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:10:27.752 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:10:27.752 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:10:27.754 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:10:27.760 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:10:27.767 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试文章标题1(String), 测试文章摘要(String), <p>测试文章内容</p>
(String), 测试文章内容(String), (String), true(Boolean), true(Boolean), 1(Long), 2020-05-06 11:10:27.746(Timestamp), 1(Integer), false(Boolean), true(Boolean), 9(Long)
2020-05-06 11:10:27.769 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:10:27.771 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:10:27.773 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 9(Long)
2020-05-06 11:10:27.774 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-05-06 11:10:27.776 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-05-06 11:10:27.780 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 9(Long), 1(Long), 9(Long), 2(Long), 9(Long), 3(Long)
2020-05-06 11:10:27.781 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-05-06 11:10:28.994 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:10:28.994 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:10:28.995 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:10:29.004 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:10:29.006 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:10:29.008 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:10:29.009 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:10:29.028 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:10:29.029 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.030 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:10:29.031 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:29.032 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.032 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:10:29.033 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:29.034 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.034 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:10:29.035 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:10:29.036 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.036 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:10:29.037 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:10:29.038 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.039 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:10:29.042 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:29.043 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.044 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:10:29.045 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:10:29.049 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.049 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:10:29.051 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:29.052 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.052 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:10:29.054 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:29.056 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:29.057 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:10:29.060 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:10:38.337 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:10:38.338 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 6(Long)
2020-05-06 11:10:38.343 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:10:38.344 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:10:38.345 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:10:38.348 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:10:38.425 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:10:38.425 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:10:38.425 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:10:38.426 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:10:38.427 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:10:38.429 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:14:40.468 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:14:40.469 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:14:40.476 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:14:40.516 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:14:40.516 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 6(Long)
2020-05-06 11:14:40.518 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:14:40.520 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:14:40.520 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:14:40.522 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:14:40.667 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:14:40.667 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:14:40.667 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:14:40.667 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:14:40.669 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:14:40.670 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:15:39.081 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:15:39.081 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:15:39.085 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:15:39.114 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:15:39.114 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 6(Long)
2020-05-06 11:15:39.117 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:15:39.118 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:15:39.119 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:15:39.120 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:15:39.270 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:15:39.270 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:15:39.271 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:15:39.271 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:15:39.272 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:15:39.272 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:16:02.551 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:16:02.552 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:16:02.555 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:16:02.599 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:16:02.600 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 6(Long)
2020-05-06 11:16:02.602 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:16:02.603 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:16:02.604 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:16:02.606 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:16:02.880 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:16:02.881 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:16:02.882 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:16:02.882 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:16:02.883 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:16:02.885 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:22:26.505 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:22:26.506 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:22:26.509 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:22:26.550 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:22:26.551 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 6(Long)
2020-05-06 11:22:26.554 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:22:26.555 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:22:26.555 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:22:26.558 DEBUG 21696 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:22:26.766 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:22:26.766 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:22:26.766 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:22:26.767 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:22:26.768 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:22:26.769 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:23:00.545 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:23:00.545 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:23:00.547 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:23:00.592 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:23:00.593 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 6(Long)
2020-05-06 11:23:00.603 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:23:00.606 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:23:00.608 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:23:00.613 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:23:00.886 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:23:00.886 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:23:00.886 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:23:00.886 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:23:00.889 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:23:00.891 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:23:24.165 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:23:24.165 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:23:24.165 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:23:24.165 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:23:24.168 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:23:24.169 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:23:28.168 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (top = ?) 
2020-05-06 11:23:28.169 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:23:28.170 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:24:20.208 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:24:20.209 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:24:20.211 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:24:20.459 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:24:20.459 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:24:20.459 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:24:20.459 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:24:20.461 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:24:20.462 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:24:24.369 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (top = ?) 
2020-05-06 11:24:24.370 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:24:24.371 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:24:25.555 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (recommend = ?) 
2020-05-06 11:24:25.557 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:24:25.557 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:25:17.832 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:25:17.832 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:25:17.834 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:25:17.845 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:25:17.845 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:25:17.847 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:25:17.847 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:25:17.859 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:25:17.861 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.861 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:25:17.863 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:17.864 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.865 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:25:17.866 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:17.867 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.867 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:25:17.868 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:25:17.868 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.868 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:25:17.869 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:25:17.870 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.870 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:25:17.873 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:17.874 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.874 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:25:17.877 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:25:17.878 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.878 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:25:17.879 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:17.879 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.879 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:25:17.880 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:17.881 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:17.881 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:25:17.882 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:25:19.125 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:25:19.126 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:25:19.128 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:25:19.129 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:19.129 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:25:19.131 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:19.218 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:25:19.218 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:25:19.218 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:25:19.219 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:25:19.222 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:25:19.222 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:25:22.831 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (top = ?) 
2020-05-06 11:25:22.832 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:25:22.833 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:25:35.737 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:25:35.738 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:25:35.741 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:25:35.785 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:25:35.785 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:25:35.788 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:25:35.789 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:35.790 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:25:35.792 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:35.988 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:25:35.989 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:25:35.989 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:25:35.989 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:25:35.990 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:25:35.990 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:25:41.855 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:25:41.855 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:25:41.856 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:25:41.883 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:25:41.885 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:25:41.887 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:25:41.888 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:41.888 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:25:41.890 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:42.019 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:25:42.019 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:25:42.020 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:25:42.020 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:25:42.022 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:25:42.022 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:25:57.789 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:25:57.789 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:25:57.792 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:25:57.830 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:25:57.831 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:25:57.833 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:25:57.834 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:25:57.834 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:25:57.836 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:25:57.985 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:25:57.985 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:25:57.986 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:25:57.986 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:25:57.987 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:25:57.987 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:26:02.729 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (recommend = ?) 
2020-05-06 11:26:02.729 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:26:02.731 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:26:04.157 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (top = ?) 
2020-05-06 11:26:04.158 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:26:04.159 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:26:33.709 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:26:33.709 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:26:33.712 DEBUG 21696 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:26:33.755 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:26:33.756 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:26:33.758 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:26:33.759 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:26:33.759 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:26:33.761 DEBUG 21696 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:26:33.967 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:26:33.967 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:26:33.970 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:26:33.970 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:26:33.970 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:26:33.974 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:26:38.291 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:26:38.291 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:26:38.292 DEBUG 21696 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:26:38.318 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:26:38.318 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:26:38.321 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:26:38.322 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:26:38.322 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:26:38.323 DEBUG 21696 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:26:38.437 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:26:38.437 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:26:38.438 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:26:38.438 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:26:38.439 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:26:38.439 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:26:47.366 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:26:47.366 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:26:47.367 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:26:47.367 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:26:47.368 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:26:47.370 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:27:33.732 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:27:33.733 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:27:33.734 DEBUG 21696 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:27:33.752 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:27:33.752 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:27:33.754 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:27:33.755 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:27:33.770 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:27:33.775 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.775 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:27:33.777 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:27:33.778 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.778 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:27:33.779 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:27:33.780 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.780 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:27:33.781 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:27:33.782 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.782 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:27:33.785 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:27:33.786 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.786 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:27:33.790 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:27:33.791 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.791 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:27:33.793 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:27:33.794 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.794 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:27:33.795 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:27:33.796 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.796 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:27:33.797 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:27:33.798 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:33.798 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:27:33.800 DEBUG 21696 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:27:35.328 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:27:35.328 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:27:35.330 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:27:35.331 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:27:35.331 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:27:35.333 DEBUG 21696 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:27:35.477 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:27:35.477 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:27:35.478 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:27:35.478 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:27:35.478 DEBUG 21696 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:27:35.480 DEBUG 21696 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:28:09.020  INFO 2684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 2684 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 11:28:09.022 DEBUG 2684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 11:28:09.023  INFO 2684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 11:28:09.066  INFO 2684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 11:28:09.066  INFO 2684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 11:28:10.033  INFO 2684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 11:28:10.040  INFO 2684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 11:28:10.040  INFO 2684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 11:28:10.118  INFO 2684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 11:28:10.118  INFO 2684 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1051 ms
2020-05-06 11:28:10.152  INFO 2684 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 11:28:10.154  INFO 2684 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 11:28:10.304  INFO 2684 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 11:28:10.596  INFO 2684 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 11:28:11.543  INFO 2684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 11:28:11.859  INFO 2684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 11:28:11.916  INFO 2684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 11:28:11.919  INFO 2684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.828 seconds (JVM running for 4.99)
2020-05-06 11:28:14.955  INFO 2684 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 11:28:14.955  INFO 2684 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 11:28:14.963  INFO 2684 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-05-06 11:28:15.809 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:28:16.007 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:28:16.033 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:28:16.177 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:28:16.184 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:28:16.191 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:28:16.203 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:16.209 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:28:16.216 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:28:16.585 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:28:16.587 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:28:16.598 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:28:16.598 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:28:16.600 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:28:16.604 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:28:28.038 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:28:28.038 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:28:28.040 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:28:28.088 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:28:28.089 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:28:28.101 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:28:28.103 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:28:28.167 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:28:28.173 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.176 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:28:28.181 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:28:28.183 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.183 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:28:28.185 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:28:28.186 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.187 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:28:28.188 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:28:28.193 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.195 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:28:28.198 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:28:28.199 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.200 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:28:28.201 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:28:28.202 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.203 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:28:28.204 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:28:28.205 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.205 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:28:28.210 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:28:28.213 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.214 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:28:28.217 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:28:28.218 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:28.219 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:28:28.220 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:28:29.470 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:28:29.470 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:28:29.471 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:28:29.472 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:28:29.472 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:28:29.480 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:28:56.017 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:28:56.019 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:28:56.023 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:28:56.024 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:28:56.025 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:28:56.027 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:28:56.244 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:28:56.245 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:28:56.245 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:28:56.246 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:28:56.248 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:28:56.252 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:29:42.247 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:29:42.248 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:29:42.254 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:29:42.317 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:29:42.319 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:29:42.323 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:29:42.326 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:29:42.327 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:29:42.330 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:29:42.604 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:29:42.604 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:29:42.605 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:29:42.606 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:29:42.609 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:29:42.613 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:29:59.650 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:29:59.652 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:29:59.658 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:29:59.710 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:29:59.710 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:29:59.712 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:29:59.713 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:29:59.714 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:29:59.716 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:30:00.015 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:30:00.015 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:30:00.018 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:30:00.022 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:30:00.023 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:30:00.027 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:30:03.762 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:30:03.763 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:30:03.767 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:30:03.815 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:30:03.816 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:30:03.821 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:30:03.822 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:30:03.823 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:30:03.825 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:30:04.070 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:30:04.070 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:30:04.070 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:30:04.070 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:30:04.073 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:30:04.073 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:30:21.843 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:30:21.844 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:30:21.851 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:30:21.905 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:30:21.906 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:30:21.908 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:30:21.910 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:30:21.910 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:30:21.914 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:30:22.239 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:30:22.239 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:30:22.240 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:30:22.240 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:30:22.241 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:30:22.243 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:30:47.496 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:30:47.496 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:30:47.500 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:30:47.575 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:30:47.577 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:30:47.580 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:30:47.582 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:30:47.582 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:30:47.585 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:30:47.966 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:30:47.966 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:30:47.967 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:30:47.967 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:30:47.968 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:30:47.971 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:30:54.288 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:30:54.289 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:30:54.293 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:30:54.338 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:30:54.341 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:30:54.345 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:30:54.346 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:30:54.347 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:30:54.350 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:30:54.603 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:30:54.604 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:30:54.609 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:30:54.610 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:30:54.610 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:30:54.613 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:31:19.007 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:31:19.008 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:31:19.012 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:31:19.077 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:31:19.077 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:31:19.080 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:31:19.083 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:31:19.084 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:31:19.088 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:31:19.469 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:31:19.469 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:31:19.471 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:31:19.483 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:31:19.484 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:31:19.488 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:31:39.390 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:31:39.390 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:31:39.394 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:31:39.454 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:31:39.454 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:31:39.457 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:31:39.458 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:31:39.458 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:31:39.463 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:31:39.836 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:31:39.836 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:31:39.838 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:31:39.838 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:31:39.838 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:31:39.840 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:32:10.195 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (top = ?) 
2020-05-06 11:32:10.196 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:32:10.197 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:32:23.809 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:32:23.809 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:32:23.811 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:32:23.859 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:32:23.859 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:32:23.862 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:32:23.864 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:32:23.864 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:32:23.868 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:32:24.139 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:32:24.140 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:32:24.141 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:32:24.141 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:32:24.141 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:32:24.143 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:33:00.593 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:33:00.594 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:33:00.594 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:33:00.598 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:33:00.602 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), 1(Long), 2020-05-06 11:33:00.587(Timestamp), 1(Integer), false(Boolean), false(Boolean), 1(Long)
2020-05-06 11:33:00.604 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:33:00.605 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:33:00.607 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-05-06 11:33:00.608 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-05-06 11:33:00.610 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-05-06 11:33:00.613 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-05-06 11:33:00.618 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-05-06 11:33:05.978 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:33:05.978 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:33:05.980 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:33:06.009 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:33:06.009 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:33:06.011 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:33:06.012 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:06.012 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:33:06.014 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:06.151 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:33:06.151 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:33:06.151 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:33:06.151 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:33:06.152 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:33:06.152 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:33:09.210 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (top = ?) 
2020-05-06 11:33:09.211 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:33:09.212 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:33:10.248 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (recommend = ?) 
2020-05-06 11:33:10.249 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-05-06 11:33:10.251 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-05-06 11:33:11.365 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:33:11.365 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:33:11.366 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:33:11.367 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:33:11.369 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), 1(Long), 2020-05-06 11:33:11.364(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Long)
2020-05-06 11:33:11.370 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:33:11.372 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:33:11.372 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-05-06 11:33:11.373 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-05-06 11:33:11.374 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-05-06 11:33:11.374 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-05-06 11:33:11.376 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-05-06 11:33:20.391 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:33:20.391 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:33:20.392 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:33:20.393 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:33:20.394 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), false(Boolean), 1(Long), 2020-05-06 11:33:20.39(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Long)
2020-05-06 11:33:20.396 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:33:20.397 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:33:20.397 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-05-06 11:33:20.398 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-05-06 11:33:20.399 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-05-06 11:33:20.399 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-05-06 11:33:20.400 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-05-06 11:33:30.360 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_user 
2020-05-06 11:33:30.361 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectPage   : ==> Parameters: 
2020-05-06 11:33:30.362 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectPage   : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,create_time,update_time FROM sys_user LIMIT ?,? 
2020-05-06 11:33:30.363 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:33:30.363 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectPage   : <==      Total: 1
2020-05-06 11:33:30.364  INFO 2684 --- [http-nio-8889-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Request ------ RequestLog {url = http://localhost:8889/admin/user, ip = 0:0:0:0:0:0:0:1, classMethod = site.alanliang.geekblog.controller.admin.UserController.listByPage, args = [1, 15], time = 9ms, description = 分页查询用户}
2020-05-06 11:33:30.365  INFO 2684 --- [http-nio-8889-exec-6] s.alanliang.geekblog.aspect.LogAspect    : Return ------ TableResult(count=1)
2020-05-06 11:33:35.389 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:33:35.389 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:33:35.390 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:33:35.403 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:33:35.403 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:33:35.405 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:33:35.405 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:33:35.421 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:33:35.422 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.422 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:33:35.423 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:35.424 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.424 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:33:35.425 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:35.425 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.426 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:33:35.427 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:33:35.427 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.427 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:33:35.428 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:33:35.429 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.429 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:33:35.429 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:35.430 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.430 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:33:35.431 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:33:35.436 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.436 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:33:35.437 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:35.439 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.439 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:33:35.443 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:35.443 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:35.443 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:33:35.444 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:33:42.944 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:33:42.944 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:33:42.948 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:33:42.949 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:42.949 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:33:42.950 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:43.046 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:33:43.047 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:33:43.047 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:33:43.047 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:33:43.049 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:33:43.049 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:33:45.582 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:33:45.582 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:33:45.582 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:33:45.583 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:33:45.584 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-05-06 11:33:45.581(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Long)
2020-05-06 11:33:45.586 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:33:45.587 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:33:45.587 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-05-06 11:33:45.588 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-05-06 11:33:45.589 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-05-06 11:33:45.589 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-05-06 11:33:45.590 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-05-06 11:33:46.754 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:33:46.755 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:33:46.756 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:33:46.765 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:33:46.765 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:33:46.766 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:33:46.767 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:33:46.772 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:33:46.773 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.773 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:33:46.774 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:46.775 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.775 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:33:46.776 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:46.777 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.777 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:33:46.778 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:33:46.780 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.781 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:33:46.782 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:33:46.783 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.783 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:33:46.784 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:46.785 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.785 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:33:46.786 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:33:46.787 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.787 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:33:46.788 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:46.788 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.788 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:33:46.789 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:46.789 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:46.790 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:33:46.790 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:33:54.234 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:33:54.234 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:33:54.235 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:33:54.236 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:33:54.236 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), 1(Long), 2020-05-06 11:33:54.233(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Long)
2020-05-06 11:33:54.238 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:33:54.239 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:33:54.239 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-05-06 11:33:54.239 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-05-06 11:33:54.239 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-05-06 11:33:54.239 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-05-06 11:33:54.240 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-05-06 11:33:56.987 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:33:56.987 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:33:56.988 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:33:57.189 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:33:57.190 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:33:57.191 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:33:57.206 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:33:57.206 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:33:57.208 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:33:57.208 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:33:57.220 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:33:57.221 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.221 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:33:57.223 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:57.224 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.224 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:33:57.225 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:57.227 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.228 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:33:57.232 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:33:57.233 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.233 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:33:57.234 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:33:57.235 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.235 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:33:57.236 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:57.236 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.237 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:33:57.237 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:33:57.238 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.238 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:33:57.239 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:57.239 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.239 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:33:57.240 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:33:57.241 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:33:57.241 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:33:57.241 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:34:06.645 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:34:06.645 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:34:06.646 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:34:06.647 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:06.648 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:34:06.649 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:06.769 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:34:06.769 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:34:06.769 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:34:06.769 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:34:06.770 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:34:06.770 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:34:10.345 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:34:10.345 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:34:10.346 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:34:10.347 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:34:10.348 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), 1(Long), 2020-05-06 11:34:10.345(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Long)
2020-05-06 11:34:10.350 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:34:10.351 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:34:10.351 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-05-06 11:34:10.352 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-05-06 11:34:10.352 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-05-06 11:34:10.353 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long)
2020-05-06 11:34:10.353 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-05-06 11:34:14.554 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:34:14.554 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:34:14.555 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:34:14.564 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:34:14.564 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:34:14.565 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:34:14.565 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:34:14.572 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:34:14.574 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.574 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:34:14.578 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:34:14.579 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.579 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:34:14.580 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:14.581 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.581 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:34:14.582 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:34:14.583 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.583 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:34:14.585 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:34:14.585 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.585 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:34:14.586 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:14.587 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.587 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:34:14.587 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:34:14.588 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.588 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:34:14.588 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:14.589 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.589 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:34:14.592 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:14.593 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:14.593 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:34:14.594 DEBUG 2684 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:34:25.616 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 11:34:25.616 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:34:25.617 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:34:25.618 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 11:34:25.618 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://q8rsjstig.bkt.clouddn.com/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), 1(Long), 2020-05-06 11:34:25.616(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Long)
2020-05-06 11:34:25.619 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 11:34:25.620 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 11:34:25.620 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-05-06 11:34:25.621 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-05-06 11:34:25.622 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-05-06 11:34:25.622 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-05-06 11:34:25.622 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-05-06 11:34:28.115 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:34:28.115 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:34:28.116 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:34:28.306 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:34:28.306 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:34:28.309 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:34:28.319 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:34:28.320 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:34:28.325 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:34:28.325 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:34:28.336 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:34:28.340 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.341 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:34:28.344 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:28.345 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.345 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:34:28.346 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:28.347 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.347 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:34:28.348 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:34:28.349 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.349 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:34:28.350 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:34:28.351 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.351 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:34:28.353 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:28.356 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.357 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:34:28.361 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:34:28.362 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.362 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:34:28.363 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:28.365 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.365 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:34:28.366 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:28.366 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:28.366 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:34:28.367 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:34:36.005 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 11:34:36.005 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-05-06 11:34:36.006 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 11:34:36.007 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:34:36.008 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:34:36.009 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:34:36.107 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:34:36.107 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:34:36.107 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:34:36.107 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:34:36.108 DEBUG 2684 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:34:36.108 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:47:30.441 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 5 
2020-05-06 11:47:30.442 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean)
2020-05-06 11:47:30.444 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 5
2020-05-06 11:47:30.445 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where recommend = 1 and published = 1 limit ? 
2020-05-06 11:47:30.447 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-05-06 11:47:30.449 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 2
2020-05-06 11:47:30.452 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 
2020-05-06 11:47:30.453 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-05-06 11:47:30.455 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 order by ta.create_time desc LIMIT ?,? 
2020-05-06 11:47:30.462 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-05-06 11:47:30.467 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-05-06 11:47:30.713 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:47:30.716 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:47:30.709(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 32(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:47:30.718 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:47:30.732 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:47:30.732 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:47:30.734 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:47:30.735 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:47:30.735 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:47:30.737 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:47:30.738 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:47:30.738 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:47:30.740 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:47:30.740 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:47:30.741 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:47:30.742 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:47:30.743 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:47:30.743 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:47:30.745 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:47:30.746 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:47:30.746 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:47:30.748 DEBUG 2684 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:47:33.695 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id 
2020-05-06 11:47:33.697 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-05-06 11:47:33.702 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 1
2020-05-06 11:47:33.706 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:47:33.706 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:47:33.705(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 12(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:47:33.708 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:47:39.206 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-05-06 11:47:39.208 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-05-06 11:47:39.212 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.g.d.C.listByArticleCount             : <==      Total: 5
2020-05-06 11:47:39.219 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:47:39.219 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:47:39.218(Timestamp), 访问分类页(String), INFO(String), site.alanliang.geekblog.controller.web.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 10(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:47:39.221 DEBUG 2684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:47:41.865 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id 
2020-05-06 11:47:41.865 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-05-06 11:47:41.869 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 1
2020-05-06 11:47:41.872 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:47:41.872 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:47:41.871(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 5(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:47:41.874 DEBUG 2684 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:47:48.943 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id 
2020-05-06 11:47:48.943 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-05-06 11:47:48.947 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 1
2020-05-06 11:47:48.951 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:47:48.951 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:47:48.95(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 6(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:47:48.953 DEBUG 2684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:48:07.018 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id 
2020-05-06 11:48:07.019 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-05-06 11:48:07.023 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 1
2020-05-06 11:48:07.029 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:48:07.029 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:48:07.025(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 6(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:48:07.031 DEBUG 2684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:48:15.425 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id LEFT JOIN t_article_tag tat ON ta.id = tat.article_id WHERE tat.tag_id = ? 
2020-05-06 11:48:15.426 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 1(Long)
2020-05-06 11:48:15.429 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id left join t_article_tag tat on ta.id = tat.article_id where tat.tag_id = ? LIMIT ?,? 
2020-05-06 11:48:15.431 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 1(Long), 0(Long), 6(Long)
2020-05-06 11:48:15.440 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByTagId         : <==      Total: 6
2020-05-06 11:48:15.445 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:48:15.446 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:48:15.447 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:48:15.448 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:48:15.448 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:48:15.449 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:48:15.450 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:48:15.451 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:48:15.454 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:48:15.455 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:48:15.456 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:48:15.457 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:48:15.458 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:48:15.458 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:48:15.459 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:48:15.459 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:48:15.459 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:48:15.460 DEBUG 2684 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:48:23.429 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id 
2020-05-06 11:48:23.430 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-05-06 11:48:23.431 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 1
2020-05-06 11:48:23.437 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:48:23.438 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:48:23.436(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:48:23.440 DEBUG 2684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:49:15.955 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id 
2020-05-06 11:49:15.956 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-05-06 11:49:15.959 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 1
2020-05-06 11:49:15.962 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:49:15.962 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:49:15.961(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 6(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:49:15.963 DEBUG 2684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:50:33.893  INFO 4612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4612 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 11:50:33.896 DEBUG 4612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 11:50:33.896  INFO 4612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 11:50:33.972  INFO 4612 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 11:50:33.972  INFO 4612 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 11:50:35.524  INFO 4612 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 11:50:35.536  INFO 4612 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 11:50:35.537  INFO 4612 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 11:50:35.645  INFO 4612 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 11:50:35.645  INFO 4612 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1673 ms
2020-05-06 11:50:35.697  INFO 4612 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 11:50:35.701  INFO 4612 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 11:50:35.907  INFO 4612 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 11:50:36.257  INFO 4612 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 11:50:37.546  INFO 4612 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 11:50:37.918  INFO 4612 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 11:50:37.978  INFO 4612 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 11:50:37.983  INFO 4612 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 5.017 seconds (JVM running for 6.434)
2020-05-06 11:50:46.613  INFO 4612 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 11:50:46.614  INFO 4612 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 11:50:46.628  INFO 4612 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-05-06 11:50:47.939 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-05-06 11:50:48.068 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-05-06 11:50:48.101 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 17
2020-05-06 11:50:48.209 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:50:48.226 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:50:48.175(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 222(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:50:48.228 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:51:05.095 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-05-06 11:51:05.119 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-05-06 11:51:05.122 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : <==      Total: 5
2020-05-06 11:51:05.126 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:51:05.128 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:51:05.124(Timestamp), 访问分类页(String), INFO(String), site.alanliang.geekblog.controller.web.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 35(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:51:05.133 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:51:10.270 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? 
2020-05-06 11:51:10.271 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 1(Long)
2020-05-06 11:51:10.287 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? LIMIT ?,? 
2020-05-06 11:51:10.290 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 1(Long), 0(Long), 6(Long)
2020-05-06 11:51:10.338 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 5
2020-05-06 11:51:10.350 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:10.351 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:51:10.353 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:51:10.354 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:10.355 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:51:10.356 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:51:10.358 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:10.359 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:51:10.362 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:51:10.363 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:10.363 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:51:10.365 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:51:10.366 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:10.366 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:51:10.369 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:51:48.069 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? 
2020-05-06 11:51:48.069 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 1(Long)
2020-05-06 11:51:48.072 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? LIMIT ?,? 
2020-05-06 11:51:48.072 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 1(Long), 0(Long), 6(Long)
2020-05-06 11:51:48.084 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 5
2020-05-06 11:51:48.087 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:48.088 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:51:48.090 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:51:48.091 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:48.091 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:51:48.093 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:51:48.095 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:48.095 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:51:48.097 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:51:48.100 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:48.101 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:51:48.103 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:51:48.105 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:51:48.106 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:51:48.108 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:52:54.621 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 11:52:54.624 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 11:52:54.625 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 11:52:54.626 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:52:54.629 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 11:53:10.983 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-05-06 11:53:10.984 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-05-06 11:53:10.987 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.C.listByArticleCount             : <==      Total: 5
2020-05-06 11:53:10.991 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? 
2020-05-06 11:53:10.992 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 1(Long)
2020-05-06 11:53:10.994 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:53:10.996 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? LIMIT ?,? 
2020-05-06 11:53:10.997 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:53:10.992(Timestamp), 访问分类页(String), INFO(String), site.alanliang.geekblog.controller.web.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 5(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:53:10.997 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 1(Long), 0(Long), 6(Long)
2020-05-06 11:53:11.000 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:53:11.009 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 5
2020-05-06 11:53:11.012 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:53:11.012 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:53:11.015 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:53:11.016 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:53:11.017 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:53:11.021 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:53:11.022 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:53:11.023 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:53:11.024 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:53:11.026 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:53:11.026 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:53:11.031 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:53:11.033 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:53:11.034 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:53:11.035 DEBUG 4612 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:53:15.383 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-05-06 11:53:15.383 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-05-06 11:53:15.385 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.d.C.listByArticleCount             : <==      Total: 5
2020-05-06 11:53:15.389 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:53:15.390 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:53:15.387(Timestamp), 访问分类页(String), INFO(String), site.alanliang.geekblog.controller.web.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:53:15.391 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? 
2020-05-06 11:53:15.392 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 2(Long)
2020-05-06 11:53:15.393 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:53:15.396 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? LIMIT ?,? 
2020-05-06 11:53:15.399 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 2(Long), 0(Long), 6(Long)
2020-05-06 11:53:15.408 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 1
2020-05-06 11:53:15.419 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:53:15.419 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:53:15.421 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:53:20.299 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-05-06 11:53:20.300 DEBUG 4612 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? 
2020-05-06 11:53:20.300 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-05-06 11:53:20.300 DEBUG 4612 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 3(Long)
2020-05-06 11:53:20.302 DEBUG 4612 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? LIMIT ?,? 
2020-05-06 11:53:20.302 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.g.d.C.listByArticleCount             : <==      Total: 5
2020-05-06 11:53:20.303 DEBUG 4612 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 3(Long), 0(Long), 6(Long)
2020-05-06 11:53:20.306 DEBUG 4612 --- [http-nio-8889-exec-1] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 1
2020-05-06 11:53:20.306 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:53:20.307 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:53:20.305(Timestamp), 访问分类页(String), INFO(String), site.alanliang.geekblog.controller.web.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 5(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:53:20.310 DEBUG 4612 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:53:20.311 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:53:20.312 DEBUG 4612 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:53:20.317 DEBUG 4612 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:53:35.131 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 11:53:35.132 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 11:53:35.133 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:53:35.133 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:53:35.135 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:53:35.137 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 11:55:25.752 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:55:25.754 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:55:25.758 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:55:25.992 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 11:55:25.993 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 11:55:25.998 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 11:55:25.999 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:55:26.002 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 11:55:39.140 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-05-06 11:55:39.141 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-05-06 11:55:39.148 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-05-06 11:55:39.149 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:55:39.152 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-05-06 11:56:21.745 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 11:56:21.745 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 11:56:21.752 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 11:56:22.027 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-05-06 11:56:22.027 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-05-06 11:56:22.030 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-05-06 11:56:22.031 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:56:22.038 DEBUG 4612 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-05-06 11:56:26.015 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-05-06 11:56:26.016 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-05-06 11:56:26.017 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id LEFT JOIN t_article_tag tat ON ta.id = tat.article_id WHERE tat.tag_id = ? 
2020-05-06 11:56:26.018 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 17
2020-05-06 11:56:26.018 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 1(Long)
2020-05-06 11:56:26.021 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id left join t_article_tag tat on ta.id = tat.article_id where tat.tag_id = ? LIMIT ?,? 
2020-05-06 11:56:26.022 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 1(Long), 0(Long), 6(Long)
2020-05-06 11:56:26.022 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 11:56:26.023 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 11:56:26.02(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 11:56:26.024 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 11:56:26.028 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : <==      Total: 6
2020-05-06 11:56:26.030 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:26.030 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:56:26.033 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:26.035 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:26.035 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:56:26.037 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:56:26.038 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:26.038 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:56:26.040 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:26.042 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:26.042 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:56:26.044 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:26.045 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:26.045 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:56:26.048 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:56:26.052 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:26.053 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:56:26.055 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:33.034 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 11:56:33.034 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 11:56:33.037 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 11:56:33.037 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:56:33.040 DEBUG 4612 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 11:56:40.514 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:56:40.514 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:56:40.515 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:56:40.524 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:56:40.525 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:56:40.527 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:56:40.531 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:56:40.538 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:56:40.539 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.539 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:56:40.540 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:40.541 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.541 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:56:40.542 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:40.544 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.545 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:56:40.548 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:56:40.549 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.549 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:56:40.551 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:56:40.552 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.553 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:56:40.554 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:40.555 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.555 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:56:40.556 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:56:40.556 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.556 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:56:40.557 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:40.558 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.558 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:56:40.559 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:56:40.559 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:56:40.559 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:56:40.563 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:58:07.890 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 11:58:07.891 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 11:58:07.893 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log LIMIT ?,? 
2020-05-06 11:58:07.894 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:58:07.896 DEBUG 4612 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 11:58:15.883 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-05-06 11:58:15.884 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-05-06 11:58:15.887 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-05-06 11:58:15.889 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:58:15.893 DEBUG 4612 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-05-06 11:58:21.081 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 11:58:21.081 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 11:58:21.083 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 11:58:21.083 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:58:21.085 DEBUG 4612 --- [http-nio-8889-exec-6] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 11:58:27.007 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 11:58:27.007 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 11:58:27.008 DEBUG 4612 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 11:58:27.014 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 11:58:27.014 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 11:58:27.016 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 11:58:27.016 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 11:58:27.030 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 11:58:27.031 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.031 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 11:58:27.033 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:58:27.033 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.033 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 11:58:27.035 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:58:27.037 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.037 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 11:58:27.040 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 11:58:27.040 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.041 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 11:58:27.041 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:58:27.042 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.042 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 11:58:27.043 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:58:27.043 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.043 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 11:58:27.044 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 11:58:27.045 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.045 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 11:58:27.046 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:58:27.046 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.046 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 11:58:27.047 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 11:58:27.048 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 11:58:27.048 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 11:58:27.049 DEBUG 4612 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 12:01:53.163  INFO 12340 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12340 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 12:01:53.167 DEBUG 12340 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 12:01:53.167  INFO 12340 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 12:01:53.222  INFO 12340 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 12:01:53.222  INFO 12340 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 12:01:54.231  INFO 12340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 12:01:54.238  INFO 12340 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 12:01:54.238  INFO 12340 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 12:01:54.307  INFO 12340 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 12:01:54.308  INFO 12340 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1086 ms
2020-05-06 12:01:54.342  INFO 12340 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 12:01:54.344  INFO 12340 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 12:01:54.486  INFO 12340 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 12:01:54.753  INFO 12340 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 12:01:55.565  INFO 12340 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 12:01:55.836  INFO 12340 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 12:01:55.876  INFO 12340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 12:01:55.878  INFO 12340 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.428 seconds (JVM running for 4.259)
2020-05-06 12:01:58.331  INFO 12340 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 12:01:58.331  INFO 12340 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 12:01:58.339  INFO 12340 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-05-06 12:01:58.978 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 12:01:59.065 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 12:01:59.084 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 12:01:59.412 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:01:59.414 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:01:59.424 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:01:59.427 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:01:59.436 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 12:06:32.372 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 12:06:32.373 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 12:06:32.379 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 12:06:32.641 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:06:32.642 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:06:32.644 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:06:32.644 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:06:32.654 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 12:06:55.878 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 12:06:55.879 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 12:06:55.883 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 12:06:56.108 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:06:56.108 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:06:56.114 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:06:56.114 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:06:56.119 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 12:07:07.516 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 12:07:07.517 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 12:07:07.521 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 12:07:07.862 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:07:07.862 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:07:07.864 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:07:07.865 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:07:07.869 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 12:07:17.143 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 12:07:17.143 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 12:07:17.147 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 12:07:17.472 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:07:17.473 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:07:17.477 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:07:17.477 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:07:17.481 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 12:07:42.591 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 12:07:42.592 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 12:07:42.595 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 12:07:42.861 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:07:42.862 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:07:42.864 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:07:42.864 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:07:42.872 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 12:08:25.716 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 12:08:25.717 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 12:08:25.721 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 12:08:26.089 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:08:26.090 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:08:26.094 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:08:26.095 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:08:26.099 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 12:08:38.295 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:08:38.296 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:08:38.298 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:08:38.299 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 50(Long)
2020-05-06 12:08:38.306 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 50
2020-05-06 12:12:35.249 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 12:12:35.250 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 12:12:35.252 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 10
2020-05-06 12:12:35.473 DEBUG 12340 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:12:35.473 DEBUG 12340 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:12:35.475 DEBUG 12340 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:12:35.475 DEBUG 12340 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:12:35.478 DEBUG 12340 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 12:12:59.362 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:12:59.362 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:12:59.364 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:12:59.365 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 100(Long)
2020-05-06 12:12:59.372 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 100
2020-05-06 12:27:41.862 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 12:27:41.863 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 12:27:41.866 DEBUG 12340 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 12:27:41.869 DEBUG 12340 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 12:27:41.871 DEBUG 12340 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 12:27:41.880 DEBUG 12340 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 12:27:42.804 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-05-06 12:27:42.812 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-05-06 12:27:42.814 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-05-06 12:27:42.815 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:27:42.816 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-05-06 12:27:43.300 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 12:27:43.300 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 12:27:43.302 DEBUG 12340 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 12:27:43.326 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 12:27:43.327 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 12:27:43.328 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 12:27:43.330 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:27:43.376 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 12:27:43.382 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.383 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 12:27:43.385 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 12:27:43.386 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.386 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 12:27:43.387 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 12:27:43.387 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.387 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 12:27:43.391 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 12:27:43.393 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.393 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 12:27:43.394 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 12:27:43.396 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.396 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 12:27:43.397 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 12:27:43.397 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.397 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 12:27:43.398 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 12:27:43.399 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.399 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 12:27:43.400 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 12:27:43.401 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.401 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 12:27:43.402 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 12:27:43.402 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 12:27:43.402 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 12:27:43.403 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 12:27:51.779 DEBUG 12340 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-05-06 12:27:51.780 DEBUG 12340 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-05-06 12:27:51.783 DEBUG 12340 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-05-06 12:27:51.784 DEBUG 12340 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:27:51.789 DEBUG 12340 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-05-06 12:28:13.366 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 12:28:13.366 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 12:28:13.368 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 12:28:13.368 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 12:28:13.369 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 13:38:52.567 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 13:38:52.567 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 13:38:52.569 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 13:38:52.569 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 15(Long), 15(Long)
2020-05-06 13:38:52.572 DEBUG 12340 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 13:38:53.584 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 13:38:53.584 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 13:38:53.586 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 13:38:53.586 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 30(Long), 15(Long)
2020-05-06 13:38:53.589 DEBUG 12340 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 13:38:54.701 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 13:38:54.702 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 13:38:54.703 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 13:38:54.703 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 13:38:54.705 DEBUG 12340 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 13:39:19.717 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-05-06 13:39:19.720 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-05-06 13:39:19.725 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : <==      Total: 5
2020-05-06 13:39:19.796 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 13:39:19.810 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 13:39:19.793(Timestamp), 访问分类页(String), INFO(String), site.alanliang.geekblog.controller.web.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 14(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 13:39:19.815 DEBUG 12340 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 13:39:21.725 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? 
2020-05-06 13:39:21.727 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 1(Long)
2020-05-06 13:39:21.730 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? LIMIT ?,? 
2020-05-06 13:39:21.732 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 1(Long), 0(Long), 6(Long)
2020-05-06 13:39:21.740 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 5
2020-05-06 13:39:21.748 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:21.748 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 13:39:21.750 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 13:39:21.751 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:21.751 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 13:39:21.755 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 13:39:21.757 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:21.758 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 13:39:21.760 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 13:39:21.762 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:21.762 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 13:39:21.764 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 13:39:21.765 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:21.765 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 13:39:21.767 DEBUG 12340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 13:39:25.828 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 5 
2020-05-06 13:39:25.830 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean)
2020-05-06 13:39:25.833 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 5
2020-05-06 13:39:25.836 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where recommend = 1 and published = 1 limit ? 
2020-05-06 13:39:25.842 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-05-06 13:39:25.844 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 2
2020-05-06 13:39:25.847 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 
2020-05-06 13:39:25.847 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-05-06 13:39:25.849 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 order by ta.create_time desc LIMIT ?,? 
2020-05-06 13:39:25.851 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-05-06 13:39:25.863 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-05-06 13:39:25.865 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 13:39:25.866 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-05-06 13:39:25.865(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 43(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 13:39:25.868 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-05-06 13:39:25.884 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:25.884 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 13:39:25.887 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 13:39:25.897 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:25.897 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 13:39:25.899 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 13:39:25.901 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:25.901 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 13:39:25.904 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 13:39:25.906 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:25.908 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 13:39:25.911 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 13:39:25.912 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:25.912 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 13:39:25.913 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 13:39:25.914 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 13:39:25.914 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 13:39:25.915 DEBUG 12340 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 13:55:35.200  INFO 12836 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12836 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 13:55:35.203 DEBUG 12836 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 13:55:35.203  INFO 12836 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 13:55:35.247  INFO 12836 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 13:55:35.247  INFO 12836 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 13:55:36.211  INFO 12836 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 13:55:36.218  INFO 12836 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 13:55:36.218  INFO 12836 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 13:55:36.292  INFO 12836 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 13:55:36.292  INFO 12836 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1045 ms
2020-05-06 13:55:36.329  INFO 12836 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 13:55:36.331  INFO 12836 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 13:55:36.413  WARN 12836 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessLogAspect': Unsatisfied dependency expressed through field 'accessLogService'; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'site.alanliang.geekblog.service.AccessLogService' available: expected single matching bean but found 2: accessLogServiceImpl,operationLogServiceImpl
2020-05-06 13:55:36.416  INFO 12836 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-05-06 13:55:36.431  INFO 12836 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-06 13:55:36.437 ERROR 12836 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field accessLogService in site.alanliang.geekblog.aspect.AccessLogAspect required a single bean, but 2 were found:
	- accessLogServiceImpl: defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\service\impl\AccessLogServiceImpl.class]
	- operationLogServiceImpl: defined in file [D:\idea\geekblog\target\classes\site\alanliang\geekblog\service\impl\OperationLogServiceImpl.class]


Action:

Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed

2020-05-06 13:56:26.278  INFO 16212 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 16212 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 13:56:26.281 DEBUG 16212 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 13:56:26.281  INFO 16212 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 13:56:26.325  INFO 16212 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 13:56:26.325  INFO 16212 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 13:56:27.293  INFO 16212 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 13:56:27.300  INFO 16212 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 13:56:27.300  INFO 16212 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 13:56:27.372  INFO 16212 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 13:56:27.372  INFO 16212 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1047 ms
2020-05-06 13:56:27.406  INFO 16212 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 13:56:27.408  INFO 16212 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 13:56:27.555  INFO 16212 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 13:56:27.800  INFO 16212 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 13:56:28.629  INFO 16212 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 13:56:28.899  INFO 16212 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 13:56:28.940  INFO 16212 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 13:56:28.942  INFO 16212 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.231 seconds (JVM running for 4.054)
2020-05-06 14:04:25.247  INFO 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 2520 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:04:25.251 DEBUG 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:04:25.252  INFO 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:04:25.307  INFO 2520 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:04:25.307  INFO 2520 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:04:26.527  INFO 2520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:04:26.535  INFO 2520 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:04:26.536  INFO 2520 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:04:26.633  INFO 2520 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:04:26.634  INFO 2520 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1327 ms
2020-05-06 14:04:26.700  INFO 2520 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:04:26.705  INFO 2520 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:04:26.948  INFO 2520 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:04:27.421  INFO 2520 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:04:28.454  INFO 2520 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:04:28.723  INFO 2520 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:04:28.765  INFO 2520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:04:28.767  INFO 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 4.22 seconds (JVM running for 5.58)
2020-05-06 14:04:57.608  INFO 2520 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:04:57.608  INFO 2520 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:04:57.619  INFO 2520 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-05-06 14:04:58.360 DEBUG 2520 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:04:58.508 DEBUG 2520 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:04:58.534 DEBUG 2520 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:04:58.633 ERROR 2520 --- [http-nio-8889-exec-4] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8889-exec-4] Exception processing template "admin/log/log-list": Error resolving template [admin/log/log-list], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/log/log-list], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-05-06 14:04:58.636 ERROR 2520 --- [http-nio-8889-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/log/log-list], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/log/log-list], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-05-06 14:05:20.192  INFO 2520 --- [Thread-14] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-06 14:05:20.193  INFO 2520 --- [Thread-14] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-05-06 14:05:20.658  INFO 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 2520 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:05:20.658 DEBUG 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:05:20.658  INFO 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:05:20.888  WARN 2520 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[site.alanliang.geekblog]' package. Please check your configuration.
2020-05-06 14:05:20.965  INFO 2520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:05:20.965  INFO 2520 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:05:20.966  INFO 2520 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:05:20.993  INFO 2520 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:05:20.994  INFO 2520 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 333 ms
2020-05-06 14:05:21.049  INFO 2520 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:05:21.091  INFO 2520 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:05:21.122  INFO 2520 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-05-06 14:05:21.167  WARN 2520 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.entity.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.entity.Article
2020-05-06 14:05:21.169  INFO 2520 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} closed
2020-05-06 14:05:21.170  INFO 2520 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-06 14:05:21.171  INFO 2520 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-05-06 14:05:21.180  INFO 2520 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-06 14:05:21.186 ERROR 2520 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.entity.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.entity.Article
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:656)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.entity.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.entity.Article
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 24 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.entity.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.entity.Article
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:595)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.afterPropertiesSet(MybatisSqlSessionFactoryBean.java:430)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.getObject(MybatisSqlSessionFactoryBean.java:628)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration.sqlSessionFactory(MybatisPlusAutoConfiguration.java:214)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$4d3cac99.CGLIB$sqlSessionFactory$1(<generated>)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$4d3cac99$$FastClassBySpringCGLIB$$79ae1f46.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$4d3cac99.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [D:\idea\geekblog\target\classes\mapper\ArticleMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.entity.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.entity.Article
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:122)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean.buildSqlSessionFactory(MybatisSqlSessionFactoryBean.java:593)
	... 38 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.entity.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.entity.Article
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:118)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:262)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElement(XMLMapperBuilder.java:253)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.resultMapElements(XMLMapperBuilder.java:245)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:118)
	... 40 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'site.alanliang.geekblog.entity.Article'.  Cause: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.entity.Article
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:120)
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:149)
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:116)
	... 44 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: site.alanliang.geekblog.entity.Article
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:200)
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:89)
	at org.apache.ibatis.io.Resources.classForName(Resources.java:261)
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:116)
	... 46 common frames omitted

2020-05-06 14:05:24.943  INFO 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 2520 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:05:24.943 DEBUG 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:05:24.943  INFO 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:05:25.321  INFO 2520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:05:25.322  INFO 2520 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:05:25.322  INFO 2520 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:05:25.352  INFO 2520 --- [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-05-06 14:05:25.352  INFO 2520 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 407 ms
2020-05-06 14:05:25.370  INFO 2520 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:05:25.370  INFO 2520 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:05:25.398  INFO 2520 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:05:25.486  INFO 2520 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} inited
2020-05-06 14:05:25.995  INFO 2520 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:05:26.145  INFO 2520 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:05:26.164  INFO 2520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:05:26.164  INFO 2520 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 1.256 seconds (JVM running for 62.977)
2020-05-06 14:05:26.166  INFO 2520 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-05-06 14:05:43.632  INFO 2520 --- [http-nio-8889-exec-2] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:05:43.633  INFO 2520 --- [http-nio-8889-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:05:43.645  INFO 2520 --- [http-nio-8889-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-05-06 14:05:43.960 DEBUG 2520 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:05:43.962 DEBUG 2520 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:05:43.970 DEBUG 2520 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:05:46.637 DEBUG 2520 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:05:46.639 DEBUG 2520 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 14:05:46.645 DEBUG 2520 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:05:46.648 DEBUG 2520 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:05:46.656 DEBUG 2520 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 14:05:47.958 DEBUG 2520 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:05:47.958 DEBUG 2520 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 14:05:47.959 DEBUG 2520 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:05:47.960 DEBUG 2520 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:05:47.966 DEBUG 2520 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 14:08:56.438  INFO 368 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 368 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:08:56.441 DEBUG 368 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:08:56.441  INFO 368 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:08:56.489  INFO 368 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:08:56.489  INFO 368 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:08:57.575  INFO 368 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:08:57.582  INFO 368 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:08:57.583  INFO 368 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:08:57.657  INFO 368 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:08:57.657  INFO 368 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1168 ms
2020-05-06 14:08:57.693  INFO 368 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:08:57.695  INFO 368 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:08:57.857  INFO 368 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:08:58.157  INFO 368 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:08:59.052  INFO 368 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:08:59.356  INFO 368 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:08:59.399  INFO 368 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:08:59.401  INFO 368 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.659 seconds (JVM running for 4.772)
2020-05-06 14:09:04.832  INFO 368 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:09:04.833  INFO 368 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:09:04.842  INFO 368 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-05-06 14:09:05.294 DEBUG 368 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:09:05.387 DEBUG 368 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:09:05.405 DEBUG 368 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:10:18.890  INFO 7504 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 7504 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:10:18.894 DEBUG 7504 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:10:18.894  INFO 7504 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:10:18.934  INFO 7504 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:10:18.934  INFO 7504 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:10:19.878  INFO 7504 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:10:19.884  INFO 7504 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:10:19.885  INFO 7504 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:10:19.958  INFO 7504 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:10:19.958  INFO 7504 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1024 ms
2020-05-06 14:10:19.994  INFO 7504 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:10:19.996  INFO 7504 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:10:20.139  INFO 7504 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:10:20.390  INFO 7504 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:10:21.229  INFO 7504 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:10:21.506  INFO 7504 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:10:21.550  INFO 7504 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:10:21.553  INFO 7504 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.297 seconds (JVM running for 4.243)
2020-05-06 14:10:31.840  INFO 7504 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:10:31.840  INFO 7504 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:10:31.851  INFO 7504 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-05-06 14:10:32.554 DEBUG 7504 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:10:32.640 DEBUG 7504 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:10:32.656 DEBUG 7504 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:10:32.958 DEBUG 7504 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:10:32.960 DEBUG 7504 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 14:10:32.971 DEBUG 7504 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:10:32.974 DEBUG 7504 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:10:32.984 DEBUG 7504 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 14:11:07.746 DEBUG 7504 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:11:07.746 DEBUG 7504 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 14:11:07.748 DEBUG 7504 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:11:07.748 DEBUG 7504 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:11:07.754 DEBUG 7504 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 14:11:41.509  INFO 828 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 828 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:11:41.512 DEBUG 828 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:11:41.512  INFO 828 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:11:41.556  INFO 828 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:11:41.557  INFO 828 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:11:42.515  INFO 828 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:11:42.522  INFO 828 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:11:42.522  INFO 828 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:11:42.594  INFO 828 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:11:42.594  INFO 828 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1037 ms
2020-05-06 14:11:42.628  INFO 828 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:11:42.630  INFO 828 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:11:42.783  INFO 828 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:11:43.034  INFO 828 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:11:43.891  INFO 828 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:11:44.176  INFO 828 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:11:44.218  INFO 828 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:11:44.221  INFO 828 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.374 seconds (JVM running for 4.236)
2020-05-06 14:11:46.435  INFO 828 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:11:46.436  INFO 828 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:11:46.446  INFO 828 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-05-06 14:11:47.063 DEBUG 828 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:11:47.154 DEBUG 828 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:11:47.170 DEBUG 828 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:11:47.491 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:11:47.493 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:11:47.504 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:11:47.507 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:11:47.514 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-05-06 14:11:52.633 DEBUG 828 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:11:52.633 DEBUG 828 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:11:52.635 DEBUG 828 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:11:52.635 DEBUG 828 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-05-06 14:11:52.643 DEBUG 828 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-05-06 14:11:53.785 DEBUG 828 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:11:53.787 DEBUG 828 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:11:53.791 DEBUG 828 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:11:53.999 DEBUG 828 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:11:53.999 DEBUG 828 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:11:54.000 DEBUG 828 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:11:54.001 DEBUG 828 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:11:54.004 DEBUG 828 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-05-06 14:11:58.077 DEBUG 828 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:11:58.077 DEBUG 828 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:11:58.078 DEBUG 828 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:11:58.079 DEBUG 828 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-05-06 14:11:58.083 DEBUG 828 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-05-06 14:11:59.548 DEBUG 828 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:11:59.549 DEBUG 828 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:11:59.550 DEBUG 828 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:11:59.550 DEBUG 828 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 30(Long), 15(Long)
2020-05-06 14:11:59.553 DEBUG 828 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-05-06 14:12:00.379 DEBUG 828 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:12:00.379 DEBUG 828 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:12:00.381 DEBUG 828 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:12:00.382 DEBUG 828 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:12:00.385 DEBUG 828 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-05-06 14:12:17.060 DEBUG 828 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:12:17.061 DEBUG 828 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:12:17.064 DEBUG 828 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:12:17.356 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:12:17.358 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:12:17.361 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:12:17.362 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:12:17.367 DEBUG 828 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-05-06 14:16:20.246  INFO 5124 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 5124 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:16:20.251 DEBUG 5124 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:16:20.251  INFO 5124 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:16:20.290  INFO 5124 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:16:20.290  INFO 5124 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:16:21.274  INFO 5124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:16:21.280  INFO 5124 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:16:21.280  INFO 5124 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:16:21.354  INFO 5124 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:16:21.354  INFO 5124 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1064 ms
2020-05-06 14:16:21.390  INFO 5124 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:16:21.392  INFO 5124 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:16:21.535  INFO 5124 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:16:21.801  INFO 5124 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:16:22.662  INFO 5124 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:16:22.949  INFO 5124 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:16:22.992  INFO 5124 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:16:22.995  INFO 5124 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.396 seconds (JVM running for 4.198)
2020-05-06 14:16:26.118  INFO 5124 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:16:26.118  INFO 5124 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:16:26.126  INFO 5124 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-05-06 14:16:26.699 DEBUG 5124 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:16:26.799 DEBUG 5124 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:16:26.819 DEBUG 5124 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:16:27.139 DEBUG 5124 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-05-06 14:16:27.141 DEBUG 5124 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:16:34.444 DEBUG 5124 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:16:34.444 DEBUG 5124 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:16:34.447 DEBUG 5124 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:16:34.486 DEBUG 5124 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:16:34.487 DEBUG 5124 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:16:34.497 DEBUG 5124 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:16:34.501 DEBUG 5124 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:16:34.551 DEBUG 5124 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 14:16:34.581 ERROR 5124 --- [http-nio-8889-exec-5] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8889/admin/article, Exception : null
2020-05-06 14:16:34.583  WARN 5124 --- [http-nio-8889-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-05-06 14:16:39.427 DEBUG 5124 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:16:39.427 DEBUG 5124 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:16:39.432 DEBUG 5124 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:16:39.690 DEBUG 5124 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:16:39.692 DEBUG 5124 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:16:39.696 DEBUG 5124 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:16:39.708 DEBUG 5124 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:16:39.710 DEBUG 5124 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:16:39.713 DEBUG 5124 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:16:39.713 DEBUG 5124 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:16:39.754 DEBUG 5124 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 14:16:39.758 ERROR 5124 --- [http-nio-8889-exec-10] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8889/admin/article, Exception : null
2020-05-06 14:16:39.761  WARN 5124 --- [http-nio-8889-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-05-06 14:17:14.877 DEBUG 5124 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:17:14.878 DEBUG 5124 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:17:14.882 DEBUG 5124 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:17:14.883 DEBUG 5124 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:17:14.899 DEBUG 5124 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 14:17:14.900 ERROR 5124 --- [http-nio-8889-exec-2] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8889/admin/article, Exception : null
2020-05-06 14:17:14.901  WARN 5124 --- [http-nio-8889-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-05-06 14:17:59.390  INFO 20264 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 20264 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:17:59.393 DEBUG 20264 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:17:59.394  INFO 20264 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:17:59.441  INFO 20264 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:17:59.442  INFO 20264 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:18:00.494  INFO 20264 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:18:00.500  INFO 20264 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:18:00.500  INFO 20264 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:18:00.573  INFO 20264 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:18:00.573  INFO 20264 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1131 ms
2020-05-06 14:18:00.607  INFO 20264 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:18:00.609  INFO 20264 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:18:00.761  INFO 20264 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:18:01.021  INFO 20264 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:18:01.872  INFO 20264 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:18:02.149  INFO 20264 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:18:02.191  INFO 20264 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:18:02.193  INFO 20264 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.509 seconds (JVM running for 4.33)
2020-05-06 14:18:05.076  INFO 20264 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:18:05.076  INFO 20264 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:18:05.084  INFO 20264 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-05-06 14:18:05.788 DEBUG 20264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:18:05.959 DEBUG 20264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:18:05.989 DEBUG 20264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:18:06.576 DEBUG 20264 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:18:06.577 DEBUG 20264 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:18:06.581 DEBUG 20264 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:18:06.699 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:18:06.705 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:18:06.719 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:18:06.728 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:18:06.809 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 14:18:06.826 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.827 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 14:18:06.829 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:18:06.833 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.833 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 14:18:06.838 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:18:06.840 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.841 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 14:18:06.843 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 14:18:06.845 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.845 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 14:18:06.848 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:18:06.851 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.852 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 14:18:06.855 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:18:06.858 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.859 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 14:18:06.862 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:18:06.864 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.864 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 14:18:06.867 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:18:06.871 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.872 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 14:18:06.875 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:18:06.877 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:18:06.878 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 14:18:06.881 DEBUG 20264 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:19:27.444  INFO 12072 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12072 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:19:27.450 DEBUG 12072 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:19:27.450  INFO 12072 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:19:27.495  INFO 12072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:19:27.495  INFO 12072 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:19:28.443  INFO 12072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:19:28.450  INFO 12072 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:19:28.450  INFO 12072 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:19:28.525  INFO 12072 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:19:28.525  INFO 12072 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1029 ms
2020-05-06 14:19:28.562  INFO 12072 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:19:28.565  INFO 12072 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:19:28.710  INFO 12072 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:19:28.969  INFO 12072 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:19:29.825  INFO 12072 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:19:30.109  INFO 12072 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:19:30.151  INFO 12072 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:19:30.153  INFO 12072 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.295 seconds (JVM running for 4.086)
2020-05-06 14:19:33.178  INFO 12072 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:19:33.178  INFO 12072 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:19:33.186  INFO 12072 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-05-06 14:19:33.931 DEBUG 12072 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:19:34.077 DEBUG 12072 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:19:34.095 DEBUG 12072 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:19:34.377 DEBUG 12072 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:19:34.378 DEBUG 12072 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:19:34.383 DEBUG 12072 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:19:34.443 DEBUG 12072 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:19:34.445 DEBUG 12072 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:19:34.455 DEBUG 12072 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:19:34.459 DEBUG 12072 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:19:34.508 DEBUG 12072 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 14:19:34.534 ERROR 12072 --- [http-nio-8889-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : Request URL : http://localhost:8889/admin/article, Exception : null
2020-05-06 14:19:34.536  WARN 12072 --- [http-nio-8889-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-05-06 14:26:50.650  INFO 4340 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4340 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:26:50.654 DEBUG 4340 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:26:50.654  INFO 4340 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:26:50.692  INFO 4340 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:26:50.692  INFO 4340 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:26:51.649  INFO 4340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:26:51.655  INFO 4340 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:26:51.655  INFO 4340 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:26:51.727  INFO 4340 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:26:51.727  INFO 4340 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1035 ms
2020-05-06 14:26:51.760  INFO 4340 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:26:51.762  INFO 4340 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:26:51.909  INFO 4340 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:26:52.164  INFO 4340 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:26:53.003  INFO 4340 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:26:53.311  INFO 4340 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:26:53.358  INFO 4340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:26:53.361  INFO 4340 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.309 seconds (JVM running for 4.121)
2020-05-06 14:26:57.488  INFO 4340 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:26:57.489  INFO 4340 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:26:57.495  INFO 4340 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
2020-05-06 14:26:57.942 DEBUG 4340 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:26:58.035 DEBUG 4340 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:26:58.052 DEBUG 4340 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:26:58.337 DEBUG 4340 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:26:58.341 DEBUG 4340 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:26:58.344 DEBUG 4340 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:26:58.398 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:26:58.400 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:26:58.409 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:26:58.413 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:26:58.461 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 14:26:58.471 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.474 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 14:26:58.477 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:26:58.478 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.479 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 14:26:58.480 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:26:58.482 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.483 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 14:26:58.484 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 14:26:58.485 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.486 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 14:26:58.489 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:26:58.492 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.492 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 14:26:58.494 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:26:58.495 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.495 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 14:26:58.496 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:26:58.497 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.497 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 14:26:58.498 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:26:58.499 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.500 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 14:26:58.501 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:26:58.502 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:26:58.502 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 14:26:58.504 DEBUG 4340 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:28:20.659 DEBUG 4340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:28:20.659 DEBUG 4340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:28:20.663 DEBUG 4340 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:28:20.877 DEBUG 4340 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:28:20.878 DEBUG 4340 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:28:20.880 DEBUG 4340 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:28:20.890 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:28:20.890 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:28:20.893 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:28:20.893 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:28:20.920 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 14:28:20.924 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.924 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 14:28:20.926 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:28:20.927 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.927 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 14:28:20.929 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:28:20.929 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.930 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 14:28:20.931 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 14:28:20.932 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.932 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 14:28:20.933 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:28:20.936 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.937 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 14:28:20.939 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:28:20.940 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.941 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 14:28:20.942 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:28:20.946 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.946 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 14:28:20.948 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:28:20.950 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.952 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 14:28:20.955 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:28:20.957 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:28:20.957 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 14:28:20.958 DEBUG 4340 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:29:07.204  INFO 19044 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 19044 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:29:07.207 DEBUG 19044 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:29:07.208  INFO 19044 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:29:07.250  INFO 19044 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:29:07.251  INFO 19044 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:29:08.239  INFO 19044 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:29:08.245  INFO 19044 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:29:08.245  INFO 19044 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:29:08.317  INFO 19044 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:29:08.317  INFO 19044 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1066 ms
2020-05-06 14:29:08.350  INFO 19044 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:29:08.353  INFO 19044 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:29:08.493  INFO 19044 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:29:08.750  INFO 19044 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:29:09.612  INFO 19044 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:29:09.910  INFO 19044 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:29:09.952  INFO 19044 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:29:09.955  INFO 19044 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.324 seconds (JVM running for 4.119)
2020-05-06 14:29:12.546  INFO 19044 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:29:12.546  INFO 19044 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:29:12.553  INFO 19044 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-05-06 14:29:13.329 DEBUG 19044 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:29:13.437 DEBUG 19044 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:29:13.453 DEBUG 19044 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:29:13.720 DEBUG 19044 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:29:13.722 DEBUG 19044 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:29:13.727 DEBUG 19044 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:29:13.782 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:29:13.784 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:29:13.794 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:29:13.797 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:29:13.842 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-05-06 14:29:13.902 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:29:13.910 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:29:13.898(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 90(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:29:13.912 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:29:13.930 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.931 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 14:29:13.934 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:29:13.936 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.936 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 14:29:13.939 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:29:13.941 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.941 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 14:29:13.943 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 14:29:13.945 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.945 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 14:29:13.947 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:29:13.948 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.949 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 14:29:13.950 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:29:13.951 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.952 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 14:29:13.954 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:29:13.958 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.958 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 14:29:13.960 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:29:13.961 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.961 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 14:29:13.962 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:29:13.963 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:29:13.963 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 14:29:13.965 DEBUG 19044 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:31:40.176  INFO 19204 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 19204 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-05-06 14:31:40.179 DEBUG 19204 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-05-06 14:31:40.180  INFO 19204 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-05-06 14:31:40.230  INFO 19204 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-06 14:31:40.230  INFO 19204 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-06 14:31:41.208  INFO 19204 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-05-06 14:31:41.214  INFO 19204 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-05-06 14:31:41.215  INFO 19204 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-05-06 14:31:41.287  INFO 19204 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-05-06 14:31:41.287  INFO 19204 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1056 ms
2020-05-06 14:31:41.319  INFO 19204 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-05-06 14:31:41.321  INFO 19204 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-05-06 14:31:41.464  INFO 19204 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-05-06 14:31:41.718  INFO 19204 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-05-06 14:31:42.563  INFO 19204 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-05-06 14:31:42.838  INFO 19204 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-05-06 14:31:42.890  INFO 19204 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-05-06 14:31:42.893  INFO 19204 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.293 seconds (JVM running for 4.099)
2020-05-06 14:31:53.756  INFO 19204 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-06 14:31:53.757  INFO 19204 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-05-06 14:31:53.762  INFO 19204 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms
2020-05-06 14:31:54.214 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:31:54.214 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 14:31:54.353 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 14:31:54.353 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:31:54.373 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:31:54.378 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 14:32:19.993 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 14:32:19.994 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 14:32:19.996 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 14:32:20.001 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:32:20.009 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 测试日志(String), 测试日志(String), <p>测试日志</p>
(String), 测试日志(String), (String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), 1(Long), 2020-05-06 14:32:19.983(Timestamp), 2020-05-06 14:32:19.983(Timestamp), 1(Integer), false(Boolean), false(Boolean)
2020-05-06 14:32:20.011 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-05-06 14:32:20.015 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-05-06 14:32:20.015 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 14(Long), 1(Long), 14(Long), 2(Long), 14(Long), 3(Long)
2020-05-06 14:32:20.016 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-05-06 14:32:20.050 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:32:20.051 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:32:20.048(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: Article(id=14, title=测试日志, summary=测试日志, content=<p>测试日志</p>
, textContent=测试日志, cover=, views=0, likes=0, comments=0, appreciable=false, commentable=true, published=true, authorId=null, categoryId=1, createTime=Wed May 06 14:32:19 CST 2020, updateTime=Wed May 06 14:32:19 CST 2020, type=1, category=null, tagList=[Tag(id=1, name=JavaEE, createTime=null, updateTime=null, color=null, articleCount=null), Tag(id=2, name=Spring, createTime=null, updateTime=null, color=null, articleCount=null), Tag(id=3, name=Mybatis, createTime=null, updateTime=null, color=null, articleCount=null)], top=false, recommend=false, author=null) }(String), 0:0:0:0:0:0:0:1(String), 35(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:32:20.052 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:32:21.321 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:32:21.322 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:32:21.324 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:32:21.374 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:32:21.383 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:32:21.390 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:32:21.399 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:32:21.448 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 10
2020-05-06 14:32:21.452 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:32:21.453 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:32:21.451(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 99(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:32:21.454 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:32:21.465 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.480 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 14:32:21.481 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:32:21.482 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.483 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 14:32:21.484 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:32:21.485 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.485 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 14:32:21.486 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 14:32:21.488 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.488 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 14:32:21.488 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:32:21.489 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.490 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 14:32:21.492 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:32:21.495 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.496 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 14(Long)
2020-05-06 14:32:21.498 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:32:21.500 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.500 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 14:32:21.501 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:32:21.502 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.503 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 14:32:21.504 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:32:21.504 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.505 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 14:32:21.506 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:32:21.507 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:32:21.507 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 14:32:21.508 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:33:32.921 DEBUG 19204 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-05-06 14:33:32.922 DEBUG 19204 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:33:32.923 DEBUG 19204 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_operation_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:33:32.927 DEBUG 19204 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:33:32.930 DEBUG 19204 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 3
2020-05-06 14:34:56.437 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:34:56.437 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:34:56.440 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:34:56.448 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:34:56.449 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:34:56.450 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:34:56.450 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:34:56.470 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 10
2020-05-06 14:34:56.476 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:34:56.477 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:34:56.475(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 25(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:34:56.480 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:34:56.482 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.483 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 14:34:56.484 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:34:56.485 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.485 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 14:34:56.486 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:34:56.487 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.489 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 14:34:56.492 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 14:34:56.493 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.494 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 14:34:56.495 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:34:56.496 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.496 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 14:34:56.497 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:34:56.500 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.500 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 14(Long)
2020-05-06 14:34:56.501 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:34:56.504 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.506 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 14:34:56.509 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:34:56.510 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.510 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 14:34:56.512 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:34:56.513 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.513 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 14:34:56.514 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:34:56.514 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:34:56.515 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 14:34:56.516 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:35:07.344 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend FROM t_article WHERE id=? 
2020-05-06 14:35:07.346 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 14(Long)
2020-05-06 14:35:07.350 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-05-06 14:35:07.352 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:07.353 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 14(Long)
2020-05-06 14:35:07.355 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:35:07.473 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-05-06 14:35:07.473 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 14:35:07.473 DEBUG 19204 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:35:07.473 DEBUG 19204 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:35:07.474 DEBUG 19204 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:35:07.476 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 14:35:14.494 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name FROM t_tag 
2020-05-06 14:35:14.494 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-05-06 14:35:14.496 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 17
2020-05-06 14:35:14.500 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=? WHERE id=? 
2020-05-06 14:35:14.503 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试日志1(String), 测试日志1(String), <p>测试日志1</p>
(String), 测试日志1(String), (String), false(Boolean), true(Boolean), 1(Long), 2020-05-06 14:35:14.494(Timestamp), 1(Integer), false(Boolean), false(Boolean), 14(Long)
2020-05-06 14:35:14.505 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-05-06 14:35:14.507 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-05-06 14:35:14.509 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 14(Long)
2020-05-06 14:35:14.510 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-05-06 14:35:14.510 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-05-06 14:35:14.511 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 14(Long), 1(Long), 14(Long), 2(Long), 14(Long), 3(Long)
2020-05-06 14:35:14.511 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-05-06 14:35:14.517 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:35:14.517 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:35:14.516(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 20(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:35:14.519 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:35:22.848 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-05-06 14:35:22.849 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-05-06 14:35:22.850 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-05-06 14:35:22.859 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:35:22.859 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:35:22.860 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:35:22.860 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:35:22.872 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 10
2020-05-06 14:35:22.877 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:35:22.879 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:35:22.874(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 15(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:35:22.880 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:35:22.889 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.890 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 14:35:22.891 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:35:22.892 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.892 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 14:35:22.893 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:35:22.893 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.893 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 14:35:22.894 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 14:35:22.895 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.895 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-05-06 14:35:22.896 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:35:22.898 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.899 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-05-06 14:35:22.900 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:35:22.902 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.902 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 14(Long)
2020-05-06 14:35:22.903 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:35:22.904 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.904 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 14:35:22.905 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:35:22.906 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.906 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 14:35:22.907 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:35:22.908 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.908 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 14:35:22.909 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:35:22.910 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:35:22.910 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 14:35:22.911 DEBUG 19204 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:35:48.156 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.deleteById       : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-05-06 14:35:48.156 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.deleteById       : ==> Parameters: 14(Long)
2020-05-06 14:35:48.157 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.deleteById       : <==    Updates: 1
2020-05-06 14:35:48.161 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:35:48.161 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:35:48.16(Timestamp), 删除文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.remove()(String), { id: 14 }(String), 0:0:0:0:0:0:0:1(String), 4(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:35:48.162 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:36:01.337 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.deleteBatchIds   : ==>  Preparing: DELETE FROM t_article WHERE id IN ( ? , ? ) 
2020-05-06 14:36:01.339 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.deleteBatchIds   : ==> Parameters: 9(Long), 11(Long)
2020-05-06 14:36:01.342 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.deleteBatchIds   : <==    Updates: 2
2020-05-06 14:36:01.347 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:36:01.348 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:36:01.346(Timestamp), 批量删除文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.batchRemove()(String), { idList: [9, 11] }(String), 0:0:0:0:0:0:0:1(String), 9(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:36:01.350 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:36:01.367 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-05-06 14:36:01.367 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-05-06 14:36:01.368 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-05-06 14:36:01.369 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:36:01.374 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 7
2020-05-06 14:36:01.377 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-06 14:36:01.378 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-05-06 14:36:01.376(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), (String), Chrome 8(String), 内网IP(String)
2020-05-06 14:36:01.380 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-05-06 14:36:01.384 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:36:01.384 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-05-06 14:36:01.387 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:36:01.388 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:36:01.388 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-05-06 14:36:01.389 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:36:01.391 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:36:01.391 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-05-06 14:36:01.392 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:36:01.393 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:36:01.393 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-05-06 14:36:01.394 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:36:01.395 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:36:01.395 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-05-06 14:36:01.396 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-05-06 14:36:01.396 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:36:01.397 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-05-06 14:36:01.397 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-05-06 14:36:01.398 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-05-06 14:36:01.398 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-05-06 14:36:01.399 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-05-06 14:36:25.816 DEBUG 19204 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-05-06 14:36:25.817 DEBUG 19204 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:36:25.817 DEBUG 19204 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_operation_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:36:25.818 DEBUG 19204 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:36:25.819 DEBUG 19204 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 9
2020-05-06 14:38:37.774 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.deleteById  : ==>  Preparing: DELETE FROM sys_operation_log WHERE id=? 
2020-05-06 14:38:37.775 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.deleteById  : ==> Parameters: 526(Long)
2020-05-06 14:38:37.775 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.deleteById  : <==    Updates: 1
2020-05-06 14:38:41.141 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:38:41.142 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:38:41.143 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:38:41.347 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-05-06 14:38:41.347 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:38:41.351 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_operation_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:38:41.352 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:38:41.357 DEBUG 19204 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 8
2020-05-06 14:38:44.953 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.d.O.deleteBatchIds                 : ==>  Preparing: DELETE FROM sys_operation_log WHERE id IN ( ? , ? , ? , ? , ? , ? , ? , ? ) 
2020-05-06 14:38:44.954 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.d.O.deleteBatchIds                 : ==> Parameters: 533(Long), 534(Long), 532(Long), 531(Long), 530(Long), 529(Long), 528(Long), 527(Long)
2020-05-06 14:38:44.956 DEBUG 19204 --- [http-nio-8889-exec-3] s.a.g.d.O.deleteBatchIds                 : <==    Updates: 8
2020-05-06 14:38:44.976 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-05-06 14:38:44.976 DEBUG 19204 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:38:46.084 DEBUG 19204 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,title,href,pid,icon,target,sort,status,remark,create_time,update_time FROM sys_menu WHERE (status = ?) 
2020-05-06 14:38:46.085 DEBUG 19204 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: true(Boolean)
2020-05-06 14:38:46.251 DEBUG 19204 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 11
2020-05-06 14:38:46.443 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-05-06 14:38:46.443 DEBUG 19204 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-05-06 14:38:48.853 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:38:48.854 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 14:38:48.856 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:38:48.857 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:38:48.862 DEBUG 19204 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 14:39:45.693 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-05-06 14:39:45.693 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-05-06 14:39:45.694 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-05-06 14:39:45.695 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-05-06 14:39:45.698 DEBUG 19204 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-05-06 14:39:47.818 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-05-06 14:39:47.818 DEBUG 19204 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
