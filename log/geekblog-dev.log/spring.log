2020-06-12 09:25:59.562  INFO 13512 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 13512 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 09:25:59.581 DEBUG 13512 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 09:25:59.582  INFO 13512 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 09:25:59.692  INFO 13512 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 09:25:59.692  INFO 13512 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 09:26:01.763  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 09:26:01.766  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 09:26:01.861  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 87ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 09:26:01.867  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 09:26:01.868  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 09:26:01.880  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 09:26:01.896  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 09:26:01.897  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 09:26:01.919  INFO 13512 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 09:26:01.919  INFO 13512 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 Redis repository interfaces.
2020-06-12 09:26:02.550  INFO 13512 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 09:26:02.768  INFO 13512 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 09:26:02.773  INFO 13512 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@c6a543d' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 09:26:02.775  INFO 13512 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 09:26:02.788  INFO 13512 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 09:26:02.810  INFO 13512 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$211d7c8e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 09:26:03.454  INFO 13512 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 09:26:03.525  INFO 13512 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 09:26:03.525  INFO 13512 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 09:26:04.128  INFO 13512 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 09:26:04.130  INFO 13512 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4438 ms
2020-06-12 09:26:04.401  INFO 13512 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 09:26:04.414  INFO 13512 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 09:26:04.426 DEBUG 13512 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 09:26:04.589  INFO 13512 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 09:26:05.113  INFO 13512 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 09:26:07.918  WARN 13512 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 09:26:07.924  WARN 13512 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 09:26:07.924  WARN 13512 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 09:26:07.924  WARN 13512 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 09:26:07.961  WARN 13512 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 09:26:07.962  WARN 13512 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 09:26:07.962  WARN 13512 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 09:26:07.962  WARN 13512 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 09:26:08.264  INFO 13512 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 09:26:08.696  WARN 13512 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 09:26:10.404  INFO 13512 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 09:26:10.426  INFO 13512 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 09:26:10.609  INFO 13512 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5e4223a, org.springframework.security.web.context.SecurityContextPersistenceFilter@3d7161ba, org.springframework.security.web.header.HeaderWriterFilter@60e4dc43, org.springframework.security.web.authentication.logout.LogoutFilter@e53b0de, site.alanliang.geekblog.security.ValidateCodeFilter@606cff79, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@171f7459, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@70eb6eb7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6599b81b, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@2e1abe74, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6dff3408, org.springframework.security.web.session.SessionManagementFilter@3fc2994d, org.springframework.security.web.access.ExceptionTranslationFilter@59552a52, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5cb9e4ff]
2020-06-12 09:26:10.703  INFO 13512 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 09:26:11.423  INFO 13512 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 09:26:11.445  INFO 13512 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 09:26:11.517  INFO 13512 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 09:26:11.858  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 09:26:11.860  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 09:26:11.867  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 09:26:11.869  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 09:26:11.871  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 09:26:11.877  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 09:26:11.882  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 09:26:11.884  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 09:26:11.955  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 09:26:11.977  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 09:26:11.979  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 09:26:11.985  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 09:26:11.986  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 09:26:11.994  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 09:26:11.996  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 09:26:12.002  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 09:26:12.007  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 09:26:12.009  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 09:26:12.015  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 09:26:12.021  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 09:26:12.031  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 09:26:12.036  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 09:26:12.042  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 09:26:12.045  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 09:26:12.049  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 09:26:12.051  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 09:26:12.055  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 09:26:12.057  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 09:26:12.067  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 09:26:12.069  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 09:26:12.077  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 09:26:12.080  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 09:26:12.085  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 09:26:12.091  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 09:26:12.095  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 09:26:12.098  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 09:26:12.102  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 09:26:12.103  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 09:26:12.104  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 09:26:12.107  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 09:26:12.112  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 09:26:12.114  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 09:26:12.118  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 09:26:12.119  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 09:26:12.132  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 09:26:12.135  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 09:26:12.137  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 09:26:12.140  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 09:26:12.142  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 09:26:12.145  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 09:26:12.149  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 09:26:12.151  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 09:26:12.152  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 09:26:12.156  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 09:26:12.167  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 09:26:12.168  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 09:26:12.170  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 09:26:12.171  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 09:26:12.174  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 09:26:12.176  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 09:26:12.177  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 09:26:12.186  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 09:26:12.189  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 09:26:12.190  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 09:26:12.192  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 09:26:12.193  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 09:26:12.195  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 09:26:12.201  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 09:26:12.204  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 09:26:12.205  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 09:26:12.206  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 09:26:12.210  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 09:26:12.212  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 09:26:12.214  INFO 13512 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 09:26:12.307  INFO 13512 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 09:26:12.312  INFO 13512 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 13.975 seconds (JVM running for 16.276)
2020-06-12 09:28:20.353  INFO 13512 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 09:28:20.353  INFO 13512 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 09:28:20.376  INFO 13512 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 23 ms
2020-06-12 09:28:20.526 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 09:28:20.766 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 09:28:20.905 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 09:28:20.942 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 09:28:20.964 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 09:28:21.016 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 09:28:27.334 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 09:28:27.334 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 09:28:27.338 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 09:28:27.340 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 09:28:27.341 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 09:28:27.347 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 09:28:27.456  INFO 13512 --- [http-nio-8889-exec-6] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 09:28:29.687 DEBUG 13512 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 09:28:29.699 DEBUG 13512 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 09:28:29.679(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 09:28:29.707 DEBUG 13512 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 09:28:30.346  INFO 13512 --- [http-nio-8889-exec-3] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 09:28:30.351  INFO 13512 --- [http-nio-8889-exec-3] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 09:28:31.715 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 09:28:31.733 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 09:28:31.750 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 09:28:32.182 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 09:28:32.183 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 09:28:32.190 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 09:28:32.203 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 09:28:32.203 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 09:28:32.209 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 09:28:32.223 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 09:28:32.224 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 09:28:32.228 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 09:28:32.245 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 09:28:32.247 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 09:28:32.249 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 09:28:32.263 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 09:28:32.266 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 09:28:32.267 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 09:28:32.287 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 09:28:32.288 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 09:28:32.292 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 09:28:32.304 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 09:28:32.305 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 09:28:32.312 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 09:28:32.316 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 09:28:32.316 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 09:28:32.325 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 09:28:32.332 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 09:28:32.332 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 09:28:32.341 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 09:28:32.351 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 09:28:32.352 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 09:28:32.373 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 09:28:32.385 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 09:28:32.387 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 09:28:32.484 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 09:28:32.500 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 09:28:32.500 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 09:28:32.509 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 09:28:32.516 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 09:28:32.516 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 09:28:32.529 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 09:28:32.546 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 09:28:32.548 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 09:28:32.551 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 09:28:32.566 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 09:28:32.566 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 09:28:32.687 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-12 09:28:32.687 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 09:28:32.687 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 09:28:32.841 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 09:28:32.852 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 09:28:32.856 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 09:28:32.876 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 09:28:32.885 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 09:28:32.885 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-11 15:43:37.0(Timestamp), 2020-06-12 09:28:32.879(Timestamp)
2020-06-12 09:28:32.900 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 09:28:32.902 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 09:28:32.902 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 09:28:32.916 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 09:28:32.916 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 09:28:32.916 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-11 15:43:37.0(Timestamp), 2020-06-12 09:28:32.916(Timestamp)
2020-06-12 09:28:32.924 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 09:28:32.926 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 09:28:32.927 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 09:28:32.936 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 09:28:32.944 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 09:28:32.949 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-11 15:43:37.0(Timestamp), 2020-06-12 09:28:32.938(Timestamp)
2020-06-12 09:28:32.953 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 09:28:32.955 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 09:28:32.955 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 09:28:32.966 DEBUG 13512 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 09:28:32.972 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 09:28:32.974 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-11 15:43:37.0(Timestamp), 2020-06-12 09:28:32.968(Timestamp)
2020-06-12 09:28:32.974 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 09:28:32.989 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 09:28:32.989 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 09:28:33.002 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 09:28:44.185 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 09:28:44.185 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 09:28:44.188 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 09:28:44.292 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 09:28:44.295 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 09:28:44.316 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 09:28:44.318 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 09:28:44.342 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 09:28:44.353 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 09:28:44.354 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 09:28:44.354 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 09:28:44.365 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 09:28:44.366 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 09:28:44.368 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 09:28:44.368 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 09:28:44.368 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 09:28:44.372 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 09:28:44.383 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 09:28:44.384 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 09:28:44.381(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 155(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 09:28:44.391 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 09:28:46.780 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_role 
2020-06-12 09:28:46.781 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 
2020-06-12 09:28:46.783 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT id,role_name,description,rank,color,create_time,update_time,status FROM sys_role LIMIT ?,? 
2020-06-12 09:28:46.785 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-12 09:28:46.788 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.geekblog.dao.RoleMapper.selectPage   : <==      Total: 7
2020-06-12 09:28:46.791 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 09:28:46.794 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 3(Long)
2020-06-12 09:28:46.795 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 09:28:46.795 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 09:28:46.795 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 4(Long)
2020-06-12 09:28:46.795 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 09:28:46.795 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 09:28:46.795 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 7(Long)
2020-06-12 09:28:46.803 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 09:28:46.807 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 09:28:46.809 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 8(Long)
2020-06-12 09:28:46.812 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 09:28:46.815 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 09:28:46.815 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 9(Long)
2020-06-12 09:28:46.815 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 09:28:46.818 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 09:28:46.818 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 14(Long)
2020-06-12 09:28:46.819 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 09:28:46.822 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 09:28:46.822 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 18(Long)
2020-06-12 09:28:46.823 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 09:28:46.836 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 09:28:46.836 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 09:28:46.834(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 65(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 09:28:46.838 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 09:29:35.942 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,create_time,update_time FROM sys_menu 
2020-06-12 09:29:35.943 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-12 09:29:35.960 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 84
2020-06-12 09:29:35.976 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_menu 
2020-06-12 09:29:35.976 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectCount  : ==> Parameters: 
2020-06-12 09:29:35.977 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectCount  : <==      Total: 1
2020-06-12 09:29:35.987 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 09:29:35.988 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 09:29:35.983(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 45(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 09:29:35.990 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 09:30:11.011 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectOne    : ==>  Preparing: SELECT id,username,nickname,sex,phone,email,status FROM sys_user WHERE (id = ?) 
2020-06-12 09:30:11.011 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectOne    : ==> Parameters: 1(Long)
2020-06-12 09:30:11.013 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectOne    : <==      Total: 1
2020-06-12 09:30:11.016 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectList      : ==>  Preparing: SELECT role_id FROM sys_role_user WHERE (user_id = ?) 
2020-06-12 09:30:11.016 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectList      : ==> Parameters: 1(Long)
2020-06-12 09:30:11.016 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectList      : <==      Total: 1
2020-06-12 09:30:52.431 DEBUG 13512 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 09:30:52.432 DEBUG 13512 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 09:30:52.427(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 09:30:52.435 DEBUG 13512 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 09:31:17.720 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status FROM t_article WHERE id=? 
2020-06-12 09:31:17.722 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-12 09:31:17.727 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 09:31:17.737 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 09:31:17.737 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 09:31:17.741 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 09:31:17.962 DEBUG 13512 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 09:31:17.962 DEBUG 13512 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 09:31:17.965 DEBUG 13512 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 09:32:05.662 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_user su 
2020-06-12 09:32:05.663 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 
2020-06-12 09:32:05.664 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: select su.id, su.username, su.nickname, su.sex, su.email, su.phone, su.status, su.create_time, su.update_time, sr.id as rid, sr.role_name, sr.color from sys_user su left join sys_role_user sru on su.id = sru.user_id left join sys_role sr on sru.role_id = sr.id order by su.id LIMIT ?,? 
2020-06-12 09:32:05.666 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-12 09:32:05.670 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.UserMapper.listTableByPage     : <==      Total: 4
2020-06-12 09:32:05.677 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 09:32:05.679 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 09:32:05.674(Timestamp), 查询用户(String), INFO(String), site.alanliang.geekblog.controller.admin.UserController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 20(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 09:32:05.681 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 09:33:22.377 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-12 09:33:22.378 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 1(Long)
2020-06-12 09:33:22.379 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 09:33:22.380 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-12 09:33:22.409 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 1254(Integer), 1(Long)
2020-06-12 09:33:22.414 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 09:33:22.415 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-12 09:33:22.417 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 1(Long)
2020-06-12 09:33:22.420 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-12 09:33:22.422 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) and ta.published = 1 and ta.status = 1 
2020-06-12 09:33:22.429 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 1(Long)
2020-06-12 09:33:22.432 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 0
2020-06-12 09:33:22.434 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) and ta.published = 1 and ta.status = 1 
2020-06-12 09:33:22.436 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 1(Long)
2020-06-12 09:33:22.439 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-06-12 09:33:22.441 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 09:33:22.441 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 09:33:22.444 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 09:33:22.499 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 09:33:22.499 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 09:33:22.501 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 09:33:26.458 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: SELECT COUNT(1) FROM t_comment tc WHERE article_id = ? AND pid = 0 AND tc.status <> 0 
2020-06-12 09:33:26.458 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 1(Long)
2020-06-12 09:33:26.458 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listByArticleId  : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and tc.status <> 0 order by create_time DESC 
2020-06-12 09:33:26.458 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listByArticleId  : ==> Parameters: 1(Long)
2020-06-12 09:33:26.458 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listByArticleId  : <==      Total: 0
2020-06-12 09:33:49.090 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 6 
2020-06-12 09:33:49.095 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean)
2020-06-12 09:33:49.098 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-12 09:33:49.106 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 1 limit ? 
2020-06-12 09:33:49.109 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 09:33:49.110 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 09:33:49.118 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 1 
2020-06-12 09:33:49.120 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 09:33:49.121 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 1 order by ta.create_time desc LIMIT ?,? 
2020-06-12 09:33:49.122 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 09:33:49.126 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 2
2020-06-12 09:33:49.127 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 09:33:49.127 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 09:33:49.130 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 09:33:49.131 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 09:33:49.131 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 09:33:49.131 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 09:33:49.138 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 09:33:49.138 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 09:33:49.137(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 63(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 09:33:49.142 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 09:38:44.576 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_comment 
2020-06-12 09:38:44.577 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 
2020-06-12 09:38:44.580 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: select id, pid, user_id, article_id, visitor_id, content, create_time, browser, os, address, request_ip, status from t_comment order by create_time DESC LIMIT ?,? 
2020-06-12 09:38:44.584 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 09:38:44.588 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listTableByPage  : <==      Total: 1
2020-06-12 09:38:44.590 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 09:38:44.590 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 09:38:44.591 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 09:38:44.598 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 09:38:44.599 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 09:38:44.597(Timestamp), 查询评论(String), INFO(String), site.alanliang.geekblog.controller.admin.CommentController.listTableByPage()(String), { page: 1 limit: 15 commentQuery: CommentQuery(startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 27(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 09:38:44.601 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:19:47.016 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:19:47.027 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:19:47.043 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:19:47.045 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:19:47.046 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:19:47.049 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:19:47.050 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:19:47.051 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:19:47.052 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:19:47.052 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:19:47.065 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 10:19:47.065 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 10:19:47.380 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 10:19:47.381 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 10:19:47.384 DEBUG 13512 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 10:19:47.398 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:19:47.399 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:19:47.402 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:19:47.403 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:19:47.415 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:19:47.419 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:19:47.420 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:19:47.425 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:19:47.426 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:19:47.427 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:19:47.431 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:19:47.435 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:19:47.435 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:19:47.438 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:19:47.451 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:19:47.454 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:19:47.45(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 49(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:19:47.458 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:22:37.896 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:22:37.899 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:22:37.895(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:22:37.905 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:22:38.280 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 10:22:38.283 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 10:22:38.289 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 10:22:38.987 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 10:22:38.987 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 10:22:38.989 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:22:38.999 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 10:22:38.999 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 10:22:39.001 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 10:22:39.006 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 10:22:39.007 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 10:22:39.009 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 10:22:39.017 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 10:22:39.018 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 10:22:39.019 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:22:39.025 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 10:22:39.026 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 10:22:39.027 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:22:39.027 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 10:22:39.028 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:22:39.026(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 4(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:22:39.033 DEBUG 13512 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:22:39.035 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 10:22:39.036 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 10:22:39.038 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 10:22:39.041 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:22:39.041 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:22:39.046 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:22:39.052 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 10:22:39.053 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 10:22:39.054 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:22:39.059 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:22:39.060 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:22:39.069 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:22:39.072 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:22:39.073 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:22:39.089 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:22:39.093 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 10:22:39.096 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 10:22:39.101 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 10:22:39.103 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 10:22:39.103 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 10:22:39.104 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 10:22:39.110 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 10:22:39.113 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 10:22:39.116 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 10:22:39.123 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 10:22:39.124 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 10:22:39.126 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 10:22:39.132 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:22:39.134 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:22:39.222 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:22:39.224 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:22:39.225 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:22:39.290 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:22:39.298 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 10:22:39.299 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 10:22:39.302 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 10:23:02.637 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 10:23:02.637 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 10:23:02.639 DEBUG 13512 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 10:23:02.650 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:23:02.650 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:23:02.652 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:23:02.653 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:23:02.660 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:23:02.661 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:23:02.662 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:23:02.663 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:23:02.664 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:23:02.665 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:23:02.666 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:23:02.668 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:23:02.668 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:23:02.671 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:23:02.677 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:23:02.678 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:23:02.676(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 27(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:23:02.681 DEBUG 13512 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:23:11.070 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:23:11.071 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:23:11.069(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:23:11.072 DEBUG 13512 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:23:11.301 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 10:23:11.302 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 10:23:11.308 DEBUG 13512 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 10:23:11.661 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:23:11.661 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:23:11.66(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 4(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:23:11.666 DEBUG 13512 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:23:11.777 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 10:23:11.778 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 10:23:11.780 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:23:11.785 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 10:23:11.786 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 10:23:11.790 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 10:23:11.797 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 10:23:11.798 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 10:23:11.800 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 10:23:11.809 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 10:23:11.811 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 10:23:11.813 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:23:11.819 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 10:23:11.821 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 10:23:11.825 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 10:23:11.830 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 10:23:11.831 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 10:23:11.833 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 10:23:11.835 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:23:11.836 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:23:11.841 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:23:11.844 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 10:23:11.845 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 10:23:11.846 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:23:11.850 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:23:11.850 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:23:11.854 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:23:11.858 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:23:11.859 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:23:11.865 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:23:11.868 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 10:23:11.869 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 10:23:11.875 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 10:23:11.876 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 10:23:11.877 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 10:23:11.878 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 10:23:11.881 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 10:23:11.882 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 10:23:11.884 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 10:23:11.888 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 10:23:11.889 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 10:23:11.893 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 10:23:11.896 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:23:11.896 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:23:11.948 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:23:11.949 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:23:11.950 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:23:12.012 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:23:12.016 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 10:23:12.017 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 10:23:12.023 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 10:24:08.314 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:24:08.316 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:24:08.313(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:24:08.318 DEBUG 13512 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:24:24.962  INFO 19168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 19168 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 10:24:24.967 DEBUG 19168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 10:24:24.967  INFO 19168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 10:24:25.024  INFO 19168 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 10:24:25.025  INFO 19168 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 10:24:26.661  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:24:26.664  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:24:26.892  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 220ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 10:24:26.911  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:24:26.913  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:24:26.956  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 42ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 10:24:27.001  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:24:27.006  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 10:24:27.072  INFO 19168 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 10:24:27.073  INFO 19168 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 42ms. Found 0 Redis repository interfaces.
2020-06-12 10:24:28.329  INFO 19168 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:24:28.624  INFO 19168 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:24:28.635  INFO 19168 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@24cc2c38' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:24:28.644  INFO 19168 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:24:28.666  INFO 19168 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:24:28.688  INFO 19168 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$f2c9cadf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:24:29.871  INFO 19168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 10:24:29.899  INFO 19168 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 10:24:29.900  INFO 19168 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 10:24:30.300  INFO 19168 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 10:24:30.301  INFO 19168 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 5276 ms
2020-06-12 10:24:30.588  INFO 19168 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 10:24:30.589  INFO 19168 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 10:24:30.614 DEBUG 19168 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 10:24:30.772  INFO 19168 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 10:24:31.359  INFO 19168 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 10:24:34.061  WARN 19168 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:24:34.061  WARN 19168 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:24:34.063  WARN 19168 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:24:34.063  WARN 19168 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:24:34.109  WARN 19168 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:24:34.110  WARN 19168 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:24:34.110  WARN 19168 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:24:34.111  WARN 19168 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:24:34.488  INFO 19168 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 10:24:35.236  WARN 19168 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 10:24:37.691  INFO 19168 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 10:24:37.730  INFO 19168 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 10:24:38.161  INFO 19168 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3675e938, org.springframework.security.web.context.SecurityContextPersistenceFilter@fb18930, org.springframework.security.web.header.HeaderWriterFilter@6569f0c1, org.springframework.security.web.authentication.logout.LogoutFilter@36665d20, site.alanliang.geekblog.security.ValidateCodeFilter@491d93e1, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@62049c52, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7581c9a6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1d874aff, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4ae08dba, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5b31c497, org.springframework.security.web.session.SessionManagementFilter@77ea8c7c, org.springframework.security.web.access.ExceptionTranslationFilter@618b382, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6bccd9f4]
2020-06-12 10:24:38.304  INFO 19168 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 10:24:39.259  INFO 19168 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 10:24:39.316  INFO 19168 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 10:24:39.506  INFO 19168 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 10:24:40.055  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 10:24:40.059  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 10:24:40.073  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 10:24:40.077  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 10:24:40.080  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 10:24:40.091  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 10:24:40.096  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 10:24:40.098  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 10:24:40.155  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 10:24:40.169  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 10:24:40.171  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 10:24:40.173  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 10:24:40.175  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 10:24:40.178  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 10:24:40.179  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 10:24:40.181  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 10:24:40.184  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 10:24:40.192  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 10:24:40.196  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 10:24:40.203  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 10:24:40.212  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 10:24:40.218  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 10:24:40.229  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 10:24:40.232  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 10:24:40.237  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 10:24:40.240  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 10:24:40.246  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 10:24:40.249  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 10:24:40.264  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 10:24:40.269  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 10:24:40.281  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 10:24:40.288  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 10:24:40.296  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 10:24:40.305  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 10:24:40.310  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 10:24:40.312  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 10:24:40.317  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 10:24:40.319  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 10:24:40.321  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 10:24:40.324  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 10:24:40.328  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 10:24:40.331  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 10:24:40.337  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 10:24:40.339  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 10:24:40.360  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 10:24:40.363  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 10:24:40.370  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 10:24:40.373  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 10:24:40.376  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 10:24:40.377  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 10:24:40.378  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 10:24:40.379  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 10:24:40.380  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 10:24:40.385  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 10:24:40.387  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 10:24:40.388  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 10:24:40.389  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 10:24:40.389  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 10:24:40.392  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 10:24:40.393  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 10:24:40.394  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 10:24:40.399  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 10:24:40.402  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 10:24:40.403  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 10:24:40.404  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 10:24:40.405  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 10:24:40.405  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 10:24:40.408  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 10:24:40.410  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 10:24:40.411  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 10:24:40.412  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 10:24:40.414  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 10:24:40.415  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 10:24:40.416  INFO 19168 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 10:24:40.449  INFO 19168 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 10:24:40.452  INFO 19168 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 16.403 seconds (JVM running for 17.712)
2020-06-12 10:24:44.877  INFO 19168 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 10:24:44.877  INFO 19168 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 10:24:44.898  INFO 19168 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-06-12 10:24:45.043 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:24:45.277 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:24:45.314 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:24:45.333 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:24:45.343 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:24:45.361 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 10:24:51.422 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:24:51.422 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:24:51.424 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:24:51.425 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:24:51.425 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:24:51.433 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 10:24:51.539  INFO 19168 --- [http-nio-8889-exec-7] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 10:24:53.837 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:24:53.851 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:24:53.823(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:24:53.854 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:24:54.547  INFO 19168 --- [http-nio-8889-exec-2] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 10:24:54.554  INFO 19168 --- [http-nio-8889-exec-2] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 10:24:56.004 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:24:56.006 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:24:56.008 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:24:56.016 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:24:56.021 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:24:56.024 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:24:56.027 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:24:56.029 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:24:56.037 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:24:56.067 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:24:56.077 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:24:56.156 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:24:56.159 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:24:56.162 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:24:56.275 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:24:56.283 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:24:56.288 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:24:56.301 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:24:56.306 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:24:56.309 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 09:28:30.0(Timestamp), 2020-06-12 10:24:56.302(Timestamp)
2020-06-12 10:24:56.316 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:24:56.325 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:24:56.325 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:24:56.337 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:24:56.341 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:24:56.343 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 09:28:30.0(Timestamp), 2020-06-12 10:24:56.338(Timestamp)
2020-06-12 10:24:56.347 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:24:56.357 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:24:56.358 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:24:56.369 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:24:56.374 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:24:56.377 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 09:28:30.0(Timestamp), 2020-06-12 10:24:56.37(Timestamp)
2020-06-12 10:24:56.382 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:24:56.391 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:24:56.392 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:24:56.405 DEBUG 19168 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:24:56.411 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:24:56.415 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 09:28:30.0(Timestamp), 2020-06-12 10:24:56.408(Timestamp)
2020-06-12 10:24:56.418 DEBUG 19168 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:24:59.527 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:24:59.536 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:24:59.525(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 19(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:24:59.538 DEBUG 19168 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:25:09.479 DEBUG 19168 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 10:25:09.480 DEBUG 19168 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 10:25:09.482 DEBUG 19168 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 10:25:09.528 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:25:09.529 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:25:09.549 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:25:09.551 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:25:09.631 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:25:09.649 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:25:09.650 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:25:09.653 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:25:09.659 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:25:09.659 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:25:09.661 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:25:09.664 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:25:09.664 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:25:09.665 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:25:09.671 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:25:09.672 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:25:09.67(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 185(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:25:09.676 DEBUG 19168 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:25:30.713 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:25:30.713 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:25:30.715 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:25:30.715 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 10(Long)
2020-06-12 10:25:30.726 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:25:30.729 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:25:30.729 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:25:30.731 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:25:30.734 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:25:30.734 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:25:30.739 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:25:30.745 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:25:30.746 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:25:30.748 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:25:30.756 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:25:30.758 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:25:30.754(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 10 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 42(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:25:30.761 DEBUG 19168 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:26:35.331  INFO 16268 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 16268 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 10:26:35.335 DEBUG 16268 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 10:26:35.336  INFO 16268 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 10:26:35.415  INFO 16268 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 10:26:35.415  INFO 16268 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 10:26:37.218  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:26:37.226  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:26:37.469  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 226ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 10:26:37.488  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:26:37.491  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:26:37.528  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 36ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 10:26:37.569  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:26:37.575  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 10:26:37.650  INFO 16268 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 10:26:37.650  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 48ms. Found 0 Redis repository interfaces.
2020-06-12 10:26:38.328  INFO 16268 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:26:38.596  INFO 16268 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:26:38.599  INFO 16268 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@280d7e28' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:26:38.600  INFO 16268 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:26:38.612  INFO 16268 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:26:38.630  INFO 16268 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$38d8d1ca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:26:39.265  INFO 16268 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 10:26:39.279  INFO 16268 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 10:26:39.280  INFO 16268 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 10:26:39.482  INFO 16268 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 10:26:39.482  INFO 16268 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4067 ms
2020-06-12 10:26:39.736  INFO 16268 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 10:26:39.740  INFO 16268 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 10:26:39.761 DEBUG 16268 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 10:26:39.923  INFO 16268 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 10:26:40.475  INFO 16268 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 10:26:43.511  WARN 16268 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:26:43.512  WARN 16268 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:26:43.514  WARN 16268 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:26:43.514  WARN 16268 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:26:43.585  WARN 16268 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:26:43.586  WARN 16268 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:26:43.587  WARN 16268 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:26:43.588  WARN 16268 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:26:43.809  INFO 16268 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 10:26:44.226  WARN 16268 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 10:26:46.446  INFO 16268 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 10:26:46.483  INFO 16268 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 10:26:46.930  INFO 16268 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5a496eeb, org.springframework.security.web.context.SecurityContextPersistenceFilter@30fdd2a8, org.springframework.security.web.header.HeaderWriterFilter@1529cf45, org.springframework.security.web.authentication.logout.LogoutFilter@27783cc6, site.alanliang.geekblog.security.ValidateCodeFilter@2463f290, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@9f93f80, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@30c64f69, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4e75e7f4, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@1de3ec55, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6d50e532, org.springframework.security.web.session.SessionManagementFilter@1faf6b38, org.springframework.security.web.access.ExceptionTranslationFilter@7eb793bd, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5be277a6]
2020-06-12 10:26:47.227  INFO 16268 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 10:26:48.457  INFO 16268 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 10:26:48.499  INFO 16268 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 10:26:48.651  INFO 16268 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 10:26:49.180  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 10:26:49.182  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 10:26:49.193  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 10:26:49.196  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 10:26:49.197  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 10:26:49.206  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 10:26:49.212  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 10:26:49.214  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 10:26:49.304  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 10:26:49.331  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 10:26:49.338  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 10:26:49.345  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 10:26:49.348  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 10:26:49.362  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 10:26:49.364  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 10:26:49.372  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 10:26:49.377  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 10:26:49.381  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 10:26:49.386  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 10:26:49.393  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 10:26:49.399  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 10:26:49.410  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 10:26:49.417  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 10:26:49.424  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 10:26:49.429  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 10:26:49.431  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 10:26:49.445  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 10:26:49.447  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 10:26:49.467  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 10:26:49.477  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 10:26:49.491  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 10:26:49.496  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 10:26:49.508  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 10:26:49.515  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 10:26:49.526  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 10:26:49.529  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 10:26:49.533  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 10:26:49.540  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 10:26:49.543  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 10:26:49.547  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 10:26:49.559  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 10:26:49.561  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 10:26:49.574  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 10:26:49.577  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 10:26:49.615  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 10:26:49.627  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 10:26:49.633  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 10:26:49.644  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 10:26:49.653  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 10:26:49.659  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 10:26:49.661  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 10:26:49.663  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 10:26:49.666  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 10:26:49.681  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 10:26:49.694  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 10:26:49.697  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 10:26:49.698  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 10:26:49.699  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 10:26:49.710  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 10:26:49.713  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 10:26:49.714  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 10:26:49.728  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 10:26:49.739  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 10:26:49.741  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 10:26:49.743  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 10:26:49.746  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 10:26:49.748  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 10:26:49.758  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 10:26:49.759  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 10:26:49.761  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 10:26:49.763  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 10:26:49.771  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 10:26:49.775  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 10:26:49.777  INFO 16268 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 10:26:49.916  INFO 16268 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 10:26:49.934  INFO 16268 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 15.631 seconds (JVM running for 17.088)
2020-06-12 10:26:50.128  INFO 16268 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 10:26:50.128  INFO 16268 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 10:26:50.181  INFO 16268 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 53 ms
2020-06-12 10:26:50.461 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:26:50.898 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:26:50.949 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:26:50.977 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:26:50.994 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:26:51.016 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 10:26:58.757 DEBUG 16268 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:26:58.757 DEBUG 16268 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:26:58.759 DEBUG 16268 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:26:58.760 DEBUG 16268 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:26:58.760 DEBUG 16268 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:26:58.767 DEBUG 16268 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 10:26:58.875  INFO 16268 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 10:27:01.099 DEBUG 16268 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:27:01.108 DEBUG 16268 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:27:01.092(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:27:01.111 DEBUG 16268 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:27:01.752  INFO 16268 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 10:27:01.754  INFO 16268 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 10:27:03.238 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 10:27:03.254 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 10:27:03.275 DEBUG 16268 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 10:27:03.717 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 10:27:03.719 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 10:27:03.722 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:27:03.735 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 10:27:03.738 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 10:27:03.740 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 10:27:03.753 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 10:27:03.755 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 10:27:03.757 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 10:27:03.768 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 10:27:03.769 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 10:27:03.771 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:27:03.781 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 10:27:03.783 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 10:27:03.785 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 10:27:03.796 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 10:27:03.797 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 10:27:03.801 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 10:27:03.808 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:27:03.809 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:27:03.811 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:27:03.822 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 10:27:03.823 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 10:27:03.824 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:27:03.832 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:27:03.835 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:27:03.841 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:27:03.845 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:27:03.848 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:27:03.858 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:27:03.863 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 10:27:03.867 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 10:27:04.014 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 10:27:04.035 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 10:27:04.037 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 10:27:04.039 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 10:27:04.054 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 10:27:04.055 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 10:27:04.057 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 10:27:04.075 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 10:27:04.077 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 10:27:04.079 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 10:27:04.094 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:27:04.103 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:27:04.153 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:27:04.155 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:27:04.157 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:27:04.232 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:27:04.236 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:27:04.238 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:27:04.245 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:27:04.252 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:27:04.255 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 10:24:54.0(Timestamp), 2020-06-12 10:27:04.247(Timestamp)
2020-06-12 10:27:04.260 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:27:04.261 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:27:04.261 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:27:04.271 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:27:04.274 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:27:04.276 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 10:24:54.0(Timestamp), 2020-06-12 10:27:04.272(Timestamp)
2020-06-12 10:27:04.278 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:27:04.284 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:27:04.285 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:27:04.293 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:27:04.297 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:27:04.301 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 10:24:54.0(Timestamp), 2020-06-12 10:27:04.294(Timestamp)
2020-06-12 10:27:04.304 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:27:04.305 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:27:04.306 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:27:04.315 DEBUG 16268 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:27:04.321 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:27:04.323 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 10:24:54.0(Timestamp), 2020-06-12 10:27:04.317(Timestamp)
2020-06-12 10:27:04.325 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:27:04.338 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 10:27:04.339 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 10:27:04.343 DEBUG 16268 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 10:27:07.699 DEBUG 16268 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:27:07.705 DEBUG 16268 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:27:07.695(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 37(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:27:07.707 DEBUG 16268 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:27:14.507 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 10:27:14.508 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 10:27:14.511 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 10:27:14.583 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:27:14.584 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:27:14.598 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:27:14.599 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:27:14.617 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:27:14.622 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:27:14.623 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:27:14.625 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:27:14.630 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:27:14.631 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:27:14.633 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:27:14.635 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:27:14.635 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:27:14.637 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:27:14.644 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:27:14.645 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:27:14.642(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 192.168.150.1(String), 115(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:27:14.649 DEBUG 16268 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:27:36.048 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:27:36.048 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:27:36.050 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:27:36.050 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 10(Long)
2020-06-12 10:27:36.061 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:27:36.062 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:27:36.062 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:27:36.064 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:27:36.065 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:27:36.066 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:27:36.068 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:27:36.070 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:27:36.070 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:27:36.071 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:27:36.080 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:27:36.080 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:27:36.079(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 10 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 31(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:27:36.082 DEBUG 16268 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:28:17.781  INFO 14684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 14684 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 10:28:17.785 DEBUG 14684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 10:28:17.786  INFO 14684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 10:28:17.845  INFO 14684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 10:28:17.845  INFO 14684 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 10:28:19.209  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:28:19.210  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:28:19.299  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 82ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 10:28:19.305  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:28:19.306  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:28:19.320  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 10:28:19.336  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:28:19.338  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 10:28:19.362  INFO 14684 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 10:28:19.364  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-06-12 10:28:19.854  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:20.025  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:20.028  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@1bd4353f' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:20.029  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:20.036  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:20.047  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$8f086e62] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:20.647  INFO 14684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 10:28:20.670  INFO 14684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 10:28:20.671  INFO 14684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 10:28:20.845  INFO 14684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 10:28:20.846  INFO 14684 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3001 ms
2020-06-12 10:28:21.103  INFO 14684 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 10:28:21.105  INFO 14684 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 10:28:21.125 DEBUG 14684 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 10:28:21.232  INFO 14684 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 10:28:22.015  INFO 14684 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 10:28:24.386  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:24.387  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:24.387  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:24.387  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:24.436  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:24.437  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:24.438  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:24.439  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:24.716  INFO 14684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 10:28:25.148  WARN 14684 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 10:28:27.136  INFO 14684 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 10:28:27.153  INFO 14684 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 10:28:27.300  INFO 14684 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@55457f9f, org.springframework.security.web.context.SecurityContextPersistenceFilter@483939ed, org.springframework.security.web.header.HeaderWriterFilter@218d69a6, org.springframework.security.web.authentication.logout.LogoutFilter@3cce44bf, site.alanliang.geekblog.security.ValidateCodeFilter@12adbde8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2d7e0bf8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@56a2f677, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@531da9ae, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@2c813f34, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2d7db8dc, org.springframework.security.web.session.SessionManagementFilter@47beec96, org.springframework.security.web.access.ExceptionTranslationFilter@15fcf665, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@519e1f32]
2020-06-12 10:28:27.390  INFO 14684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 10:28:28.146  INFO 14684 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 10:28:28.160  INFO 14684 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 10:28:28.287  INFO 14684 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 10:28:28.817  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 10:28:28.826  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 10:28:28.840  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 10:28:28.844  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 10:28:28.847  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 10:28:28.856  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 10:28:28.863  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 10:28:28.866  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 10:28:28.944  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 10:28:28.956  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 10:28:28.957  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 10:28:28.961  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 10:28:28.962  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 10:28:28.966  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 10:28:28.967  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 10:28:28.969  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 10:28:28.971  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 10:28:28.974  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 10:28:28.975  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 10:28:28.978  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 10:28:28.981  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 10:28:28.983  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 10:28:28.985  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 10:28:28.986  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 10:28:28.988  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 10:28:28.988  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 10:28:28.990  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 10:28:28.991  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 10:28:28.996  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 10:28:28.997  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 10:28:29.000  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 10:28:29.002  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 10:28:29.005  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 10:28:29.008  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 10:28:29.011  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 10:28:29.012  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 10:28:29.013  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 10:28:29.014  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 10:28:29.015  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 10:28:29.016  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 10:28:29.019  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 10:28:29.020  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 10:28:29.022  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 10:28:29.023  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 10:28:29.032  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 10:28:29.035  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 10:28:29.036  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 10:28:29.039  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 10:28:29.041  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 10:28:29.042  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 10:28:29.043  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 10:28:29.044  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 10:28:29.045  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 10:28:29.048  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 10:28:29.051  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 10:28:29.051  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 10:28:29.052  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 10:28:29.052  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 10:28:29.055  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 10:28:29.056  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 10:28:29.056  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 10:28:29.063  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 10:28:29.067  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 10:28:29.068  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 10:28:29.068  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 10:28:29.069  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 10:28:29.070  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 10:28:29.073  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 10:28:29.074  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 10:28:29.075  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 10:28:29.076  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 10:28:29.080  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 10:28:29.081  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 10:28:29.081  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 10:28:29.116  INFO 14684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 10:28:29.119  INFO 14684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 12.458 seconds (JVM running for 13.7)
2020-06-12 10:28:46.278  INFO 14684 --- [Thread-20] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-12 10:28:46.317  INFO 14684 --- [Thread-20] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-06-12 10:28:47.142  INFO 14684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 14684 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 10:28:47.143 DEBUG 14684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 10:28:47.143  INFO 14684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 10:28:47.693  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:28:47.694  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:28:47.737  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 43ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 10:28:47.740  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:28:47.741  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:28:47.759  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 10:28:47.766  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:28:47.766  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 10:28:47.780  INFO 14684 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 10:28:47.781  INFO 14684 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-06-12 10:28:47.938  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:47.946  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:47.947  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@255c9d07' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:47.948  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:47.950  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:47.953  INFO 14684 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$8f086e62] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:28:48.180  INFO 14684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 10:28:48.180  INFO 14684 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 10:28:48.181  INFO 14684 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 10:28:48.250  INFO 14684 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 10:28:48.251  INFO 14684 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1103 ms
2020-06-12 10:28:48.371  INFO 14684 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 10:28:48.371  INFO 14684 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 10:28:48.372 DEBUG 14684 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 10:28:48.414  INFO 14684 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 10:28:48.588  INFO 14684 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-06-12 10:28:49.507  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:49.507  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:49.507  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:49.507  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:49.522  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:49.522  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:49.522  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:49.523  WARN 14684 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:28:49.604  INFO 14684 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 10:28:49.742  WARN 14684 --- [I/O dispatcher 25] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 10:28:50.299  INFO 14684 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 10:28:50.309  INFO 14684 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 10:28:50.473  INFO 14684 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1679974f, org.springframework.security.web.context.SecurityContextPersistenceFilter@6bb161cc, org.springframework.security.web.header.HeaderWriterFilter@2656e6b5, org.springframework.security.web.authentication.logout.LogoutFilter@69f963b, site.alanliang.geekblog.security.ValidateCodeFilter@18233ca4, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1fa9f9e9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@474a1663, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@56382371, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@589f2988, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7ef7892a, org.springframework.security.web.session.SessionManagementFilter@21223d5d, org.springframework.security.web.access.ExceptionTranslationFilter@483c9d64, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6b306ac0]
2020-06-12 10:28:50.526  INFO 14684 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 10:28:51.140  INFO 14684 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 10:28:51.140  INFO 14684 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 10:28:51.157  INFO 14684 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 10:28:51.241  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 10:28:51.243  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 10:28:51.251  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 10:28:51.253  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 10:28:51.254  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 10:28:51.260  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 10:28:51.264  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 10:28:51.266  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 10:28:51.325  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 10:28:51.343  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 10:28:51.345  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 10:28:51.351  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 10:28:51.354  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 10:28:51.358  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 10:28:51.361  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 10:28:51.365  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 10:28:51.368  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 10:28:51.375  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 10:28:51.377  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 10:28:51.381  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 10:28:51.386  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 10:28:51.390  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 10:28:51.394  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 10:28:51.396  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 10:28:51.398  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 10:28:51.400  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 10:28:51.406  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 10:28:51.408  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 10:28:51.450  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 10:28:51.451  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 10:28:51.457  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 10:28:51.458  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 10:28:51.462  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 10:28:51.463  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 10:28:51.465  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 10:28:51.467  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 10:28:51.468  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 10:28:51.469  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 10:28:51.469  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 10:28:51.472  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 10:28:51.475  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 10:28:51.476  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 10:28:51.477  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 10:28:51.478  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 10:28:51.485  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 10:28:51.487  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 10:28:51.489  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 10:28:51.491  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 10:28:51.493  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 10:28:51.493  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 10:28:51.494  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 10:28:51.495  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 10:28:51.495  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 10:28:51.498  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 10:28:51.500  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 10:28:51.500  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 10:28:51.501  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 10:28:51.501  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 10:28:51.504  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 10:28:51.505  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 10:28:51.505  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 10:28:51.511  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 10:28:51.514  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 10:28:51.514  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 10:28:51.515  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 10:28:51.515  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 10:28:51.516  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 10:28:51.518  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 10:28:51.519  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 10:28:51.520  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 10:28:51.521  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 10:28:51.523  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 10:28:51.523  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 10:28:51.524  INFO 14684 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 10:28:51.533  INFO 14684 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 10:28:51.533  INFO 14684 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 4.482 seconds (JVM running for 36.114)
2020-06-12 10:28:51.536  INFO 14684 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-06-12 10:28:55.911  INFO 14684 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 10:28:55.911  INFO 14684 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 10:28:55.933  INFO 14684 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 22 ms
2020-06-12 10:28:56.072 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:28:56.290 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:28:56.330 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:28:56.350 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:28:56.361 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:28:56.379 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 10:29:11.786 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:29:11.788 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:29:11.790 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:29:11.791 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:29:11.792 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:29:11.799 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : <==      Total: 83
2020-06-12 10:29:11.905  INFO 14684 --- [http-nio-8889-exec-5] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 10:29:14.086 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:29:14.092 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:29:14.078(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:29:14.094 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:29:14.563  INFO 14684 --- [http-nio-8889-exec-8] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 10:29:14.569  INFO 14684 --- [http-nio-8889-exec-8] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 10:29:15.701 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 10:29:15.717 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 10:29:15.736 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 10:29:16.163 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 10:29:16.167 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 10:29:16.171 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:29:16.192 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 10:29:16.194 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 10:29:16.198 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 10:29:16.217 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 10:29:16.219 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 10:29:16.223 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 10:29:16.242 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 10:29:16.244 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 10:29:16.248 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:29:16.269 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 10:29:16.271 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 10:29:16.274 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 10:29:16.290 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 10:29:16.291 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 10:29:16.293 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 10:29:16.302 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:29:16.303 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:29:16.306 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:29:16.313 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 10:29:16.315 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 10:29:16.319 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:29:16.327 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:29:16.329 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:29:16.336 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:29:16.340 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:29:16.341 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:29:16.351 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:29:16.356 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 10:29:16.358 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 10:29:16.447 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 10:29:16.472 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 10:29:16.473 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 10:29:16.476 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 10:29:16.492 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 10:29:16.493 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 10:29:16.496 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 10:29:16.511 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 10:29:16.512 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 10:29:16.517 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 10:29:16.532 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:29:16.542 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:29:16.607 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:29:16.610 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:29:16.611 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:29:16.689 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:29:16.692 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:29:16.693 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:29:16.702 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:29:16.706 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:29:16.708 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 10:27:01.0(Timestamp), 2020-06-12 10:29:16.703(Timestamp)
2020-06-12 10:29:16.710 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:29:16.712 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:29:16.712 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:29:16.722 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:29:16.724 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:29:16.725 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 10:27:01.0(Timestamp), 2020-06-12 10:29:16.722(Timestamp)
2020-06-12 10:29:16.727 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:29:16.728 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:29:16.728 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:29:16.737 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:29:16.739 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:29:16.741 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 10:27:01.0(Timestamp), 2020-06-12 10:29:16.738(Timestamp)
2020-06-12 10:29:16.743 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:29:16.744 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:29:16.744 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:29:16.752 DEBUG 14684 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:29:16.755 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:29:16.757 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 10:27:01.0(Timestamp), 2020-06-12 10:29:16.752(Timestamp)
2020-06-12 10:29:16.758 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:29:16.771 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 10:29:16.773 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 10:29:16.775 DEBUG 14684 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 10:29:19.227 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:29:19.232 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:29:19.225(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 30(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:29:19.236 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:29:25.635 DEBUG 14684 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 10:29:25.636 DEBUG 14684 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 10:29:25.638 DEBUG 14684 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 10:29:25.719 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:29:25.720 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:29:25.740 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:29:25.742 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:29:25.771 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:29:25.777 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:29:25.778 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:29:25.782 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:29:25.787 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:29:25.787 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:29:25.790 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:29:25.791 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:29:25.792 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:29:25.794 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:29:25.802 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:29:25.803 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:29:25.8(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 143(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:29:25.805 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:31:44.608 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:31:44.609 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:31:44.606(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:31:44.611 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:31:52.789 DEBUG 14684 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:31:52.789 DEBUG 14684 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:31:52.787(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:31:52.791 DEBUG 14684 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:32:03.420 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:32:03.420 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:32:03.418(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:32:03.422 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:32:16.180 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,create_time,update_time FROM sys_menu 
2020-06-12 10:32:16.181 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-12 10:32:16.206 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 84
2020-06-12 10:32:16.226 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_menu 
2020-06-12 10:32:16.228 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectCount  : ==> Parameters: 
2020-06-12 10:32:16.229 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectCount  : <==      Total: 1
2020-06-12 10:32:16.235 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:32:16.236 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:32:16.234(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 62(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:32:16.242 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:32:19.839 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title FROM sys_menu 
2020-06-12 10:32:19.840 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-12 10:32:19.843 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 84
2020-06-12 10:32:49.223 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,target,remark,create_time,update_time FROM sys_menu WHERE (title = ?) 
2020-06-12 10:32:49.224 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 审核文章(String)
2020-06-12 10:32:49.225 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 0
2020-06-12 10:32:49.229 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.insert       : ==>  Preparing: INSERT INTO sys_menu ( pid, title, href, authority, sort, type, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:32:49.232 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.insert       : ==> Parameters: 26(Long), 审核文章(String), (String), blog:article:audit(String), 100(Integer), 3(Integer), false(Boolean), 2020-06-12 10:32:49.22(Timestamp), 2020-06-12 10:32:49.22(Timestamp)
2020-06-12 10:32:49.236 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.insert       : <==    Updates: 1
2020-06-12 10:32:49.260 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:32:49.261 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:32:49.259(Timestamp), 保存菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.save()(String), { menu: Menu(id=87, pid=26, title=审核文章, href=, authority=blog:article:audit, icon=null, sort=100, type=3, status=false, target=null, remark=null, createTime=Fri Jun 12 10:32:49 CST 2020, updateTime=Fri Jun 12 10:32:49 CST 2020) }(String), 0:0:0:0:0:0:0:1(String), 37(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:32:49.264 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:32:50.985 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,create_time,update_time FROM sys_menu 
2020-06-12 10:32:50.985 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-12 10:32:50.995 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-12 10:32:51.005 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_menu 
2020-06-12 10:32:51.006 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectCount  : ==> Parameters: 
2020-06-12 10:32:51.008 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.geekblog.dao.MenuMapper.selectCount  : <==      Total: 1
2020-06-12 10:32:51.015 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:32:51.016 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:32:51.012(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 28(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:32:51.017 DEBUG 14684 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:33:04.764 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_role 
2020-06-12 10:33:04.764 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 
2020-06-12 10:33:04.766 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT id,role_name,description,rank,color,create_time,update_time,status FROM sys_role LIMIT ?,? 
2020-06-12 10:33:04.767 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:33:04.770 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : <==      Total: 7
2020-06-12 10:33:04.773 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:04.774 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 3(Long)
2020-06-12 10:33:04.776 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:04.780 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:04.781 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 4(Long)
2020-06-12 10:33:04.781 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:04.783 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:04.784 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 7(Long)
2020-06-12 10:33:04.785 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:04.786 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:04.787 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 8(Long)
2020-06-12 10:33:04.788 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:04.789 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:04.790 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 9(Long)
2020-06-12 10:33:04.790 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:04.794 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:04.794 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 14(Long)
2020-06-12 10:33:04.796 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:04.798 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:04.798 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 18(Long)
2020-06-12 10:33:04.799 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:04.809 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:33:04.811 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:33:04.807(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 55(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:33:04.814 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:33:06.213 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.RoleMapper.selectOne    : ==>  Preparing: SELECT id,role_name,description,rank,color,status FROM sys_role WHERE (id = ?) 
2020-06-12 10:33:06.214 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.RoleMapper.selectOne    : ==> Parameters: 7(Long)
2020-06-12 10:33:06.216 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.geekblog.dao.RoleMapper.selectOne    : <==      Total: 1
2020-06-12 10:33:06.223 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.RoleMenuMapper.selectList      : ==>  Preparing: SELECT menu_id FROM sys_role_menu WHERE (role_id = ?) 
2020-06-12 10:33:06.225 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.RoleMenuMapper.selectList      : ==> Parameters: 7(Long)
2020-06-12 10:33:06.228 DEBUG 14684 --- [http-nio-8889-exec-8] s.a.g.dao.RoleMenuMapper.selectList      : <==      Total: 84
2020-06-12 10:33:06.402 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title FROM sys_menu 
2020-06-12 10:33:06.402 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-12 10:33:06.405 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-12 10:33:11.739 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.selectList   : ==>  Preparing: SELECT id,role_name,description,rank,color,create_time,update_time,status FROM sys_role WHERE (role_name = ?) 
2020-06-12 10:33:11.740 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.selectList   : ==> Parameters: 管理员(String)
2020-06-12 10:33:11.742 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.selectList   : <==      Total: 1
2020-06-12 10:33:11.744 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.updateById   : ==>  Preparing: UPDATE sys_role SET role_name=?, description=?, rank=?, color=?, update_time=?, status=? WHERE id=? 
2020-06-12 10:33:11.753 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.updateById   : ==> Parameters: 管理员(String), admin(String), 1(Integer), red(String), 2020-06-12 10:33:11.737(Timestamp), 1(Integer), 7(Long)
2020-06-12 10:33:11.754 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.updateById   : <==    Updates: 1
2020-06-12 10:33:11.758 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMenuMapper.delete   : ==>  Preparing: DELETE FROM sys_role_menu WHERE (role_id = ?) 
2020-06-12 10:33:11.760 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMenuMapper.delete   : ==> Parameters: 7(Long)
2020-06-12 10:33:11.768 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMenuMapper.delete   : <==    Updates: 84
2020-06-12 10:33:11.776 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.dao.RoleMenuMapper.insertBatch     : ==>  Preparing: insert into sys_role_menu( role_id, menu_id ) values
2020-06-12 10:33:11.781 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.dao.RoleMenuMapper.insertBatch     : ==> Parameters: 7(Long), 1(Long), 7(Long), 82(Long), 7(Long), 2(Long), 7(Long), 3(Long), 7(Long), 4(Long), 7(Long), 5(Long), 7(Long), 6(Long), 7(Long), 7(Long), 7(Long), 8(Long), 7(Long), 9(Long), 7(Long), 10(Long), 7(Long), 11(Long), 7(Long), 12(Long), 7(Long), 13(Long), 7(Long), 14(Long), 7(Long), 15(Long), 7(Long), 16(Long), 7(Long), 50(Long), 7(Long), 51(Long), 7(Long), 52(Long), 7(Long), 53(Long), 7(Long), 66(Long), 7(Long), 67(Long), 7(Long), 68(Long), 7(Long), 69(Long), 7(Long), 70(Long), 7(Long), 83(Long), 7(Long), 17(Long), 7(Long), 18(Long), 7(Long), 19(Long), 7(Long), 20(Long), 7(Long), 21(Long), 7(Long), 22(Long), 7(Long), 23(Long), 7(Long), 84(Long), 7(Long), 54(Long), 7(Long), 71(Long), 7(Long), 72(Long), 7(Long), 73(Long), 7(Long), 74(Long), 7(Long), 75(Long), 7(Long), 76(Long), 7(Long), 77(Long), 7(Long), 78(Long), 7(Long), 79(Long), 7(Long), 80(Long), 7(Long), 86(Long), 7(Long), 24(Long), 7(Long), 25(Long), 7(Long), 26(Long), 7(Long), 27(Long), 7(Long), 28(Long), 7(Long), 29(Long), 7(Long), 87(Long), 7(Long), 30(Long), 7(Long), 31(Long), 7(Long), 32(Long), 7(Long), 33(Long), 7(Long), 34(Long), 7(Long), 35(Long), 7(Long), 36(Long), 7(Long), 37(Long), 7(Long), 38(Long), 7(Long), 39(Long), 7(Long), 40(Long), 7(Long), 41(Long), 7(Long), 42(Long), 7(Long), 43(Long), 7(Long), 44(Long), 7(Long), 45(Long), 7(Long), 46(Long), 7(Long), 47(Long), 7(Long), 48(Long), 7(Long), 49(Long), 7(Long), 55(Long), 7(Long), 56(Long), 7(Long), 57(Long), 7(Long), 58(Long), 7(Long), 59(Long), 7(Long), 60(Long), 7(Long), 61(Long), 7(Long), 62(Long), 7(Long), 63(Long), 7(Long), 64(Long), 7(Long), 65(Long)
2020-06-12 10:33:11.792 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.dao.RoleMenuMapper.insertBatch     : <==    Updates: 85
2020-06-12 10:33:11.802 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:33:11.803 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:33:11.801(Timestamp), 修改角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.update()(String), { role: Role(id=7, roleName=管理员, description=admin, rank=1, color=red, createTime=null, updateTime=Fri Jun 12 10:33:11 CST 2020, menuIdList=[1, 82, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 50, 51, 52, 53, 66, 67, 68, 69, 70, 83, 17, 18, 19, 20, 21, 22, 23, 84, 54, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 24, 25, 26, 27, 28, 29, 87, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], userCount=null, status=1) }(String), 0:0:0:0:0:0:0:1(String), 62(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:33:11.805 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:33:13.614 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_role 
2020-06-12 10:33:13.615 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 
2020-06-12 10:33:13.617 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT id,role_name,description,rank,color,create_time,update_time,status FROM sys_role LIMIT ?,? 
2020-06-12 10:33:13.619 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:33:13.623 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.geekblog.dao.RoleMapper.selectPage   : <==      Total: 7
2020-06-12 10:33:13.629 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:13.629 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 3(Long)
2020-06-12 10:33:13.631 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:13.635 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:13.635 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 4(Long)
2020-06-12 10:33:13.637 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:13.640 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:13.640 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 7(Long)
2020-06-12 10:33:13.642 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:13.645 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:13.645 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 8(Long)
2020-06-12 10:33:13.647 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:13.652 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:13.652 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 9(Long)
2020-06-12 10:33:13.654 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:13.656 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:13.657 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 14(Long)
2020-06-12 10:33:13.658 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:13.661 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 10:33:13.662 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 18(Long)
2020-06-12 10:33:13.664 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:13.672 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:33:13.674 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:33:13.67(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 57(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:33:13.676 DEBUG 14684 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:33:24.252 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:33:24.252 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:33:24.254 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:33:24.257 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:33:24.257 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:33:24.261 DEBUG 14684 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:33:24.359  INFO 14684 --- [http-nio-8889-exec-7] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 10:33:26.460 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:33:26.461 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:33:26.458(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:33:26.464 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:33:26.717 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 10:33:26.720 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 10:33:26.725 DEBUG 14684 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 10:33:27.143 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 10:33:27.143 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 10:33:27.146 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:33:27.149 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 10:33:27.150 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 10:33:27.152 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 10:33:27.158 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 10:33:27.158 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 10:33:27.160 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 10:33:27.165 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 10:33:27.165 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 10:33:27.167 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:33:27.174 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 10:33:27.175 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 10:33:27.177 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 10:33:27.183 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 10:33:27.184 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 10:33:27.186 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 10:33:27.192 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:33:27.192 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:33:27.195 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:33:27.197 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 10:33:27.198 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 10:33:27.199 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:33:27.203 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:33:27.203 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:33:27.212 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:33:27.214 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:33:27.216 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:33:27.225 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:33:27.228 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 10:33:27.228 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 10:33:27.232 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 10:33:27.233 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 10:33:27.234 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 10:33:27.235 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 10:33:27.241 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 10:33:27.242 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 10:33:27.244 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 10:33:27.248 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 10:33:27.248 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 10:33:27.250 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 10:33:27.254 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:33:27.257 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:33:27.513 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:33:27.515 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:33:27.517 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:33:27.617 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:33:27.618 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:33:27.619 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:33:27.627 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:33:27.630 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:33:27.630 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 10:29:14.0(Timestamp), 2020-06-12 10:33:27.627(Timestamp)
2020-06-12 10:33:27.632 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:33:27.634 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:33:27.634 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:33:27.639 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:33:27.642 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:33:27.643 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 10:29:14.0(Timestamp), 2020-06-12 10:33:27.64(Timestamp)
2020-06-12 10:33:27.644 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:33:27.645 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:33:27.645 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:33:27.650 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:33:27.652 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:33:27.653 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 10:29:14.0(Timestamp), 2020-06-12 10:33:27.65(Timestamp)
2020-06-12 10:33:27.655 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:33:27.657 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:33:27.657 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:33:27.661 DEBUG 14684 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:33:27.663 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:33:27.664 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 10:29:14.0(Timestamp), 2020-06-12 10:33:27.662(Timestamp)
2020-06-12 10:33:27.665 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:33:27.669 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 10:33:27.670 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 10:33:27.673 DEBUG 14684 --- [http-nio-8889-exec-6] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 10:33:30.013 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:33:30.014 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:33:30.012(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:33:30.016 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:35:33.821 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:35:33.822 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:35:33.82(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:35:33.824 DEBUG 14684 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:38:53.830  INFO 444 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 444 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 10:38:53.835 DEBUG 444 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 10:38:53.835  INFO 444 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 10:38:53.879  INFO 444 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 10:38:53.879  INFO 444 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 10:38:55.081  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:38:55.083  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:38:55.155  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 69ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 10:38:55.161  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:38:55.162  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:38:55.174  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 10:38:55.186  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:38:55.187  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 10:38:55.206  INFO 444 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 10:38:55.206  INFO 444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Redis repository interfaces.
2020-06-12 10:38:55.710  INFO 444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:38:55.910  INFO 444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:38:55.913  INFO 444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@34442126' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:38:55.916  INFO 444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:38:55.923  INFO 444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:38:55.934  INFO 444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$c8fc595e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:38:56.643  INFO 444 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 10:38:56.654  INFO 444 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 10:38:56.654  INFO 444 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 10:38:56.995  INFO 444 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 10:38:56.996  INFO 444 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3117 ms
2020-06-12 10:38:57.294  INFO 444 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 10:38:57.298  INFO 444 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 10:38:57.335 DEBUG 444 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 10:38:57.546  INFO 444 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 10:38:58.110  INFO 444 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 10:39:00.546  WARN 444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:39:00.548  WARN 444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:39:00.550  WARN 444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:39:00.551  WARN 444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:39:00.608  WARN 444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:39:00.608  WARN 444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:39:00.609  WARN 444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:39:00.609  WARN 444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:39:00.801  INFO 444 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 10:39:01.499  WARN 444 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 10:39:03.409  INFO 444 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 10:39:03.433  INFO 444 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 10:39:03.794  INFO 444 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@667323f5, org.springframework.security.web.context.SecurityContextPersistenceFilter@ed0cb94, org.springframework.security.web.header.HeaderWriterFilter@d87c471, org.springframework.security.web.authentication.logout.LogoutFilter@4fb0b1d, site.alanliang.geekblog.security.ValidateCodeFilter@55a403b9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@28a72533, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@13b18c9e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1ce43f85, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@35e70c34, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5556c082, org.springframework.security.web.session.SessionManagementFilter@76115bd8, org.springframework.security.web.access.ExceptionTranslationFilter@6477fda, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@35c17e3c]
2020-06-12 10:39:03.978  INFO 444 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 10:39:05.013  INFO 444 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 10:39:05.041  INFO 444 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 10:39:05.182  INFO 444 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 10:39:05.549  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 10:39:05.551  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 10:39:05.556  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 10:39:05.559  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 10:39:05.562  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 10:39:05.566  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 10:39:05.567  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 10:39:05.571  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 10:39:05.572  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 10:39:05.617  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 10:39:05.637  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 10:39:05.638  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 10:39:05.642  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 10:39:05.643  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 10:39:05.648  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 10:39:05.650  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 10:39:05.653  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 10:39:05.655  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 10:39:05.659  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 10:39:05.661  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 10:39:05.666  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 10:39:05.670  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 10:39:05.674  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 10:39:05.679  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 10:39:05.681  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 10:39:05.685  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 10:39:05.686  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 10:39:05.690  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 10:39:05.692  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 10:39:05.700  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 10:39:05.702  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 10:39:05.711  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 10:39:05.714  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 10:39:05.720  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 10:39:05.726  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 10:39:05.731  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 10:39:05.733  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 10:39:05.738  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 10:39:05.741  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 10:39:05.743  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 10:39:05.749  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 10:39:05.757  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 10:39:05.760  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 10:39:05.766  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 10:39:05.768  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 10:39:05.785  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 10:39:05.790  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 10:39:05.794  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 10:39:05.799  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 10:39:05.804  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 10:39:05.806  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 10:39:05.807  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 10:39:05.809  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 10:39:05.811  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 10:39:05.817  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 10:39:05.822  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 10:39:05.824  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 10:39:05.825  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 10:39:05.825  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 10:39:05.830  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 10:39:05.832  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 10:39:05.834  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 10:39:05.845  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 10:39:05.850  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 10:39:05.852  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 10:39:05.853  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 10:39:05.856  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 10:39:05.858  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 10:39:05.865  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 10:39:05.867  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 10:39:05.869  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 10:39:05.872  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 10:39:05.880  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 10:39:05.882  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 10:39:05.884  INFO 444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 10:39:05.951  INFO 444 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 10:39:05.956  INFO 444 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 12.986 seconds (JVM running for 14.215)
2020-06-12 10:39:06.062  INFO 444 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 10:39:06.062  INFO 444 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 10:39:06.083  INFO 444 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-06-12 10:39:06.216 DEBUG 444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:39:06.392 DEBUG 444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:39:06.438 DEBUG 444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:39:06.464 DEBUG 444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:39:06.476 DEBUG 444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:39:06.502 DEBUG 444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:39:12.278 DEBUG 444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:39:12.278 DEBUG 444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:39:12.280 DEBUG 444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:39:12.281 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:39:12.282 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:39:12.289 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:39:12.410  INFO 444 --- [http-nio-8889-exec-4] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 10:39:14.745 DEBUG 444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:39:14.757 DEBUG 444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:39:14.696(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:39:14.759 DEBUG 444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:39:15.332  INFO 444 --- [http-nio-8889-exec-3] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 10:39:15.338  INFO 444 --- [http-nio-8889-exec-3] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 10:39:17.064 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:39:17.070 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:39:17.076 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:39:17.091 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:39:17.096 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:39:17.101 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:39:17.106 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:39:17.107 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:39:17.116 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:39:17.157 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:39:17.164 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:39:17.228 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:39:17.233 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:39:17.240 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:39:17.372 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:39:17.378 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:39:17.381 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:39:17.396 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:39:17.406 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:39:17.409 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 10:33:26.0(Timestamp), 2020-06-12 10:39:17.397(Timestamp)
2020-06-12 10:39:17.416 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:39:17.432 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:39:17.433 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:39:17.447 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:39:17.455 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:39:17.458 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 10:33:26.0(Timestamp), 2020-06-12 10:39:17.448(Timestamp)
2020-06-12 10:39:17.461 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:39:17.474 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:39:17.475 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:39:17.489 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:39:17.498 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:39:17.504 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 10:33:26.0(Timestamp), 2020-06-12 10:39:17.491(Timestamp)
2020-06-12 10:39:17.509 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:39:17.525 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:39:17.527 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:39:17.545 DEBUG 444 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:39:17.559 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:39:17.562 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 10:33:26.0(Timestamp), 2020-06-12 10:39:17.553(Timestamp)
2020-06-12 10:39:17.568 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:39:29.745 DEBUG 444 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 10:39:29.746 DEBUG 444 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 10:39:29.749 DEBUG 444 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 10:39:29.858 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:39:29.859 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:39:29.880 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:39:29.885 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:39:29.969 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:39:29.995 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:39:29.997 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:39:30.004 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:39:30.010 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:39:30.010 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:39:30.012 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:39:30.016 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:39:30.018 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:39:30.021 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:39:30.030 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:39:30.038 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:39:30.028(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 236(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:39:30.043 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:39:55.248 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:39:55.249 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:39:55.245(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:39:55.251 DEBUG 444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:40:06.337 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:40:06.338 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:40:06.335(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:40:06.341 DEBUG 444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:40:19.854 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 10:40:19.859 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 2(Long)
2020-06-12 10:40:19.862 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 10:40:19.875 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:40:19.876 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:40:19.874(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=2, status=2) }(String), 0:0:0:0:0:0:0:1(String), 26(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:40:19.878 DEBUG 444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:40:19.907 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:40:19.908 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:40:19.912 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:40:19.912 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:40:19.932 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:40:19.935 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:40:19.937 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:40:19.942 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:40:19.946 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:40:19.946 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:40:19.953 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:40:19.957 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:40:19.957 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:40:19.961 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:40:19.976 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:40:19.978 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:40:19.973(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 68(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:40:19.983 DEBUG 444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:42:13.928  INFO 12364 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12364 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 10:42:13.932 DEBUG 12364 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 10:42:13.933  INFO 12364 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 10:42:13.983  INFO 12364 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 10:42:13.983  INFO 12364 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 10:42:15.645  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:42:15.650  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:42:15.798  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 133ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 10:42:15.802  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:42:15.803  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:42:15.815  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 10:42:15.828  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:42:15.829  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 10:42:15.849  INFO 12364 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 10:42:15.849  INFO 12364 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-06-12 10:42:16.555  INFO 12364 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:42:16.779  INFO 12364 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:42:16.782  INFO 12364 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6037c18d' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:42:16.785  INFO 12364 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:42:16.793  INFO 12364 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:42:16.805  INFO 12364 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$67335959] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:42:17.362  INFO 12364 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 10:42:17.369  INFO 12364 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 10:42:17.371  INFO 12364 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 10:42:17.473  INFO 12364 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 10:42:17.473  INFO 12364 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3490 ms
2020-06-12 10:42:17.769  INFO 12364 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 10:42:17.774  INFO 12364 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 10:42:17.823 DEBUG 12364 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 10:42:18.027  INFO 12364 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 10:42:18.526  INFO 12364 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 10:42:20.852  WARN 12364 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:42:20.853  WARN 12364 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:42:20.854  WARN 12364 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:42:20.854  WARN 12364 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:42:20.886  WARN 12364 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:42:20.886  WARN 12364 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:42:20.886  WARN 12364 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:42:20.886  WARN 12364 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:42:21.103  INFO 12364 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 10:42:21.624  WARN 12364 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 10:42:23.789  INFO 12364 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 10:42:23.814  INFO 12364 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 10:42:23.974  INFO 12364 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@11ea33bf, org.springframework.security.web.context.SecurityContextPersistenceFilter@3e33bee1, org.springframework.security.web.header.HeaderWriterFilter@5128a88e, org.springframework.security.web.authentication.logout.LogoutFilter@669a8d87, site.alanliang.geekblog.security.ValidateCodeFilter@65b17b4e, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@653db98a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4519783f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2e2e5bdb, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@3d091ec4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7cc38309, org.springframework.security.web.session.SessionManagementFilter@61c59055, org.springframework.security.web.access.ExceptionTranslationFilter@4b2274f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@61795f25]
2020-06-12 10:42:24.091  INFO 12364 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 10:42:24.775  INFO 12364 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 10:42:24.789  INFO 12364 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 10:42:24.844  INFO 12364 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 10:42:25.239  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 10:42:25.243  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 10:42:25.250  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 10:42:25.252  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 10:42:25.254  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 10:42:25.257  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 10:42:25.258  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 10:42:25.264  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 10:42:25.266  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 10:42:25.324  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 10:42:25.356  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 10:42:25.361  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 10:42:25.371  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 10:42:25.375  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 10:42:25.387  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 10:42:25.394  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 10:42:25.402  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 10:42:25.407  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 10:42:25.412  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 10:42:25.414  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 10:42:25.419  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 10:42:25.424  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 10:42:25.427  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 10:42:25.431  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 10:42:25.432  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 10:42:25.433  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 10:42:25.434  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 10:42:25.436  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 10:42:25.437  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 10:42:25.445  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 10:42:25.448  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 10:42:25.452  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 10:42:25.454  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 10:42:25.458  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 10:42:25.462  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 10:42:25.466  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 10:42:25.467  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 10:42:25.468  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 10:42:25.469  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 10:42:25.469  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 10:42:25.471  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 10:42:25.475  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 10:42:25.477  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 10:42:25.479  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 10:42:25.479  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 10:42:25.488  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 10:42:25.491  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 10:42:25.493  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 10:42:25.496  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 10:42:25.499  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 10:42:25.499  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 10:42:25.500  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 10:42:25.501  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 10:42:25.501  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 10:42:25.504  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 10:42:25.507  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 10:42:25.508  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 10:42:25.509  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 10:42:25.509  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 10:42:25.511  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 10:42:25.512  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 10:42:25.513  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 10:42:25.518  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 10:42:25.521  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 10:42:25.522  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 10:42:25.524  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 10:42:25.525  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 10:42:25.525  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 10:42:25.528  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 10:42:25.529  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 10:42:25.530  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 10:42:25.530  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 10:42:25.532  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 10:42:25.533  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 10:42:25.534  INFO 12364 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 10:42:25.585  INFO 12364 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 10:42:25.590  INFO 12364 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 12.637 seconds (JVM running for 13.797)
2020-06-12 10:42:30.996  INFO 12364 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 10:42:30.996  INFO 12364 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 10:42:31.026  INFO 12364 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 29 ms
2020-06-12 10:42:31.202 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:42:31.433 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:42:31.462 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:42:31.478 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:42:31.485 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:42:31.502 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:42:37.133  INFO 12364 --- [http-nio-8889-exec-7] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 10:42:37.136  INFO 12364 --- [http-nio-8889-exec-7] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 10:42:38.407 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 6 
2020-06-12 10:42:38.413 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean)
2020-06-12 10:42:38.416 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-12 10:42:38.470 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 limit ? 
2020-06-12 10:42:38.479 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 10:42:38.482 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 10:42:38.568 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 10:42:38.572 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 10:42:38.597 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-12 10:42:38.606 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 10:42:38.764 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 1
2020-06-12 10:42:38.788 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:42:38.793 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:42:38.796 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:42:38.910 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:42:38.918 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 10:42:38.899(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 1968(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:42:38.922 DEBUG 12364 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 10:42:51.409 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 6 
2020-06-12 10:42:51.410 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean)
2020-06-12 10:42:51.413 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-12 10:42:51.421 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 limit ? 
2020-06-12 10:42:51.421 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 10:42:51.423 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 10:42:51.433 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 10:42:51.434 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 10:42:51.436 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-12 10:42:51.436 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 10:42:51.441 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 1
2020-06-12 10:42:51.444 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:42:51.444 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:42:51.448 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:42:51.455 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:42:51.456 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 10:42:51.453(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 46(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:42:51.458 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 10:43:07.843 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:43:07.843 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:43:07.845 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:43:07.847 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:43:07.848 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:43:07.853 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:43:07.956  INFO 12364 --- [http-nio-8889-exec-10] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 10:43:10.092 DEBUG 12364 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:43:10.094 DEBUG 12364 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:43:10.089(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:43:10.099 DEBUG 12364 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:43:10.369 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 10:43:10.371 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 10:43:10.379 DEBUG 12364 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 10:43:10.851 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 10:43:10.853 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 10:43:10.856 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:43:10.868 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 10:43:10.869 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 10:43:10.871 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 10:43:10.886 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 10:43:10.888 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 10:43:10.891 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 10:43:10.902 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 10:43:10.903 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 10:43:10.905 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:43:10.916 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 10:43:10.918 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 10:43:10.920 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 10:43:10.931 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 10:43:10.932 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 10:43:10.934 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 10:43:10.938 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:43:10.939 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:43:10.941 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:43:10.955 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 10:43:10.957 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 10:43:10.959 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:43:10.968 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:43:10.970 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:43:10.974 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:43:10.978 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:43:10.980 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:43:10.988 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:43:10.993 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 10:43:10.996 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 10:43:11.008 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 10:43:11.019 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 10:43:11.020 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 10:43:11.022 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 10:43:11.036 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 10:43:11.038 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 10:43:11.040 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 10:43:11.055 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 10:43:11.055 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 10:43:11.058 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 10:43:11.063 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:43:11.071 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:43:11.136 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:43:11.138 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:43:11.139 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:43:11.253 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:43:11.258 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:43:11.261 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:43:11.273 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:43:11.282 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:43:11.286 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 10:39:15.0(Timestamp), 2020-06-12 10:43:11.274(Timestamp)
2020-06-12 10:43:11.290 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:43:11.293 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:43:11.294 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:43:11.305 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:43:11.315 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:43:11.317 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 10:39:15.0(Timestamp), 2020-06-12 10:43:11.309(Timestamp)
2020-06-12 10:43:11.321 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:43:11.323 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:43:11.323 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:43:11.337 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:43:11.342 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:43:11.346 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 10:39:15.0(Timestamp), 2020-06-12 10:43:11.339(Timestamp)
2020-06-12 10:43:11.350 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:43:11.352 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:43:11.352 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:43:11.366 DEBUG 12364 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:43:11.370 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:43:11.372 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 10:39:15.0(Timestamp), 2020-06-12 10:43:11.366(Timestamp)
2020-06-12 10:43:11.375 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:43:11.391 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 10:43:11.395 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 10:43:11.401 DEBUG 12364 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 10:43:42.604 DEBUG 12364 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 10:43:42.608 DEBUG 12364 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 10:43:42.610 DEBUG 12364 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 10:43:42.662 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:43:42.663 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:43:42.666 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:43:42.668 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:43:42.679 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:43:42.681 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:43:42.683 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:43:42.685 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:43:42.687 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:43:42.689 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:43:42.694 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:43:42.697 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:43:42.697 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:43:42.700 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:43:42.710 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:43:42.714 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:43:42.709(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 57(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:43:42.716 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:43:49.221 DEBUG 12364 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 10:43:49.232 DEBUG 12364 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 3(Long)
2020-06-12 10:43:49.238 DEBUG 12364 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 10:43:49.275 DEBUG 12364 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:43:49.277 DEBUG 12364 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:43:49.27(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=3, status=2) }(String), 0:0:0:0:0:0:0:1(String), 59(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:43:49.282 DEBUG 12364 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:43:49.356 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:43:49.357 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:43:49.359 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:43:49.360 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:43:49.372 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:43:49.374 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:43:49.374 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:43:49.380 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:43:49.382 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:43:49.382 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:43:49.385 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:43:49.388 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:43:49.389 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:43:49.391 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:43:49.401 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:43:49.402 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:43:49.4(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 58(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:43:49.405 DEBUG 12364 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:43:53.281 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 6 
2020-06-12 10:43:53.282 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean)
2020-06-12 10:43:53.287 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-12 10:43:53.293 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 limit ? 
2020-06-12 10:43:53.294 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 10:43:53.296 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 10:43:53.307 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 10:43:53.308 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 10:43:53.309 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-12 10:43:53.309 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 10:43:53.313 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 2
2020-06-12 10:43:53.315 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:43:53.315 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:43:53.319 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:43:53.321 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:43:53.321 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:43:53.323 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:43:53.328 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:43:53.330 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 10:43:53.327(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 49(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:43:53.332 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 10:44:01.421 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 10:44:01.421 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 1(Long)
2020-06-12 10:44:01.423 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 10:44:01.433 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:44:01.435 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:44:01.431(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=2) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:44:01.436 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:44:01.461 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:44:01.462 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:44:01.463 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:44:01.464 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:44:01.472 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:44:01.473 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:44:01.473 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:44:01.475 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:44:01.477 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:44:01.477 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:44:01.479 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:44:01.480 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:44:01.480 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:44:01.483 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:44:01.491 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:44:01.492 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:44:01.49(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 30(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:44:01.493 DEBUG 12364 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:44:05.311 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (published = ? AND top = ?) limit 6 
2020-06-12 10:44:05.312 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean)
2020-06-12 10:44:05.314 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-12 10:44:05.322 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 limit ? 
2020-06-12 10:44:05.322 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 10:44:05.324 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 10:44:05.333 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 10:44:05.333 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 10:44:05.348 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-12 10:44:05.348 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 10:44:05.355 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 2
2020-06-12 10:44:05.356 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:44:05.356 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:44:05.359 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:44:05.360 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:44:05.360 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:44:05.362 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:44:05.370 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:44:05.370 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 10:44:05.368(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 58(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:44:05.373 DEBUG 12364 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 10:45:46.396 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:45:46.397 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:45:46.394(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:45:46.399 DEBUG 12364 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:47:47.818  INFO 3980 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 3980 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 10:47:47.822 DEBUG 3980 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 10:47:47.823  INFO 3980 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 10:47:47.868  INFO 3980 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 10:47:47.869  INFO 3980 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 10:47:49.177  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:47:49.181  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:47:49.312  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 120ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 10:47:49.317  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:47:49.317  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:47:49.330  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 10:47:49.342  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:47:49.343  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 10:47:49.362  INFO 3980 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 10:47:49.363  INFO 3980 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 Redis repository interfaces.
2020-06-12 10:47:49.805  INFO 3980 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:47:49.915  INFO 3980 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:47:49.917  INFO 3980 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@3297a169' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:47:49.918  INFO 3980 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:47:49.924  INFO 3980 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:47:49.942  INFO 3980 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$b18f349c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:47:50.979  INFO 3980 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 10:47:50.991  INFO 3980 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 10:47:50.993  INFO 3980 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 10:47:51.324  INFO 3980 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 10:47:51.325  INFO 3980 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3456 ms
2020-06-12 10:47:51.569  INFO 3980 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 10:47:51.570  INFO 3980 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 10:47:51.584 DEBUG 3980 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 10:47:51.685  INFO 3980 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 10:47:52.276  INFO 3980 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 10:47:54.627  WARN 3980 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:47:54.627  WARN 3980 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:47:54.628  WARN 3980 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:47:54.628  WARN 3980 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:47:54.654  WARN 3980 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:47:54.654  WARN 3980 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:47:54.654  WARN 3980 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:47:54.654  WARN 3980 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:47:54.902  INFO 3980 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 10:47:55.438  WARN 3980 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 10:47:57.253  INFO 3980 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 10:47:57.268  INFO 3980 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 10:47:57.485  INFO 3980 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3586b208, org.springframework.security.web.context.SecurityContextPersistenceFilter@139124b6, org.springframework.security.web.header.HeaderWriterFilter@29afdc6f, org.springframework.security.web.authentication.logout.LogoutFilter@6b6b7ba5, site.alanliang.geekblog.security.ValidateCodeFilter@4844f31a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7d53429b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5e4b7d63, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@76aff02f, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@1c5c72e9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@516e367d, org.springframework.security.web.session.SessionManagementFilter@4421f5e0, org.springframework.security.web.access.ExceptionTranslationFilter@7276fa4a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7c658af5]
2020-06-12 10:47:57.594  INFO 3980 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 10:47:58.359  INFO 3980 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 10:47:58.379  INFO 3980 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 10:47:58.464  INFO 3980 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 10:47:58.772  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 10:47:58.774  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 10:47:58.777  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 10:47:58.779  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 10:47:58.779  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 10:47:58.781  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 10:47:58.782  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 10:47:58.785  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 10:47:58.786  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 10:47:58.815  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 10:47:58.826  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 10:47:58.826  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 10:47:58.829  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 10:47:58.830  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 10:47:58.833  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 10:47:58.833  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 10:47:58.835  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 10:47:58.837  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 10:47:58.840  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 10:47:58.842  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 10:47:58.846  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 10:47:58.855  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 10:47:58.860  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 10:47:58.867  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 10:47:58.869  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 10:47:58.874  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 10:47:58.876  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 10:47:58.882  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 10:47:58.885  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 10:47:58.897  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 10:47:58.901  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 10:47:58.910  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 10:47:58.914  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 10:47:58.921  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 10:47:58.929  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 10:47:58.938  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 10:47:58.941  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 10:47:58.946  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 10:47:58.949  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 10:47:58.951  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 10:47:58.955  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 10:47:58.963  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 10:47:58.965  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 10:47:58.970  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 10:47:58.974  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 10:47:58.997  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 10:47:59.002  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 10:47:59.006  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 10:47:59.014  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 10:47:59.022  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 10:47:59.027  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 10:47:59.030  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 10:47:59.033  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 10:47:59.034  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 10:47:59.043  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 10:47:59.049  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 10:47:59.051  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 10:47:59.052  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 10:47:59.053  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 10:47:59.058  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 10:47:59.060  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 10:47:59.062  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 10:47:59.070  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 10:47:59.074  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 10:47:59.075  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 10:47:59.076  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 10:47:59.077  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 10:47:59.078  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 10:47:59.081  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 10:47:59.083  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 10:47:59.084  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 10:47:59.084  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 10:47:59.087  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 10:47:59.088  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 10:47:59.088  INFO 3980 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 10:47:59.128  INFO 3980 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 10:47:59.130  INFO 3980 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 12.116 seconds (JVM running for 13.243)
2020-06-12 10:48:02.573  INFO 3980 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 10:48:02.573  INFO 3980 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 10:48:02.587  INFO 3980 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-06-12 10:48:02.748 DEBUG 3980 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:48:02.964 DEBUG 3980 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:48:03.000 DEBUG 3980 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:48:03.023 DEBUG 3980 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:48:03.035 DEBUG 3980 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:48:03.054 DEBUG 3980 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:48:07.964 DEBUG 3980 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:48:07.965 DEBUG 3980 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:48:07.966 DEBUG 3980 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:48:07.967 DEBUG 3980 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:48:07.968 DEBUG 3980 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:48:07.976 DEBUG 3980 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:48:08.080  INFO 3980 --- [http-nio-8889-exec-3] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 10:48:10.318 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:48:10.328 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:48:10.313(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:48:10.330 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:48:10.899  INFO 3980 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 10:48:10.901  INFO 3980 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 10:48:12.390 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 10:48:12.393 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 10:48:12.394 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:48:12.420 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:48:12.422 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:48:12.423 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:48:12.428 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:48:12.431 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:48:12.435 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:48:12.438 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:48:12.440 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:48:12.448 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:48:12.471 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 10:48:12.473 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 10:48:12.476 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 10:48:12.492 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:48:12.500 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:48:12.562 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:48:12.563 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:48:12.565 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:48:12.642 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:48:12.645 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:48:12.648 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:48:12.658 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:48:12.663 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:48:12.665 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 10:43:10.0(Timestamp), 2020-06-12 10:48:12.659(Timestamp)
2020-06-12 10:48:12.669 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:48:12.673 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:48:12.674 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:48:12.682 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:48:12.691 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:48:12.693 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 10:43:10.0(Timestamp), 2020-06-12 10:48:12.683(Timestamp)
2020-06-12 10:48:12.697 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:48:12.707 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:48:12.708 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:48:12.718 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:48:12.728 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:48:12.730 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 10:43:10.0(Timestamp), 2020-06-12 10:48:12.724(Timestamp)
2020-06-12 10:48:12.732 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:48:12.740 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:48:12.741 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:48:12.747 DEBUG 3980 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:48:12.750 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:48:12.752 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 10:43:10.0(Timestamp), 2020-06-12 10:48:12.748(Timestamp)
2020-06-12 10:48:12.755 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:48:16.065 DEBUG 3980 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:48:16.071 DEBUG 3980 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:48:16.064(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 42(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:48:16.076 DEBUG 3980 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:48:23.813 DEBUG 3980 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (status = ?) 
2020-06-12 10:48:23.815 DEBUG 3980 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Integer)
2020-06-12 10:48:23.827 DEBUG 3980 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:48:23.828 DEBUG 3980 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:48:23.825(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=, type=null, categoryId=null, published=null, status=0, top=null, recommend=null, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 61(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:48:23.830 DEBUG 3980 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:48:26.011 DEBUG 3980 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (status = ?) 
2020-06-12 10:48:26.012 DEBUG 3980 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 1(Integer)
2020-06-12 10:48:26.022 DEBUG 3980 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:48:26.023 DEBUG 3980 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:48:26.021(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=, type=null, categoryId=null, published=null, status=1, top=null, recommend=null, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:48:26.025 DEBUG 3980 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:48:28.834 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:48:28.835 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:48:28.851 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:48:28.853 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:48:28.930 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:48:28.936 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:48:28.937 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:48:28.939 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:48:28.945 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:48:28.945 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:48:28.947 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:48:28.949 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:48:28.950 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:48:28.952 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:48:28.959 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:48:28.960 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:48:28.958(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 134(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:48:28.962 DEBUG 3980 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:48:43.690 DEBUG 3980 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 10:48:43.699 DEBUG 3980 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 0(Integer), 3(Long)
2020-06-12 10:48:43.704 DEBUG 3980 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 10:48:43.738 DEBUG 3980 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:48:43.741 DEBUG 3980 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:48:43.735(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=3, status=0) }(String), 0:0:0:0:0:0:0:1(String), 47(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:48:43.746 DEBUG 3980 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:48:43.805 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:48:43.806 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:48:43.812 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:48:43.815 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:48:43.837 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:48:43.843 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:48:43.844 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:48:43.850 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:48:43.853 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:48:43.854 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:48:43.863 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:48:43.867 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:48:43.867 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:48:43.872 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:48:43.888 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:48:43.889 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:48:43.884(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 86(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:48:43.895 DEBUG 3980 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:48:52.902 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE (status = ?) 
2020-06-12 10:48:52.902 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Integer)
2020-06-12 10:48:52.904 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id WHERE (status = ?) LIMIT ?,? 
2020-06-12 10:48:52.906 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Integer), 0(Long), 15(Long)
2020-06-12 10:48:52.912 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-12 10:48:52.914 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:48:52.914 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:48:52.916 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:48:52.922 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:48:52.923 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:48:52.921(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=, type=null, categoryId=null, published=null, status=0, top=null, recommend=null, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:48:52.925 DEBUG 3980 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:49:20.599 DEBUG 3980 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:49:20.600 DEBUG 3980 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:49:20.597(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:49:20.603 DEBUG 3980 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:52:18.117  INFO 19324 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 19324 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 10:52:18.121 DEBUG 19324 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 10:52:18.121  INFO 19324 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 10:52:18.165  INFO 19324 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 10:52:18.165  INFO 19324 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 10:52:19.335  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:52:19.337  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:52:19.427  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 82ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 10:52:19.432  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:52:19.433  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 10:52:19.445  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 10:52:19.456  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 10:52:19.457  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 10:52:19.475  INFO 19324 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 10:52:19.475  INFO 19324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-12 10:52:20.052  INFO 19324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:52:20.218  INFO 19324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:52:20.221  INFO 19324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@778b67e3' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:52:20.225  INFO 19324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:52:20.234  INFO 19324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:52:20.246  INFO 19324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$100b4336] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 10:52:20.787  INFO 19324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 10:52:20.807  INFO 19324 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 10:52:20.808  INFO 19324 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 10:52:20.976  INFO 19324 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 10:52:20.977  INFO 19324 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2812 ms
2020-06-12 10:52:21.387  INFO 19324 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 10:52:21.388  INFO 19324 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 10:52:21.402 DEBUG 19324 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 10:52:21.499  INFO 19324 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 10:52:21.863  INFO 19324 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 10:52:24.119  WARN 19324 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:52:24.120  WARN 19324 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:52:24.120  WARN 19324 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:52:24.121  WARN 19324 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:52:24.147  WARN 19324 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:52:24.147  WARN 19324 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:52:24.147  WARN 19324 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:52:24.147  WARN 19324 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 10:52:24.339  INFO 19324 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 10:52:24.992  WARN 19324 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 10:52:26.832  INFO 19324 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 10:52:26.864  INFO 19324 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 10:52:27.151  INFO 19324 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3c5e5a79, org.springframework.security.web.context.SecurityContextPersistenceFilter@6066352d, org.springframework.security.web.header.HeaderWriterFilter@61e2fb1a, org.springframework.security.web.authentication.logout.LogoutFilter@499f98ea, site.alanliang.geekblog.security.ValidateCodeFilter@622a8abb, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5764b96c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6af4767a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6969171b, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@19a71f12, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@537d339, org.springframework.security.web.session.SessionManagementFilter@4e8f84c, org.springframework.security.web.access.ExceptionTranslationFilter@718679a7, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4d058a75]
2020-06-12 10:52:27.367  INFO 19324 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 10:52:28.038  INFO 19324 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 10:52:28.055  INFO 19324 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 10:52:28.123  INFO 19324 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 10:52:28.363  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 10:52:28.363  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 10:52:28.367  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 10:52:28.369  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 10:52:28.370  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 10:52:28.372  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 10:52:28.374  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 10:52:28.378  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 10:52:28.379  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 10:52:28.412  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 10:52:28.422  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 10:52:28.423  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 10:52:28.426  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 10:52:28.428  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 10:52:28.431  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 10:52:28.432  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 10:52:28.434  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 10:52:28.436  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 10:52:28.438  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 10:52:28.440  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 10:52:28.442  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 10:52:28.445  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 10:52:28.447  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 10:52:28.449  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 10:52:28.450  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 10:52:28.452  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 10:52:28.452  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 10:52:28.455  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 10:52:28.455  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 10:52:28.460  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 10:52:28.461  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 10:52:28.464  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 10:52:28.466  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 10:52:28.468  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 10:52:28.472  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 10:52:28.475  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 10:52:28.476  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 10:52:28.478  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 10:52:28.479  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 10:52:28.479  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 10:52:28.481  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 10:52:28.484  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 10:52:28.487  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 10:52:28.492  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 10:52:28.494  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 10:52:28.511  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 10:52:28.515  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 10:52:28.520  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 10:52:28.524  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 10:52:28.529  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 10:52:28.530  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 10:52:28.532  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 10:52:28.534  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 10:52:28.535  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 10:52:28.544  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 10:52:28.549  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 10:52:28.551  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 10:52:28.553  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 10:52:28.554  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 10:52:28.560  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 10:52:28.562  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 10:52:28.564  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 10:52:28.578  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 10:52:28.585  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 10:52:28.587  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 10:52:28.589  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 10:52:28.591  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 10:52:28.594  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 10:52:28.602  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 10:52:28.607  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 10:52:28.611  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 10:52:28.614  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 10:52:28.625  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 10:52:28.628  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 10:52:28.629  INFO 19324 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 10:52:28.695  INFO 19324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 10:52:28.699  INFO 19324 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 11.473 seconds (JVM running for 12.586)
2020-06-12 10:52:32.992  INFO 19324 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 10:52:32.992  INFO 19324 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 10:52:33.009  INFO 19324 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2020-06-12 10:52:33.162 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:52:33.162 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:52:33.345 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:52:33.345 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:52:33.379 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:52:33.379 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:52:33.401 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:52:33.401 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:52:33.412 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:52:33.412 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:52:33.429 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:52:33.429 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:52:39.813 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 10:52:39.813 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 10:52:39.815 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 10:52:39.816 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 10:52:39.817 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 10:52:39.822 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 10:52:39.963  INFO 19324 --- [http-nio-8889-exec-6] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 10:52:42.147 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:52:42.156 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:52:42.138(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:52:42.160 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:52:42.635  INFO 19324 --- [http-nio-8889-exec-5] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 10:52:42.640  INFO 19324 --- [http-nio-8889-exec-5] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 10:52:44.278 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 10:52:44.280 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 10:52:44.282 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:52:44.310 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 10:52:44.311 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 10:52:44.313 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:52:44.319 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 10:52:44.324 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 10:52:44.329 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 10:52:44.332 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 10:52:44.334 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 10:52:44.341 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 10:52:44.369 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 10:52:44.372 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 10:52:44.375 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 10:52:44.398 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:52:44.407 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 10:52:44.500 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 10:52:44.507 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 10:52:44.511 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 10:52:44.642 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 10:52:44.648 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:52:44.652 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:52:44.668 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:52:44.680 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:52:44.683 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 10:48:10.0(Timestamp), 2020-06-12 10:52:44.67(Timestamp)
2020-06-12 10:52:44.687 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 10:52:44.695 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:52:44.696 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:52:44.708 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:52:44.713 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:52:44.715 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 10:48:10.0(Timestamp), 2020-06-12 10:52:44.709(Timestamp)
2020-06-12 10:52:44.717 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 10:52:44.726 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:52:44.726 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:52:44.734 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:52:44.738 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:52:44.741 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 10:48:10.0(Timestamp), 2020-06-12 10:52:44.735(Timestamp)
2020-06-12 10:52:44.743 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 10:52:44.750 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 10:52:44.750 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 10:52:44.760 DEBUG 19324 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 10:52:44.764 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 10:52:44.767 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 10:48:10.0(Timestamp), 2020-06-12 10:52:44.76(Timestamp)
2020-06-12 10:52:44.770 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 10:52:51.511 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:52:51.512 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:52:51.530 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:52:51.533 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:52:51.628 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:52:51.641 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:52:51.643 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:52:51.645 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:52:51.650 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:52:51.650 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:52:51.655 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:52:51.658 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:52:51.658 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:52:51.660 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:52:51.667 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:52:51.677 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:52:51.665(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 207(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:52:51.680 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:52:55.082 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status FROM t_article WHERE id=? 
2020-06-12 10:52:55.083 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-12 10:52:55.089 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 10:52:55.113 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:52:55.113 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:52:55.115 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:52:55.393 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 10:52:55.394 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 10:52:55.398 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 10:53:04.540 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 10:53:04.555 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), true(Boolean), true(Boolean), false(Boolean), 2(Long), 2020-06-12 10:53:04.525(Timestamp), 2(Integer), true(Boolean), false(Boolean), 1(Integer), 2(Long)
2020-06-12 10:53:04.569 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 10:53:04.572 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 10:53:04.577 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 10:53:04.584 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 10:53:05.109 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 10:53:05.110 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 10:53:05.113 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 10:53:05.924 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:53:05.925 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:53:05.922(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 1395(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:53:05.926 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:53:09.659 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status FROM t_article WHERE id=? 
2020-06-12 10:53:09.660 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-12 10:53:09.666 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 10:53:09.676 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:53:09.676 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:53:09.678 DEBUG 19324 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:53:13.388 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 10:53:13.388 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:53:13.390 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 10:53:13.390 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:53:13.402 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 10:53:13.403 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:53:13.403 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 10:53:13.405 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 10:53:13.407 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:53:13.407 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 10:53:13.410 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:53:13.412 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 10:53:13.412 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 10:53:13.416 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 10:53:13.423 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:53:13.424 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:53:13.421(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 41(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:53:13.426 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:53:37.735 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-06-12 10:53:37.737 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-06-12 10:53:37.740 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-06-12 10:53:37.743 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:53:37.746 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 3
2020-06-12 10:53:37.752 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:53:37.752 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:53:37.751(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 28(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:53:37.754 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:53:43.640 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-12 10:53:43.644 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-12 10:53:43.651 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-12 10:53:43.652 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:53:43.659 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 10
2020-06-12 10:53:43.666 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:53:43.667 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:53:43.664(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 34(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:53:43.669 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:53:47.384 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_comment 
2020-06-12 10:53:47.385 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 
2020-06-12 10:53:47.395 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: select id, pid, user_id, article_id, visitor_id, content, create_time, browser, os, address, request_ip, status from t_comment order by create_time DESC LIMIT ?,? 
2020-06-12 10:53:47.395 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:53:47.405 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listTableByPage  : <==      Total: 1
2020-06-12 10:53:47.417 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 10:53:47.418 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 10:53:47.420 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 10:53:47.430 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:53:47.431 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:53:47.429(Timestamp), 查询评论(String), INFO(String), site.alanliang.geekblog.controller.admin.CommentController.listTableByPage()(String), { page: 1 limit: 15 commentQuery: CommentQuery(startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 56(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:53:47.434 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:53:56.683 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectPage       : ==>  Preparing: SELECT COUNT(1) FROM t_message 
2020-06-12 10:53:56.684 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectPage       : ==> Parameters: 
2020-06-12 10:53:56.687 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectPage       : ==>  Preparing: SELECT id,nickname,pid,content,email,create_time,request_ip,address,status FROM t_message ORDER BY create_time DESC LIMIT ?,? 
2020-06-12 10:53:56.691 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectPage       : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:53:56.692 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectPage       : <==      Total: 2
2020-06-12 10:53:56.703 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:53:56.705 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:53:56.701(Timestamp), 查询留言(String), INFO(String), site.alanliang.geekblog.controller.admin.MessageController.listTableByPage()(String), { page: 1 limit: 15 messageQuery: MessageQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 27(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:53:56.708 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:54:09.258 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-12 10:54:09.259 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-12 10:54:09.262 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,create_time,update_time,sort FROM t_link LIMIT ?,? 
2020-06-12 10:54:09.264 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:54:09.265 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 4
2020-06-12 10:54:09.277 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:54:09.277 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:54:09.275(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 32(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:54:09.279 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:54:13.043 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-12 10:54:13.044 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-12 10:54:13.047 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT id,url,description,sort,display,create_time,update_time FROM t_photo LIMIT ?,? 
2020-06-12 10:54:13.048 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:54:13.050 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : <==      Total: 7
2020-06-12 10:54:13.060 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:54:13.060 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:54:13.06(Timestamp), 查询相册(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 27(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:54:13.063 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:54:21.545 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectById  : ==>  Preparing: SELECT id,url,description,sort,display,create_time,update_time FROM t_photo WHERE id=? 
2020-06-12 10:54:21.547 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectById  : ==> Parameters: 1(Long)
2020-06-12 10:54:21.550 DEBUG 19324 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectById  : <==      Total: 1
2020-06-12 10:58:35.859 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:58:35.859 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:58:35.857(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:58:35.862 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:58:36.265 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 10:58:36.266 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 10:58:36.270 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 10:58:36.292 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:58:36.292 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:58:36.29(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:58:36.295 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 10:59:43.975 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_user su 
2020-06-12 10:59:43.976 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 
2020-06-12 10:59:43.981 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: select su.id, su.username, su.nickname, su.sex, su.email, su.phone, su.status, su.create_time, su.update_time, sr.id as rid, sr.role_name, sr.color from sys_user su left join sys_role_user sru on su.id = sru.user_id left join sys_role sr on sru.role_id = sr.id order by su.id LIMIT ?,? 
2020-06-12 10:59:43.982 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-12 10:59:43.988 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : <==      Total: 4
2020-06-12 10:59:44.005 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 10:59:44.006 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 10:59:44.003(Timestamp), 查询用户(String), INFO(String), site.alanliang.geekblog.controller.admin.UserController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 39(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 10:59:44.008 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:00:07.922 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_role 
2020-06-12 11:00:07.923 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 
2020-06-12 11:00:07.925 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT id,role_name,description,rank,color,create_time,update_time,status FROM sys_role LIMIT ?,? 
2020-06-12 11:00:07.926 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-12 11:00:07.929 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.geekblog.dao.RoleMapper.selectPage   : <==      Total: 7
2020-06-12 11:00:07.935 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 11:00:07.936 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 3(Long)
2020-06-12 11:00:07.937 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 11:00:07.940 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 11:00:07.940 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 4(Long)
2020-06-12 11:00:07.941 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 11:00:07.943 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 11:00:07.943 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 7(Long)
2020-06-12 11:00:07.944 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 11:00:07.949 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 11:00:07.950 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 8(Long)
2020-06-12 11:00:07.951 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 11:00:07.954 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 11:00:07.954 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 9(Long)
2020-06-12 11:00:07.955 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 11:00:07.957 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 11:00:07.957 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 14(Long)
2020-06-12 11:00:07.959 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 11:00:07.960 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-12 11:00:07.960 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 18(Long)
2020-06-12 11:00:07.961 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-12 11:00:07.970 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:00:07.971 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:00:07.969(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 61(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:00:07.973 DEBUG 19324 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:00:59.165 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,create_time,update_time FROM sys_menu 
2020-06-12 11:00:59.165 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-12 11:00:59.181 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-12 11:00:59.194 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_menu 
2020-06-12 11:00:59.195 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectCount  : ==> Parameters: 
2020-06-12 11:00:59.197 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectCount  : <==      Total: 1
2020-06-12 11:00:59.205 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:00:59.206 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:00:59.204(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 48(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:00:59.208 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:01:01.145 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT COUNT(1) FROM t_visitor 
2020-06-12 11:01:01.146 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 
2020-06-12 11:01:01.149 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT id,username,nickname,status,email,link,create_time,update_time FROM t_visitor LIMIT ?,? 
2020-06-12 11:01:01.149 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 0(Long), 15(Long)
2020-06-12 11:01:01.152 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : <==      Total: 1
2020-06-12 11:01:01.160 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:01:01.161 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:01:01.158(Timestamp), 查询访客(String), INFO(String), site.alanliang.geekblog.controller.admin.VisitorController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:01:01.166 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:01:10.726 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT COUNT(1) FROM sys_notice 
2020-06-12 11:01:10.728 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 
2020-06-12 11:01:10.734 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT id,title,content,sort,display,create_time,update_time FROM sys_notice ORDER BY create_time DESC LIMIT ?,? 
2020-06-12 11:01:10.736 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 0(Long), 15(Long)
2020-06-12 11:01:10.739 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectPage        : <==      Total: 7
2020-06-12 11:01:10.754 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:01:10.754 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:01:10.752(Timestamp), 查询公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.listTableByPage()(String), { page: 1 limit: 15 noticeQuery: NoticeQuery(title=null, content=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 39(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:01:10.756 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:01:45.531 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:01:45.531 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:01:45.53(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:01:45.533 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:01:49.404 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:01:49.405 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:01:49.403(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:01:49.408 DEBUG 19324 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:19:42.470 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 11:19:42.470 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 11:19:42.470 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 11:19:42.470 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 11:19:42.472 DEBUG 19324 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 11:19:42.472 DEBUG 19324 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 11:25:37.981 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:25:37.982 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:25:37.98(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:25:37.985 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:25:38.223 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 11:25:38.225 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 11:25:38.233 DEBUG 19324 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 11:25:38.757 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 11:25:38.758 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 11:25:38.761 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:25:38.766 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 11:25:38.767 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 11:25:38.769 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 11:25:38.772 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 11:25:38.773 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 11:25:38.774 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 11:25:38.779 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 11:25:38.780 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 11:25:38.782 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:25:38.785 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 11:25:38.786 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 11:25:38.787 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 11:25:38.791 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 11:25:38.791 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 11:25:38.792 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 11:25:38.795 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:25:38.795 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:25:38.798 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:25:38.800 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 11:25:38.800 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 11:25:38.801 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:25:38.803 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:25:38.804 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:25:38.808 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:25:38.810 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:25:38.811 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:25:38.818 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:25:38.821 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 11:25:38.821 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 11:25:38.824 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 11:25:38.825 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 11:25:38.825 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 11:25:38.828 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 11:25:38.833 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 11:25:38.834 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 11:25:38.835 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 11:25:38.838 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 11:25:38.839 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 11:25:38.841 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 11:25:38.844 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:25:38.847 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:25:38.901 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:25:38.902 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:25:38.903 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:25:38.941 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:25:38.942 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:25:38.942 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:25:38.947 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:25:38.948 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:25:38.949 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 10:52:42.0(Timestamp), 2020-06-12 11:25:38.947(Timestamp)
2020-06-12 11:25:38.950 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:25:38.951 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:25:38.951 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:25:38.955 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:25:38.956 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:25:38.957 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 10:52:42.0(Timestamp), 2020-06-12 11:25:38.955(Timestamp)
2020-06-12 11:25:38.957 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:25:38.958 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:25:38.958 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:25:38.964 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:25:38.965 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:25:38.966 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 10:52:42.0(Timestamp), 2020-06-12 11:25:38.964(Timestamp)
2020-06-12 11:25:38.967 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:25:38.968 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:25:38.968 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:25:38.972 DEBUG 19324 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:25:38.973 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:25:38.974 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 10:52:42.0(Timestamp), 2020-06-12 11:25:38.972(Timestamp)
2020-06-12 11:25:38.975 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:25:38.978 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 11:25:38.979 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 11:25:38.981 DEBUG 19324 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 11:29:50.518 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 11:29:50.519 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 11:29:50.519 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 11:29:50.519 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 11:29:50.522 DEBUG 19324 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 11:29:50.523 DEBUG 19324 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 11:35:46.702  INFO 19588 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 19588 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 11:35:46.705 DEBUG 19588 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 11:35:46.705  INFO 19588 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 11:35:46.735  INFO 19588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 11:35:46.735  INFO 19588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 11:35:47.656  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 11:35:47.658  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 11:35:47.727  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 65ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 11:35:47.732  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 11:35:47.732  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 11:35:47.743  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 11:35:47.757  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 11:35:47.758  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 11:35:47.774  INFO 19588 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 11:35:47.775  INFO 19588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-12 11:35:48.112  INFO 19588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 11:35:48.251  INFO 19588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 11:35:48.253  INFO 19588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5c037bbd' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 11:35:48.254  INFO 19588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 11:35:48.263  INFO 19588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 11:35:48.273  INFO 19588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$6f7cb9fc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 11:35:48.673  INFO 19588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 11:35:48.682  INFO 19588 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 11:35:48.683  INFO 19588 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 11:35:48.785  INFO 19588 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 11:35:48.785  INFO 19588 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2050 ms
2020-06-12 11:35:48.923  INFO 19588 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 11:35:48.924  INFO 19588 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 11:35:48.939 DEBUG 19588 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 11:35:49.067  INFO 19588 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 11:35:49.466  INFO 19588 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 11:35:51.011  WARN 19588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 11:35:51.012  WARN 19588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 11:35:51.012  WARN 19588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 11:35:51.012  WARN 19588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 11:35:51.034  WARN 19588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 11:35:51.034  WARN 19588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 11:35:51.034  WARN 19588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 11:35:51.034  WARN 19588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 11:35:51.155  INFO 19588 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 11:35:51.417  WARN 19588 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 11:35:52.462  INFO 19588 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 11:35:52.475  INFO 19588 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 11:35:52.609  INFO 19588 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3100e5e4, org.springframework.security.web.context.SecurityContextPersistenceFilter@1538eef4, org.springframework.security.web.header.HeaderWriterFilter@64e95a0a, org.springframework.security.web.authentication.logout.LogoutFilter@3c4b34f1, site.alanliang.geekblog.security.ValidateCodeFilter@21c4cbef, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@10106000, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3ecad6c8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@21beff7e, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@155decdd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@18d4a15f, org.springframework.security.web.session.SessionManagementFilter@7b851e75, org.springframework.security.web.access.ExceptionTranslationFilter@3a898a9f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@10a16450]
2020-06-12 11:35:52.683  INFO 19588 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 11:35:53.135  INFO 19588 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 11:35:53.152  INFO 19588 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 11:35:53.207  INFO 19588 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 11:35:53.381  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 11:35:53.382  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 11:35:53.386  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 11:35:53.387  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 11:35:53.388  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 11:35:53.389  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 11:35:53.390  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 11:35:53.393  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 11:35:53.394  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 11:35:53.419  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 11:35:53.427  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 11:35:53.429  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 11:35:53.431  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 11:35:53.432  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 11:35:53.434  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 11:35:53.435  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 11:35:53.437  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 11:35:53.439  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 11:35:53.441  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 11:35:53.442  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 11:35:53.445  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 11:35:53.447  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 11:35:53.449  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 11:35:53.451  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 11:35:53.452  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 11:35:53.453  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 11:35:53.453  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 11:35:53.455  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 11:35:53.456  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 11:35:53.460  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 11:35:53.461  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 11:35:53.464  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 11:35:53.466  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 11:35:53.468  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 11:35:53.470  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 11:35:53.473  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 11:35:53.474  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 11:35:53.475  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 11:35:53.476  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 11:35:53.477  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 11:35:53.478  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 11:35:53.480  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 11:35:53.481  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 11:35:53.483  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 11:35:53.484  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 11:35:53.491  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 11:35:53.492  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 11:35:53.493  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 11:35:53.495  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 11:35:53.497  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 11:35:53.498  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 11:35:53.498  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 11:35:53.499  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 11:35:53.499  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 11:35:53.502  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 11:35:53.504  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 11:35:53.504  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 11:35:53.505  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 11:35:53.505  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 11:35:53.507  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 11:35:53.507  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 11:35:53.508  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 11:35:53.512  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 11:35:53.515  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 11:35:53.515  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 11:35:53.516  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 11:35:53.517  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 11:35:53.517  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 11:35:53.520  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 11:35:53.521  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 11:35:53.521  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 11:35:53.522  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 11:35:53.524  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 11:35:53.524  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 11:35:53.525  INFO 19588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 11:35:53.553  INFO 19588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 11:35:53.555  INFO 19588 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.378 seconds (JVM running for 13.818)
2020-06-12 11:49:41.180  INFO 19588 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 11:49:41.180  INFO 19588 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 11:49:41.201  INFO 19588 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-06-12 11:49:41.440 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 11:49:41.806 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 11:49:41.856 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 11:49:41.894 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 11:49:41.910 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 11:49:41.934 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 11:50:36.760 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 11:50:36.761 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 11:50:36.763 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 11:50:36.764 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 11:50:36.764 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 11:50:36.771 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 11:50:36.860  INFO 19588 --- [http-nio-8889-exec-4] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 11:50:39.031 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:50:39.039 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:50:39.024(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:50:39.042 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:50:39.553  INFO 19588 --- [http-nio-8889-exec-3] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 11:50:39.554  INFO 19588 --- [http-nio-8889-exec-3] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 11:50:40.157 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 11:50:40.164 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 11:50:40.171 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 11:50:40.534 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 11:50:40.535 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 11:50:40.538 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:50:40.551 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 11:50:40.552 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 11:50:40.555 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 11:50:40.565 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 11:50:40.567 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 11:50:40.569 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 11:50:40.575 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 11:50:40.576 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 11:50:40.578 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:50:40.588 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 11:50:40.589 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 11:50:40.590 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 11:50:40.598 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 11:50:40.598 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 11:50:40.600 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 11:50:40.604 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:50:40.605 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:50:40.608 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:50:40.617 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 11:50:40.618 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 11:50:40.619 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:50:40.623 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:50:40.625 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:50:40.630 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:50:40.632 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:50:40.634 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:50:40.639 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:50:40.641 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 11:50:40.642 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 11:50:40.705 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 11:50:40.716 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 11:50:40.717 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 11:50:40.718 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 11:50:40.725 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 11:50:40.726 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 11:50:40.729 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 11:50:40.738 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 11:50:40.739 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 11:50:40.740 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 11:50:40.752 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:50:40.757 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:50:40.804 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:50:40.806 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:50:40.807 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:50:40.853 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:50:40.855 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:50:40.856 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:50:40.860 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:50:40.867 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:50:40.868 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:25:38.0(Timestamp), 2020-06-12 11:50:40.862(Timestamp)
2020-06-12 11:50:40.870 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:50:40.871 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:50:40.871 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:50:40.874 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:50:40.875 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:50:40.878 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:25:38.0(Timestamp), 2020-06-12 11:50:40.874(Timestamp)
2020-06-12 11:50:40.881 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:50:40.883 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:50:40.883 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:50:40.887 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:50:40.889 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:50:40.889 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:25:38.0(Timestamp), 2020-06-12 11:50:40.888(Timestamp)
2020-06-12 11:50:40.890 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:50:40.891 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:50:40.891 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:50:40.897 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:50:40.899 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:50:40.900 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:25:38.0(Timestamp), 2020-06-12 11:50:40.897(Timestamp)
2020-06-12 11:50:40.901 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:50:40.905 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 11:50:40.906 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 11:50:40.908 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 11:50:51.198 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 11:50:51.198 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 11:50:51.199 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 11:50:51.270 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 11:50:51.270 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 11:50:51.281 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 11:50:51.282 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 11:50:51.296 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 11:50:51.300 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 11:50:51.301 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 11:50:51.303 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 11:50:51.306 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 11:50:51.306 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 11:50:51.307 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 11:50:51.309 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 11:50:51.310 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 11:50:51.313 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 11:50:51.318 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:50:51.321 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:50:51.317(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 86(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:50:51.324 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:50:54.289 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 11:50:54.293 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 11:50:54.300 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 11:51:35.394 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:51:35.395 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:51:35.392(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:51:35.398 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:51:36.193 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:51:36.193 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:51:36.195 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:51:36.200 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:51:36.201 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:51:36.206 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:51:36.208 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:51:36.209 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:51:36.219 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:51:36.243 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:51:36.244 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:51:36.304 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:51:36.305 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:51:36.306 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:51:36.364 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:51:36.367 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:36.368 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:36.371 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:36.373 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:36.373 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:50:39.0(Timestamp), 2020-06-12 11:51:36.372(Timestamp)
2020-06-12 11:51:36.374 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:51:36.375 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:36.375 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:36.378 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:36.383 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:36.384 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:50:39.0(Timestamp), 2020-06-12 11:51:36.378(Timestamp)
2020-06-12 11:51:36.385 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:51:36.385 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:36.386 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:36.389 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:36.391 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:36.391 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:50:39.0(Timestamp), 2020-06-12 11:51:36.389(Timestamp)
2020-06-12 11:51:36.392 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:51:36.393 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:36.393 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:36.398 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:36.401 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:36.401 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:50:39.0(Timestamp), 2020-06-12 11:51:36.399(Timestamp)
2020-06-12 11:51:36.402 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:51:47.811 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:51:47.814 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:51:47.809(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:51:47.818 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:51:48.734 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:51:48.734 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:51:48.737 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:51:48.739 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:51:48.740 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:51:48.744 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:51:48.748 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:51:48.748 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:51:48.753 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:51:48.758 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:51:48.758 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:51:48.803 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:51:48.804 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:51:48.804 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:51:48.867 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:51:48.869 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:48.869 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:48.873 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:48.875 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:48.875 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:51:35.0(Timestamp), 2020-06-12 11:51:48.873(Timestamp)
2020-06-12 11:51:48.879 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:51:48.881 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:48.881 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:48.887 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:48.891 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:48.892 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:35.0(Timestamp), 2020-06-12 11:51:48.888(Timestamp)
2020-06-12 11:51:48.894 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:51:48.899 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:48.900 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:48.904 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:48.907 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:48.907 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:35.0(Timestamp), 2020-06-12 11:51:48.905(Timestamp)
2020-06-12 11:51:48.908 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:51:48.909 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:48.909 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:48.915 DEBUG 19588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:48.918 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:48.918 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:35.0(Timestamp), 2020-06-12 11:51:48.916(Timestamp)
2020-06-12 11:51:48.920 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:51:52.967 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:51:52.967 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:51:52.965(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:51:52.975 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:51:53.503 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:51:53.503 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:51:53.505 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:51:53.507 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:51:53.507 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:51:53.511 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:51:53.514 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:51:53.514 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:51:53.520 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:51:53.526 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:51:53.527 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:51:53.571 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:51:53.572 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:51:53.572 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:51:53.618 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:51:53.619 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:53.619 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:53.622 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:53.623 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:53.623 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:51:48.0(Timestamp), 2020-06-12 11:51:53.622(Timestamp)
2020-06-12 11:51:53.625 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:51:53.627 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:53.628 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:53.632 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:53.634 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:53.634 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:48.0(Timestamp), 2020-06-12 11:51:53.633(Timestamp)
2020-06-12 11:51:53.635 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:51:53.635 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:53.635 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:53.639 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:53.640 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:53.640 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:48.0(Timestamp), 2020-06-12 11:51:53.639(Timestamp)
2020-06-12 11:51:53.641 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:51:53.643 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:51:53.645 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:51:53.650 DEBUG 19588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:51:53.651 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:51:53.651 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:48.0(Timestamp), 2020-06-12 11:51:53.65(Timestamp)
2020-06-12 11:51:53.652 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:53:07.083 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:53:07.084 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:53:07.082(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:53:07.087 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:53:08.000 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:53:08.001 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:53:08.002 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:53:08.005 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:53:08.005 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:53:08.009 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:53:08.011 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:53:08.011 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:53:08.016 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:53:08.019 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:53:08.020 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:53:08.056 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:53:08.057 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:53:08.059 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:53:08.116 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:53:08.117 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:53:08.117 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:53:08.123 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:53:08.128 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:53:08.129 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:51:53.0(Timestamp), 2020-06-12 11:53:08.124(Timestamp)
2020-06-12 11:53:08.131 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:53:08.132 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:53:08.132 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:53:08.137 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:53:08.138 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:53:08.138 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:53.0(Timestamp), 2020-06-12 11:53:08.137(Timestamp)
2020-06-12 11:53:08.139 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:53:08.140 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:53:08.141 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:53:08.147 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:53:08.149 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:53:08.149 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:53.0(Timestamp), 2020-06-12 11:53:08.147(Timestamp)
2020-06-12 11:53:08.151 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:53:08.152 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:53:08.152 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:53:08.156 DEBUG 19588 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:53:08.161 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:53:08.161 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:51:53.0(Timestamp), 2020-06-12 11:53:08.157(Timestamp)
2020-06-12 11:53:08.163 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:54:08.655 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:54:08.655 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:54:08.654(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:54:08.657 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:54:09.251 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:54:09.251 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:54:09.253 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:54:09.255 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:54:09.255 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:54:09.257 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:54:09.258 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:54:09.259 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:54:09.267 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:54:09.270 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:54:09.270 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:54:09.319 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:54:09.319 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:54:09.319 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:54:09.365 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:54:09.366 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:54:09.366 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:54:09.369 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:54:09.370 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:54:09.370 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:53:07.0(Timestamp), 2020-06-12 11:54:09.369(Timestamp)
2020-06-12 11:54:09.371 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:54:09.372 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:54:09.372 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:54:09.377 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:54:09.381 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:54:09.381 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:53:07.0(Timestamp), 2020-06-12 11:54:09.377(Timestamp)
2020-06-12 11:54:09.383 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:54:09.383 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:54:09.384 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:54:09.387 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:54:09.388 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:54:09.388 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:53:07.0(Timestamp), 2020-06-12 11:54:09.387(Timestamp)
2020-06-12 11:54:09.389 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:54:09.389 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:54:09.390 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:54:09.395 DEBUG 19588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:54:09.397 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:54:09.397 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:53:07.0(Timestamp), 2020-06-12 11:54:09.396(Timestamp)
2020-06-12 11:54:09.398 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:55:27.801 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:55:27.802 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:55:27.801(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:55:27.804 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:55:28.712 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:55:28.712 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:55:28.714 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:55:28.717 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:55:28.717 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:55:28.720 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:55:28.721 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:55:28.722 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:55:28.728 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:55:28.731 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:55:28.731 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:55:28.788 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:55:28.789 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:55:28.789 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:55:28.837 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:55:28.838 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:55:28.838 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:55:28.843 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:55:28.845 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:55:28.846 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:54:09.0(Timestamp), 2020-06-12 11:55:28.844(Timestamp)
2020-06-12 11:55:28.847 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:55:28.847 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:55:28.848 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:55:28.850 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:55:28.851 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:55:28.851 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:54:09.0(Timestamp), 2020-06-12 11:55:28.85(Timestamp)
2020-06-12 11:55:28.852 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:55:28.852 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:55:28.852 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:55:28.855 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:55:28.856 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:55:28.857 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:54:09.0(Timestamp), 2020-06-12 11:55:28.855(Timestamp)
2020-06-12 11:55:28.860 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:55:28.861 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:55:28.862 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:55:28.865 DEBUG 19588 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:55:28.866 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:55:28.866 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:54:09.0(Timestamp), 2020-06-12 11:55:28.865(Timestamp)
2020-06-12 11:55:28.867 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 11:57:34.893 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 11:57:34.895 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 11:57:34.891(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 11:57:34.897 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 11:57:35.814 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 11:57:35.814 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 11:57:35.816 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:57:35.818 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 11:57:35.818 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 11:57:35.820 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 11:57:35.821 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 11:57:35.821 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 11:57:35.825 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 11:57:35.831 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:57:35.832 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 11:57:35.870 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 11:57:35.871 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 11:57:35.872 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 11:57:35.936 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 11:57:35.937 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:57:35.937 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:57:35.940 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:57:35.941 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:57:35.941 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:55:28.0(Timestamp), 2020-06-12 11:57:35.94(Timestamp)
2020-06-12 11:57:35.946 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 11:57:35.948 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:57:35.948 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:57:35.952 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:57:35.954 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:57:35.954 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:55:28.0(Timestamp), 2020-06-12 11:57:35.953(Timestamp)
2020-06-12 11:57:35.956 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 11:57:35.957 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:57:35.957 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:57:35.969 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:57:35.971 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:57:35.971 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:55:28.0(Timestamp), 2020-06-12 11:57:35.969(Timestamp)
2020-06-12 11:57:35.972 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 11:57:35.973 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 11:57:35.973 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 11:57:35.981 DEBUG 19588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 11:57:35.983 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 11:57:35.984 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:55:28.0(Timestamp), 2020-06-12 11:57:35.982(Timestamp)
2020-06-12 11:57:35.985 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 12:01:22.770 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 12:01:22.771 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 12:01:22.773 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 12:01:22.775 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 12:01:22.775 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 12:01:22.779 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 12:04:03.721 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 12:04:03.723 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 12:04:03.719(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 12:04:03.728 DEBUG 19588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 12:04:03.921 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 12:04:03.922 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 12:04:03.925 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 12:04:04.385 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 12:04:04.385 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 12:04:04.387 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 12:04:04.389 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 12:04:04.389 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 12:04:04.390 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 12:04:04.392 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 12:04:04.392 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 12:04:04.393 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 12:04:04.395 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 12:04:04.395 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 12:04:04.396 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 12:04:04.401 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 12:04:04.401 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 12:04:04.403 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 12:04:04.406 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 12:04:04.406 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 12:04:04.407 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 12:04:04.409 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 12:04:04.410 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 12:04:04.411 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 12:04:04.413 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 12:04:04.414 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 12:04:04.417 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 12:04:04.419 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 12:04:04.419 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 12:04:04.424 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 12:04:04.425 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 12:04:04.425 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 12:04:04.429 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 12:04:04.430 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 12:04:04.432 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 12:04:04.435 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 12:04:04.436 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 12:04:04.436 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 12:04:04.437 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 12:04:04.439 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 12:04:04.440 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 12:04:04.441 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 12:04:04.443 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 12:04:04.443 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 12:04:04.445 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 12:04:04.446 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 12:04:04.448 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 12:04:04.492 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 12:04:04.494 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 12:04:04.494 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 12:04:04.541 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 12:04:04.542 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 12:04:04.542 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 12:04:04.545 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 12:04:04.546 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 12:04:04.547 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 11:57:35.0(Timestamp), 2020-06-12 12:04:04.545(Timestamp)
2020-06-12 12:04:04.551 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 12:04:04.552 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 12:04:04.552 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 12:04:04.555 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 12:04:04.556 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 12:04:04.557 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 11:57:35.0(Timestamp), 2020-06-12 12:04:04.556(Timestamp)
2020-06-12 12:04:04.558 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 12:04:04.558 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 12:04:04.558 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 12:04:04.562 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 12:04:04.563 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 12:04:04.566 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 11:57:35.0(Timestamp), 2020-06-12 12:04:04.562(Timestamp)
2020-06-12 12:04:04.568 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 12:04:04.568 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 12:04:04.568 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 12:04:04.572 DEBUG 19588 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 12:04:04.573 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 12:04:04.574 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 11:57:35.0(Timestamp), 2020-06-12 12:04:04.572(Timestamp)
2020-06-12 12:04:04.575 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 12:04:04.577 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 12:04:04.577 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 12:04:04.578 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 12:06:18.791 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 12:06:18.793 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 12:06:18.79(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 12:06:18.794 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 12:06:19.726 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 12:06:19.726 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 12:06:19.728 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 12:06:19.730 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 12:06:19.731 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 12:06:19.735 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 12:06:19.736 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 12:06:19.736 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 12:06:19.743 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 12:06:19.746 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 12:06:19.746 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 12:06:19.790 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 12:06:19.790 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 12:06:19.790 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 12:06:19.842 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 12:06:19.843 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 12:06:19.843 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 12:06:19.847 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 12:06:19.850 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 12:06:19.852 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 12:04:04.0(Timestamp), 2020-06-12 12:06:19.847(Timestamp)
2020-06-12 12:06:19.854 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 12:06:19.855 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 12:06:19.855 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 12:06:19.859 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 12:06:19.860 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 12:06:19.861 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 12:04:04.0(Timestamp), 2020-06-12 12:06:19.859(Timestamp)
2020-06-12 12:06:19.862 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 12:06:19.863 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 12:06:19.863 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 12:06:19.868 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 12:06:19.869 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 12:06:19.869 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 12:04:04.0(Timestamp), 2020-06-12 12:06:19.868(Timestamp)
2020-06-12 12:06:19.871 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 12:06:19.872 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 12:06:19.873 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 12:06:19.879 DEBUG 19588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 12:06:19.883 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 12:06:19.886 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 12:04:04.0(Timestamp), 2020-06-12 12:06:19.88(Timestamp)
2020-06-12 12:06:19.888 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 12:11:30.518 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 12:11:30.518 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 12:11:30.519 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 12:11:30.519 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 12:11:30.521 DEBUG 19588 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 12:11:30.522 DEBUG 19588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 12:57:37.364 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 12:57:37.365 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 12:57:37.370 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 12:57:37.398 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 12:57:37.400 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 12:57:37.403 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 12:57:37.655 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 12:57:37.655 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 12:57:37.656 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 12:57:37.657 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 12:57:37.657 DEBUG 19588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 12:57:37.661 DEBUG 19588 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 13:06:41.090 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 13:06:41.090 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 13:06:41.093 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 13:06:41.094 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 13:06:41.108 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 13:06:41.113 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 13:06:41.114 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 13:06:41.117 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 13:06:41.118 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 13:06:41.118 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 13:06:41.119 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 13:06:41.120 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 13:06:41.120 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 13:06:41.121 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 13:06:41.130 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 13:06:41.131 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 13:06:41.129(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 45(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 13:06:41.132 DEBUG 19588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:47:49.199 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 15:47:49.223 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 15:47:49.244 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 15:47:49.288 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 15:47:49.289 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 15:47:49.304 DEBUG 19588 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 15:47:49.688 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 15:47:49.689 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 15:47:49.691 DEBUG 19588 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 15:47:49.722 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 15:47:49.723 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 15:47:49.727 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 15:47:49.727 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 15:47:49.739 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 15:47:49.742 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:47:49.742 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 15:47:49.745 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 15:47:49.747 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:47:49.747 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 15:47:49.749 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 15:47:49.750 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:47:49.751 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 15:47:49.753 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 15:47:49.765 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:47:49.766 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:47:49.762(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 46(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:47:49.772 DEBUG 19588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:48:24.172  INFO 19588 --- [Thread-14] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-12 15:48:24.514  INFO 19588 --- [Thread-14] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-06-12 15:48:37.170  INFO 17844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 17844 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 15:48:37.173 DEBUG 17844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 15:48:37.173  INFO 17844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 15:48:37.212  INFO 17844 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 15:48:37.213  INFO 17844 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 15:48:39.143  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:48:39.148  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 15:48:39.408  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 245ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 15:48:39.418  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:48:39.419  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 15:48:39.444  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 25ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 15:48:39.476  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:48:39.480  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 15:48:39.547  INFO 17844 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 15:48:39.548  INFO 17844 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 42ms. Found 0 Redis repository interfaces.
2020-06-12 15:48:40.438  INFO 17844 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:48:40.798  INFO 17844 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:48:40.804  INFO 17844 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6707089a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:48:40.807  INFO 17844 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:48:40.824  INFO 17844 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:48:40.854  INFO 17844 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$cef4590f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:48:41.681  INFO 17844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 15:48:41.699  INFO 17844 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 15:48:41.699  INFO 17844 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 15:48:42.085  INFO 17844 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 15:48:42.086  INFO 17844 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4872 ms
2020-06-12 15:48:42.509  INFO 17844 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 15:48:42.511  INFO 17844 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 15:48:42.596  WARN 17844 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Cannot deserialize session attribute [SPRING_SECURITY_CONTEXT] for session [DA8DDC195D06BEC6ACC016D6F239B0B1]
2020-06-12 15:48:42.604 DEBUG 17844 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 15:48:42.943  INFO 17844 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 15:48:43.513  INFO 17844 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 15:48:45.700  WARN 17844 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:48:45.703  WARN 17844 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:48:45.705  WARN 17844 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:48:45.706  WARN 17844 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:48:45.779  WARN 17844 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:48:45.780  WARN 17844 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:48:45.780  WARN 17844 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:48:45.780  WARN 17844 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:48:45.955  INFO 17844 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 15:48:46.348  WARN 17844 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 15:48:53.727  INFO 17844 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 15:48:53.750  INFO 17844 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 15:48:54.276  INFO 17844 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@78f141ef, org.springframework.security.web.context.SecurityContextPersistenceFilter@317ec3f4, org.springframework.security.web.header.HeaderWriterFilter@591b6b06, org.springframework.security.web.authentication.logout.LogoutFilter@e7a5b84, site.alanliang.geekblog.security.ValidateCodeFilter@32165719, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2982230d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3863b843, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6faf108e, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@1a56ba8a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@460bd65a, org.springframework.security.web.session.SessionManagementFilter@18094c92, org.springframework.security.web.access.ExceptionTranslationFilter@4ef931f1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6bce3ebc]
2020-06-12 15:48:54.541  INFO 17844 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 15:48:55.746  INFO 17844 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 15:48:55.804  INFO 17844 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 15:48:56.029  INFO 17844 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 15:48:56.457  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 15:48:56.459  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 15:48:56.466  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 15:48:56.468  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 15:48:56.472  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 15:48:56.477  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 15:48:56.481  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 15:48:56.491  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 15:48:56.495  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 15:48:56.609  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 15:48:56.649  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 15:48:56.653  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 15:48:56.663  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 15:48:56.669  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 15:48:56.683  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 15:48:56.690  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 15:48:56.700  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 15:48:56.709  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 15:48:56.716  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 15:48:56.720  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 15:48:56.727  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 15:48:56.736  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 15:48:56.741  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 15:48:56.745  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 15:48:56.747  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 15:48:56.749  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 15:48:56.750  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 15:48:56.755  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 15:48:56.757  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 15:48:56.765  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 15:48:56.768  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 15:48:56.774  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 15:48:56.777  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 15:48:56.780  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 15:48:56.785  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 15:48:56.790  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 15:48:56.791  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 15:48:56.794  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 15:48:56.795  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 15:48:56.795  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 15:48:56.797  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 15:48:56.800  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 15:48:56.801  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 15:48:56.804  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 15:48:56.805  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 15:48:56.814  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 15:48:56.816  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 15:48:56.817  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 15:48:56.820  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 15:48:56.822  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 15:48:56.823  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 15:48:56.824  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 15:48:56.825  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 15:48:56.825  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 15:48:56.829  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 15:48:56.831  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 15:48:56.832  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 15:48:56.833  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 15:48:56.834  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 15:48:56.837  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 15:48:56.837  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 15:48:56.838  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 15:48:56.843  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 15:48:56.846  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 15:48:56.847  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 15:48:56.848  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 15:48:56.849  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 15:48:56.850  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 15:48:56.853  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 15:48:56.855  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 15:48:56.855  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 15:48:56.856  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 15:48:56.859  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 15:48:56.859  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 15:48:56.861  INFO 17844 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 15:48:56.959  INFO 17844 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 15:48:56.964  INFO 17844 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 20.646 seconds (JVM running for 21.963)
2020-06-12 15:49:34.869  INFO 17844 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 15:49:34.870  INFO 17844 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 15:49:34.888  INFO 17844 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2020-06-12 15:49:35.032 DEBUG 17844 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 15:49:35.267 DEBUG 17844 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 15:49:35.316 DEBUG 17844 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 15:49:35.333 DEBUG 17844 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 15:49:35.342 DEBUG 17844 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 15:49:35.357 DEBUG 17844 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 15:49:42.489 DEBUG 17844 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 15:49:42.489 DEBUG 17844 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 15:49:42.495 DEBUG 17844 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 15:49:42.495 DEBUG 17844 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 15:49:42.495 DEBUG 17844 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 15:49:42.502 DEBUG 17844 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 15:49:42.608  INFO 17844 --- [http-nio-8889-exec-8] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 15:49:44.845 DEBUG 17844 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:49:44.854 DEBUG 17844 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:49:44.837(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:49:44.858 DEBUG 17844 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:49:45.402  INFO 17844 --- [http-nio-8889-exec-5] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 15:49:45.406  INFO 17844 --- [http-nio-8889-exec-5] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 15:49:46.891 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 15:49:46.911 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 15:49:46.936 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 15:49:47.410 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 15:49:47.413 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 15:49:47.432 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 15:49:47.451 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 15:49:47.453 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 15:49:47.457 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 15:49:47.476 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 15:49:47.479 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 15:49:47.482 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 15:49:47.500 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 15:49:47.503 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 15:49:47.507 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 15:49:47.529 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 15:49:47.532 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 15:49:47.534 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 15:49:47.544 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 15:49:47.545 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 15:49:47.548 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 15:49:47.555 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 15:49:47.556 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 15:49:47.562 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 15:49:47.569 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 15:49:47.570 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 15:49:47.573 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 15:49:47.582 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 15:49:47.586 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 15:49:47.595 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 15:49:47.600 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 15:49:47.601 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 15:49:47.630 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 15:49:47.636 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 15:49:47.638 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 15:49:47.730 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 15:49:47.747 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 15:49:47.749 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 15:49:47.751 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 15:49:47.764 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 15:49:47.765 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 15:49:47.768 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 15:49:47.783 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 15:49:47.784 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 15:49:47.787 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 15:49:47.804 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 15:49:47.813 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 15:49:47.883 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 15:49:47.884 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 15:49:47.886 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 15:49:47.985 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 15:49:47.988 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:49:47.990 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:49:47.998 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:49:48.002 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:49:48.004 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 12:06:19.0(Timestamp), 2020-06-12 15:49:47.998(Timestamp)
2020-06-12 15:49:48.010 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 15:49:48.012 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:49:48.013 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:49:48.019 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:49:48.022 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:49:48.025 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 12:06:19.0(Timestamp), 2020-06-12 15:49:48.019(Timestamp)
2020-06-12 15:49:48.027 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 15:49:48.029 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:49:48.029 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:49:48.035 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:49:48.037 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:49:48.039 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 12:06:19.0(Timestamp), 2020-06-12 15:49:48.035(Timestamp)
2020-06-12 15:49:48.044 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 15:49:48.046 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:49:48.046 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:49:48.052 DEBUG 17844 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:49:48.055 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:49:48.059 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 12:06:19.0(Timestamp), 2020-06-12 15:49:48.052(Timestamp)
2020-06-12 15:49:48.060 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 15:49:48.070 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 15:49:48.071 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 15:49:48.077 DEBUG 17844 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 15:49:50.927 DEBUG 17844 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:49:50.930 DEBUG 17844 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:49:50.922(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 45(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:49:50.932 DEBUG 17844 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:50:01.951 DEBUG 17844 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 15:50:01.952 DEBUG 17844 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 15:50:01.955 DEBUG 17844 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 15:50:02.006 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 15:50:02.007 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 15:50:02.018 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 15:50:02.021 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 15:50:02.038 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 15:50:02.042 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:50:02.043 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 15:50:02.046 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 15:50:02.050 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:50:02.051 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 15:50:02.053 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 15:50:02.056 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:50:02.056 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 15:50:02.058 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 15:50:02.065 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:50:02.065 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:50:02.063(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 99(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:50:02.067 DEBUG 17844 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:50:27.925  INFO 13412 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 13412 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 15:50:27.927 DEBUG 13412 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 15:50:27.927  INFO 13412 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 15:50:27.962  INFO 13412 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 15:50:27.962  INFO 13412 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 15:50:30.052  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:50:30.054  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 15:50:30.185  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 126ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 15:50:30.200  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:50:30.202  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 15:50:30.247  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 44ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 15:50:30.297  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:50:30.301  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 15:50:30.373  INFO 13412 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 15:50:30.374  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 45ms. Found 0 Redis repository interfaces.
2020-06-12 15:50:31.103  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:50:31.178  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:50:31.181  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@b32bbab' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:50:31.184  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:50:31.191  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:50:31.204  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$7f40e581] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:50:31.997  INFO 13412 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 15:50:32.024  INFO 13412 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 15:50:32.024  INFO 13412 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 15:50:32.157  INFO 13412 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 15:50:32.158  INFO 13412 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4196 ms
2020-06-12 15:50:32.383  INFO 13412 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 15:50:32.387  INFO 13412 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 15:50:32.428 DEBUG 13412 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 15:50:32.685  INFO 13412 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 15:50:33.291  INFO 13412 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 15:50:36.066  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:50:36.067  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:50:36.069  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:50:36.069  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:50:36.108  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:50:36.108  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:50:36.108  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:50:36.108  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:50:36.340  INFO 13412 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 15:50:36.576  WARN 13412 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 15:50:38.331  INFO 13412 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 15:50:38.349  INFO 13412 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 15:50:38.515  INFO 13412 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5ba93cbe, org.springframework.security.web.context.SecurityContextPersistenceFilter@3bd671c3, org.springframework.security.web.header.HeaderWriterFilter@5f10caf8, org.springframework.security.web.authentication.logout.LogoutFilter@78ced056, site.alanliang.geekblog.security.ValidateCodeFilter@578be623, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@787dc2aa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4ff42c1b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@29965948, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@7cf9f879, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1cad70a8, org.springframework.security.web.session.SessionManagementFilter@7b5acfae, org.springframework.security.web.access.ExceptionTranslationFilter@1fd892c6, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6a198b0d]
2020-06-12 15:50:38.644  INFO 13412 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 15:50:39.699  INFO 13412 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 15:50:39.730  INFO 13412 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 15:50:39.877  INFO 13412 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 15:50:40.303  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 15:50:40.306  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 15:50:40.319  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 15:50:40.323  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 15:50:40.327  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 15:50:40.333  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 15:50:40.335  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 15:50:40.343  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 15:50:40.346  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 15:50:40.417  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 15:50:40.444  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 15:50:40.447  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 15:50:40.452  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 15:50:40.455  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 15:50:40.462  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 15:50:40.465  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 15:50:40.469  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 15:50:40.472  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 15:50:40.479  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 15:50:40.483  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 15:50:40.490  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 15:50:40.496  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 15:50:40.500  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 15:50:40.506  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 15:50:40.508  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 15:50:40.512  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 15:50:40.513  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 15:50:40.519  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 15:50:40.520  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 15:50:40.529  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 15:50:40.532  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 15:50:40.538  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 15:50:40.542  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 15:50:40.550  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 15:50:40.559  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 15:50:40.568  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 15:50:40.571  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 15:50:40.575  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 15:50:40.578  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 15:50:40.581  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 15:50:40.585  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 15:50:40.591  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 15:50:40.596  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 15:50:40.602  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 15:50:40.606  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 15:50:40.632  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 15:50:40.637  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 15:50:40.640  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 15:50:40.647  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 15:50:40.654  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 15:50:40.657  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 15:50:40.659  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 15:50:40.661  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 15:50:40.663  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 15:50:40.670  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 15:50:40.676  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 15:50:40.679  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 15:50:40.680  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 15:50:40.682  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 15:50:40.687  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 15:50:40.690  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 15:50:40.692  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 15:50:40.707  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 15:50:40.718  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 15:50:40.720  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 15:50:40.722  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 15:50:40.724  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 15:50:40.729  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 15:50:40.738  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 15:50:40.741  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 15:50:40.744  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 15:50:40.746  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 15:50:40.752  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 15:50:40.755  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 15:50:40.756  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 15:50:40.839  INFO 13412 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 15:50:40.846  INFO 13412 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 13.685 seconds (JVM running for 14.787)
2020-06-12 15:50:46.675  INFO 13412 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 15:50:46.675  INFO 13412 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 15:50:46.697  INFO 13412 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 22 ms
2020-06-12 15:50:46.840 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 15:50:47.016 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 15:50:47.048 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 15:50:47.068 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 15:50:47.080 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 15:50:47.096 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 15:50:53.872 DEBUG 13412 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 15:50:53.873 DEBUG 13412 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 15:50:53.875 DEBUG 13412 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 15:50:53.876 DEBUG 13412 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 15:50:53.877 DEBUG 13412 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 15:50:53.883 DEBUG 13412 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 15:50:53.993  INFO 13412 --- [http-nio-8889-exec-9] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 15:50:56.267 DEBUG 13412 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:50:56.277 DEBUG 13412 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:50:56.262(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:50:56.281 DEBUG 13412 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:50:56.788  INFO 13412 --- [http-nio-8889-exec-4] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 15:50:56.792  INFO 13412 --- [http-nio-8889-exec-4] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 15:50:58.175 DEBUG 13412 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 15:50:58.193 DEBUG 13412 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 15:50:58.220 DEBUG 13412 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 15:50:58.719 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 15:50:58.722 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 15:50:58.727 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 15:50:58.743 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 15:50:58.744 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 15:50:58.747 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 15:50:58.766 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 15:50:58.770 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 15:50:58.774 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 15:50:58.786 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 15:50:58.788 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 15:50:58.793 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 15:50:58.807 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 15:50:58.809 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 15:50:58.812 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 15:50:58.826 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 15:50:58.828 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 15:50:58.831 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 15:50:58.843 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 15:50:58.844 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 15:50:58.847 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 15:50:58.854 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 15:50:58.855 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 15:50:58.858 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 15:50:58.865 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 15:50:58.868 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 15:50:58.877 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 15:50:58.883 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 15:50:58.884 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 15:50:58.894 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 15:50:58.898 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 15:50:58.900 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 15:50:58.983 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 15:50:59.002 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 15:50:59.004 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 15:50:59.007 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 15:50:59.026 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 15:50:59.027 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 15:50:59.029 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 15:50:59.043 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 15:50:59.044 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 15:50:59.047 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 15:50:59.060 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 15:50:59.067 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 15:50:59.131 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 15:50:59.133 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 15:50:59.134 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 15:50:59.196 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 15:50:59.199 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:50:59.200 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:50:59.209 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:50:59.213 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:50:59.215 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 15:49:45.0(Timestamp), 2020-06-12 15:50:59.21(Timestamp)
2020-06-12 15:50:59.217 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 15:50:59.219 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:50:59.219 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:50:59.227 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:50:59.229 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:50:59.231 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 15:49:45.0(Timestamp), 2020-06-12 15:50:59.227(Timestamp)
2020-06-12 15:50:59.232 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 15:50:59.234 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:50:59.235 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:50:59.243 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:50:59.246 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:50:59.248 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 15:49:45.0(Timestamp), 2020-06-12 15:50:59.243(Timestamp)
2020-06-12 15:50:59.249 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 15:50:59.251 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:50:59.251 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:50:59.260 DEBUG 13412 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:50:59.264 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:50:59.265 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 15:49:45.0(Timestamp), 2020-06-12 15:50:59.261(Timestamp)
2020-06-12 15:50:59.267 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 15:50:59.278 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 15:50:59.280 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 15:50:59.283 DEBUG 13412 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 15:51:37.106 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 15:51:37.107 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 15:51:37.110 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 15:51:37.243 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 15:51:37.244 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 15:51:37.260 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 15:51:37.261 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 15:51:37.287 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 15:51:37.293 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:51:37.294 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 15:51:37.301 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 15:51:37.307 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:51:37.307 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 15:51:37.309 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 15:51:37.311 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 15:51:37.311 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 15:51:37.316 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 15:51:37.325 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:51:37.335 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:51:37.323(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 163(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:51:37.339 DEBUG 13412 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:54:04.402 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:54:04.404 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:54:04.397(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 26(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:54:04.406 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:54:41.997 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:54:41.997 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:54:41.996(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:54:41.999 DEBUG 13412 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:55:18.222 DEBUG 13412 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:55:18.223 DEBUG 13412 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:55:18.221(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:55:18.226 DEBUG 13412 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:58:38.037  INFO 13412 --- [Thread-22] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-12 15:58:38.181  INFO 13412 --- [Thread-22] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-06-12 15:58:39.174  INFO 13412 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 13412 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 15:58:39.175 DEBUG 13412 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 15:58:39.175  INFO 13412 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 15:58:39.967  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:58:39.967  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 15:58:40.020  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 53ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 15:58:40.024  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:58:40.024  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 15:58:40.041  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 15:58:40.048  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:58:40.049  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 15:58:40.065  INFO 13412 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 15:58:40.065  INFO 13412 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-06-12 15:58:40.202  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:58:40.209  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:58:40.210  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4aee3334' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:58:40.213  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:58:40.216  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:58:40.219  INFO 13412 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$7f40e581] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:58:40.607  INFO 13412 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 15:58:40.609  INFO 13412 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 15:58:40.610  INFO 13412 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 15:58:40.743  INFO 13412 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 15:58:40.744  INFO 13412 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1565 ms
2020-06-12 15:58:40.990  INFO 13412 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 15:58:40.990  INFO 13412 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 15:58:41.008  WARN 13412 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Cannot deserialize session attribute [user] for session [E2737DB28F5F4D270737F7CC1E049122]
2020-06-12 15:58:41.020 ERROR 13412 --- [restartedMain] o.a.catalina.session.StandardManager     : Exception loading sessions from persistent storage

java.lang.ClassCastException: java.lang.String cannot be cast to java.io.ObjectStreamClass
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1745)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2042)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at java.util.ArrayList.readObject(ArrayList.java:797)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1597)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1049)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:218)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:162)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:354)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5168)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:468)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:88)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:191)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)

2020-06-12 15:58:41.022 DEBUG 13412 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 15:58:41.100  INFO 13412 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 15:58:41.384  INFO 13412 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-06-12 15:58:42.790  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:58:42.790  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:58:42.790  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:58:42.790  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:58:42.811  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:58:42.811  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:58:42.811  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:58:42.811  WARN 13412 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:58:42.944  INFO 13412 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 15:58:43.019  WARN 13412 --- [I/O dispatcher 25] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 15:58:44.501  INFO 13412 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 15:58:44.528  INFO 13412 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 15:58:44.671  INFO 13412 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2259f9a6, org.springframework.security.web.context.SecurityContextPersistenceFilter@176c4b0e, org.springframework.security.web.header.HeaderWriterFilter@749167e5, org.springframework.security.web.authentication.logout.LogoutFilter@632ee882, site.alanliang.geekblog.security.ValidateCodeFilter@43a5de51, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@686c226d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2e21f2d0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@517006be, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@5cfe846d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1479336d, org.springframework.security.web.session.SessionManagementFilter@741679cb, org.springframework.security.web.access.ExceptionTranslationFilter@448faf7c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@325098d8]
2020-06-12 15:58:44.765  INFO 13412 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 15:58:45.472  INFO 13412 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 15:58:45.472  INFO 13412 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 15:58:45.491  INFO 13412 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 15:58:45.550  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 15:58:45.551  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 15:58:45.554  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 15:58:45.555  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 15:58:45.556  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 15:58:45.557  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 15:58:45.557  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 15:58:45.559  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 15:58:45.560  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 15:58:45.583  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 15:58:45.590  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 15:58:45.591  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 15:58:45.593  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 15:58:45.594  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 15:58:45.596  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 15:58:45.596  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 15:58:45.598  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 15:58:45.599  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 15:58:45.601  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 15:58:45.602  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 15:58:45.604  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 15:58:45.606  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 15:58:45.608  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 15:58:45.610  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 15:58:45.612  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 15:58:45.613  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 15:58:45.615  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 15:58:45.619  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 15:58:45.621  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 15:58:45.628  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 15:58:45.630  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 15:58:45.637  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 15:58:45.640  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 15:58:45.646  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 15:58:45.648  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 15:58:45.651  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 15:58:45.653  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 15:58:45.656  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 15:58:45.659  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 15:58:45.660  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 15:58:45.662  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 15:58:45.667  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 15:58:45.669  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 15:58:45.672  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 15:58:45.673  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 15:58:45.682  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 15:58:45.683  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 15:58:45.685  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 15:58:45.688  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 15:58:45.690  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 15:58:45.692  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 15:58:45.693  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 15:58:45.694  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 15:58:45.696  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 15:58:45.700  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 15:58:45.702  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 15:58:45.703  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 15:58:45.704  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 15:58:45.704  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 15:58:45.708  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 15:58:45.711  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 15:58:45.712  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 15:58:45.718  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 15:58:45.722  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 15:58:45.723  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 15:58:45.724  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 15:58:45.725  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 15:58:45.726  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 15:58:45.730  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 15:58:45.731  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 15:58:45.732  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 15:58:45.733  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 15:58:45.736  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 15:58:45.738  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 15:58:45.738  INFO 13412 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 15:58:45.752  INFO 13412 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 15:58:45.753  INFO 13412 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 6.65 seconds (JVM running for 499.694)
2020-06-12 15:58:45.757  INFO 13412 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-06-12 15:59:05.452  INFO 11528 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 11528 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 15:59:05.456 DEBUG 11528 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 15:59:05.457  INFO 11528 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 15:59:05.497  INFO 11528 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 15:59:05.498  INFO 11528 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 15:59:07.238  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:59:07.241  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 15:59:07.388  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 138ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 15:59:07.396  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:59:07.398  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 15:59:07.417  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 19ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 15:59:07.444  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 15:59:07.446  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 15:59:07.488  INFO 11528 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 15:59:07.488  INFO 11528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 24ms. Found 0 Redis repository interfaces.
2020-06-12 15:59:08.224  INFO 11528 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:59:08.401  INFO 11528 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:59:08.407  INFO 11528 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@b30e29a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:59:08.416  INFO 11528 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:59:08.440  INFO 11528 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:59:08.474  INFO 11528 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$2ba598c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 15:59:09.345  INFO 11528 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 15:59:09.359  INFO 11528 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 15:59:09.360  INFO 11528 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 15:59:09.520  INFO 11528 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 15:59:09.520  INFO 11528 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4022 ms
2020-06-12 15:59:09.836  INFO 11528 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 15:59:09.837  INFO 11528 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 15:59:09.860 DEBUG 11528 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 15:59:10.102  INFO 11528 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 15:59:10.902  INFO 11528 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 15:59:15.053  WARN 11528 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:59:15.056  WARN 11528 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:59:15.058  WARN 11528 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:59:15.059  WARN 11528 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:59:15.162  WARN 11528 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:59:15.163  WARN 11528 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:59:15.164  WARN 11528 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:59:15.164  WARN 11528 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 15:59:15.624  INFO 11528 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 15:59:16.069  WARN 11528 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 15:59:18.882  INFO 11528 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 15:59:18.914  INFO 11528 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 15:59:19.237  INFO 11528 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6fec537d, org.springframework.security.web.context.SecurityContextPersistenceFilter@6c9c8eed, org.springframework.security.web.header.HeaderWriterFilter@62c82068, org.springframework.security.web.authentication.logout.LogoutFilter@23bad6d0, site.alanliang.geekblog.security.ValidateCodeFilter@fa7a657, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6a871f11, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@73679208, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@45179b01, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@46a03c67, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7db2cef2, org.springframework.security.web.session.SessionManagementFilter@62feb855, org.springframework.security.web.access.ExceptionTranslationFilter@204f37c3, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@787dc2aa]
2020-06-12 15:59:19.375  INFO 11528 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 15:59:20.408  INFO 11528 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 15:59:20.436  INFO 11528 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 15:59:20.593  INFO 11528 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 15:59:21.078  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 15:59:21.082  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 15:59:21.090  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 15:59:21.092  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 15:59:21.094  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 15:59:21.097  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 15:59:21.099  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 15:59:21.105  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 15:59:21.108  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 15:59:21.163  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 15:59:21.178  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 15:59:21.180  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 15:59:21.184  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 15:59:21.186  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 15:59:21.191  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 15:59:21.193  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 15:59:21.196  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 15:59:21.200  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 15:59:21.206  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 15:59:21.209  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 15:59:21.214  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 15:59:21.220  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 15:59:21.224  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 15:59:21.229  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 15:59:21.231  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 15:59:21.235  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 15:59:21.236  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 15:59:21.241  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 15:59:21.243  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 15:59:21.252  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 15:59:21.255  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 15:59:21.263  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 15:59:21.267  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 15:59:21.273  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 15:59:21.279  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 15:59:21.285  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 15:59:21.287  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 15:59:21.293  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 15:59:21.295  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 15:59:21.297  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 15:59:21.303  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 15:59:21.311  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 15:59:21.313  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 15:59:21.319  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 15:59:21.320  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 15:59:21.343  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 15:59:21.348  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 15:59:21.353  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 15:59:21.359  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 15:59:21.364  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 15:59:21.365  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 15:59:21.367  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 15:59:21.369  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 15:59:21.371  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 15:59:21.377  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 15:59:21.381  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 15:59:21.384  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 15:59:21.385  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 15:59:21.387  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 15:59:21.391  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 15:59:21.393  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 15:59:21.395  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 15:59:21.404  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 15:59:21.411  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 15:59:21.412  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 15:59:21.414  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 15:59:21.415  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 15:59:21.417  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 15:59:21.424  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 15:59:21.427  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 15:59:21.429  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 15:59:21.431  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 15:59:21.437  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 15:59:21.439  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 15:59:21.441  INFO 11528 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 15:59:21.486  INFO 11528 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 15:59:21.491  INFO 11528 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 16.853 seconds (JVM running for 17.999)
2020-06-12 15:59:31.547  INFO 11528 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 15:59:31.548  INFO 11528 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 15:59:31.568  INFO 11528 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-06-12 15:59:31.711 DEBUG 11528 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 15:59:31.902 DEBUG 11528 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 15:59:31.932 DEBUG 11528 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 15:59:31.952 DEBUG 11528 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 15:59:31.962 DEBUG 11528 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 15:59:31.980 DEBUG 11528 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 15:59:37.537 DEBUG 11528 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 15:59:37.537 DEBUG 11528 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 15:59:37.540 DEBUG 11528 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 15:59:37.541 DEBUG 11528 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 15:59:37.541 DEBUG 11528 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 15:59:37.551 DEBUG 11528 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 15:59:37.656  INFO 11528 --- [http-nio-8889-exec-4] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 15:59:39.866 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:59:39.873 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 15:59:39.857(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:59:39.876 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 15:59:40.430  INFO 11528 --- [http-nio-8889-exec-2] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 15:59:40.433  INFO 11528 --- [http-nio-8889-exec-2] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 15:59:42.071 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 15:59:42.073 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 15:59:42.076 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 15:59:42.083 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 15:59:42.087 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 15:59:42.090 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 15:59:42.093 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 15:59:42.096 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 15:59:42.103 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 15:59:42.132 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 15:59:42.137 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 15:59:42.188 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 15:59:42.190 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 15:59:42.192 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 15:59:42.250 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 15:59:42.253 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:59:42.255 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:59:42.265 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:59:42.270 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:59:42.272 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 15:50:56.0(Timestamp), 2020-06-12 15:59:42.266(Timestamp)
2020-06-12 15:59:42.276 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 15:59:42.287 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:59:42.288 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:59:42.298 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:59:42.302 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:59:42.304 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 15:50:56.0(Timestamp), 2020-06-12 15:59:42.299(Timestamp)
2020-06-12 15:59:42.306 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 15:59:42.314 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:59:42.315 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:59:42.324 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:59:42.332 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:59:42.334 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 15:50:56.0(Timestamp), 2020-06-12 15:59:42.324(Timestamp)
2020-06-12 15:59:42.337 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 15:59:42.348 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 15:59:42.349 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 15:59:42.359 DEBUG 11528 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 15:59:42.368 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 15:59:42.370 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 15:50:56.0(Timestamp), 2020-06-12 15:59:42.365(Timestamp)
2020-06-12 15:59:42.372 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 15:59:46.723 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-12 15:59:46.730 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-12 15:59:46.732 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 0
2020-06-12 15:59:46.748 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-12 15:59:46.750 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 15:59:46.751 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 15:59:46.803 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 15:59:46.805 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 15:59:46.820 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 15:59:46.822 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 15:59:46.819(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 103(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 15:59:46.824 DEBUG 11528 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:00:01.969 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:00:01.975 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:00:01.967(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 26(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:00:01.977 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:00:31.341 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-12 16:00:31.341 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-12 16:00:31.343 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 0
2020-06-12 16:00:31.353 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-12 16:00:31.353 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 16:00:31.355 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 16:00:31.365 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 16:00:31.365 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 16:00:31.380 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:00:31.381 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:00:31.376(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 31(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:00:31.384 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:00:36.758 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-06-12 16:00:36.760 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-06-12 16:00:36.763 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 10
2020-06-12 16:00:36.778 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:00:36.778 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:00:36.776(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.web.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 28(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:00:36.780 DEBUG 11528 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:00:38.741 DEBUG 11528 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id LEFT JOIN t_article_tag tat ON ta.id = tat.article_id WHERE tat.tag_id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-12 16:00:38.743 DEBUG 11528 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 1(Long)
2020-06-12 16:00:42.072 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id LEFT JOIN t_article_tag tat ON ta.id = tat.article_id WHERE tat.tag_id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-12 16:00:42.072 DEBUG 11528 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 2(Long)
2020-06-12 16:00:42.709 DEBUG 11528 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id LEFT JOIN t_article_tag tat ON ta.id = tat.article_id WHERE tat.tag_id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-12 16:00:42.709 DEBUG 11528 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 3(Long)
2020-06-12 16:00:43.261 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id LEFT JOIN t_article_tag tat ON ta.id = tat.article_id WHERE tat.tag_id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-12 16:00:43.261 DEBUG 11528 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 8(Long)
2020-06-12 16:02:05.361  INFO 7932 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 7932 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 16:02:05.370 DEBUG 7932 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 16:02:05.370  INFO 7932 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 16:02:05.481  INFO 7932 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 16:02:05.483  INFO 7932 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 16:02:07.283  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:02:07.287  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:02:07.418  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 123ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 16:02:07.425  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:02:07.426  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:02:07.450  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 24ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 16:02:07.481  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:02:07.483  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 16:02:07.522  INFO 7932 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 16:02:07.523  INFO 7932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 25ms. Found 0 Redis repository interfaces.
2020-06-12 16:02:08.223  INFO 7932 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:02:08.491  INFO 7932 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:02:08.498  INFO 7932 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@46b2ad8a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:02:08.503  INFO 7932 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:02:08.518  INFO 7932 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:02:08.541  INFO 7932 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$e89d136] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:02:09.237  INFO 7932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 16:02:09.251  INFO 7932 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 16:02:09.252  INFO 7932 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 16:02:09.427  INFO 7932 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 16:02:09.427  INFO 7932 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3943 ms
2020-06-12 16:02:09.677  INFO 7932 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 16:02:09.680  INFO 7932 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 16:02:09.700 DEBUG 7932 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 16:02:09.870  INFO 7932 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 16:02:10.454  INFO 7932 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 16:02:13.685  WARN 7932 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:02:13.686  WARN 7932 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:02:13.688  WARN 7932 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:02:13.688  WARN 7932 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:02:13.731  WARN 7932 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:02:13.731  WARN 7932 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:02:13.732  WARN 7932 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:02:13.732  WARN 7932 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:02:13.998  INFO 7932 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 16:02:14.318  WARN 7932 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 16:02:16.535  INFO 7932 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 16:02:16.566  INFO 7932 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 16:02:16.848  INFO 7932 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3f7bc575, org.springframework.security.web.context.SecurityContextPersistenceFilter@7a43e4d1, org.springframework.security.web.header.HeaderWriterFilter@4fcc7259, org.springframework.security.web.authentication.logout.LogoutFilter@a350689, site.alanliang.geekblog.security.ValidateCodeFilter@5a09dab6, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3aed0084, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@77b115c3, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@584ad764, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@e92f39c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1bff3e22, org.springframework.security.web.session.SessionManagementFilter@7df3fd8c, org.springframework.security.web.access.ExceptionTranslationFilter@6f484022, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@62081da4]
2020-06-12 16:02:17.016  INFO 7932 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 16:02:17.924  INFO 7932 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 16:02:17.953  INFO 7932 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 16:02:18.077  INFO 7932 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 16:02:18.445  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 16:02:18.448  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 16:02:18.456  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 16:02:18.459  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 16:02:18.461  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 16:02:18.465  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 16:02:18.468  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 16:02:18.475  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 16:02:18.479  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 16:02:18.549  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 16:02:18.569  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 16:02:18.574  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 16:02:18.579  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 16:02:18.582  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 16:02:18.589  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 16:02:18.593  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 16:02:18.597  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 16:02:18.599  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 16:02:18.604  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 16:02:18.607  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 16:02:18.614  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 16:02:18.618  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 16:02:18.621  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 16:02:18.627  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 16:02:18.628  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 16:02:18.632  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 16:02:18.634  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 16:02:18.639  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 16:02:18.642  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 16:02:18.649  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 16:02:18.653  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 16:02:18.661  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 16:02:18.664  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 16:02:18.669  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 16:02:18.677  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 16:02:18.684  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 16:02:18.687  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 16:02:18.693  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 16:02:18.696  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 16:02:18.698  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 16:02:18.702  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 16:02:18.713  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 16:02:18.716  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 16:02:18.720  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 16:02:18.723  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 16:02:18.743  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 16:02:18.747  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 16:02:18.750  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 16:02:18.755  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 16:02:18.763  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 16:02:18.765  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 16:02:18.766  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 16:02:18.767  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 16:02:18.769  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 16:02:18.777  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 16:02:18.783  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 16:02:18.785  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 16:02:18.786  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 16:02:18.789  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 16:02:18.795  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 16:02:18.797  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 16:02:18.800  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 16:02:18.811  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 16:02:18.816  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 16:02:18.817  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 16:02:18.819  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 16:02:18.821  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 16:02:18.822  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 16:02:18.828  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 16:02:18.829  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 16:02:18.830  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 16:02:18.832  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 16:02:18.836  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 16:02:18.837  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 16:02:18.839  INFO 7932 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 16:02:18.909  INFO 7932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 16:02:18.914  INFO 7932 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 14.844 seconds (JVM running for 16.645)
2020-06-12 16:02:32.184  INFO 7932 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 16:02:32.184  INFO 7932 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 16:02:32.204  INFO 7932 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-06-12 16:02:32.329 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:02:32.499 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:02:32.535 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:02:32.558 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:02:32.570 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:02:32.591 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:02:33.494  INFO 7932 --- [http-nio-8889-exec-7] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 16:02:33.496  INFO 7932 --- [http-nio-8889-exec-7] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 16:02:34.358 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:02:34.367 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:02:34.35(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 957(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:02:34.371 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:02:50.493 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:02:50.493 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:02:50.495 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:02:50.496 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:02:50.496 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:02:50.502 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:02:50.596  INFO 7932 --- [http-nio-8889-exec-1] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 16:02:52.691 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:02:52.694 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:02:52.69(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:02:52.697 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:02:52.909 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 16:02:52.912 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 16:02:52.921 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 16:02:53.224 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 16:02:53.225 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 16:02:53.227 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:02:53.235 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 16:02:53.236 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 16:02:53.238 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 16:02:53.245 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 16:02:53.246 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 16:02:53.250 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 16:02:53.257 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 16:02:53.257 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 16:02:53.259 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:02:53.267 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 16:02:53.268 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 16:02:53.269 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 16:02:53.275 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 16:02:53.276 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 16:02:53.277 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 16:02:53.279 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 16:02:53.279 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 16:02:53.281 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:02:53.287 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 16:02:53.287 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 16:02:53.289 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:02:53.293 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 16:02:53.297 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 16:02:53.307 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 16:02:53.309 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 16:02:53.310 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 16:02:53.315 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 16:02:53.319 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 16:02:53.321 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 16:02:53.357 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 16:02:53.362 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 16:02:53.363 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 16:02:53.365 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 16:02:53.372 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 16:02:53.372 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 16:02:53.373 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 16:02:53.379 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 16:02:53.380 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 16:02:53.384 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 16:02:53.390 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:02:53.393 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 16:02:53.429 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 16:02:53.433 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:02:53.435 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 16:02:53.472 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 16:02:53.474 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:02:53.474 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:02:53.477 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:02:53.479 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:02:53.480 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 15:59:40.0(Timestamp), 2020-06-12 16:02:53.477(Timestamp)
2020-06-12 16:02:53.486 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:02:53.487 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:02:53.487 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:02:53.491 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:02:53.492 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:02:53.493 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 15:59:40.0(Timestamp), 2020-06-12 16:02:53.491(Timestamp)
2020-06-12 16:02:53.494 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:02:53.495 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:02:53.496 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:02:53.503 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:02:53.505 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:02:53.506 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 15:59:40.0(Timestamp), 2020-06-12 16:02:53.503(Timestamp)
2020-06-12 16:02:53.507 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:02:53.508 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:02:53.508 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:02:53.511 DEBUG 7932 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:02:53.513 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:02:53.514 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 15:59:40.0(Timestamp), 2020-06-12 16:02:53.512(Timestamp)
2020-06-12 16:02:53.518 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:02:53.525 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 16:02:53.526 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 16:02:53.527 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 16:02:57.823 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 16:02:57.824 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 16:02:57.825 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 16:02:57.895 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:02:57.896 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:02:57.909 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:02:57.910 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:02:57.927 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:02:57.935 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:02:57.936 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:02:57.938 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:02:57.941 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:02:57.942 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:02:57.943 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:02:57.945 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:02:57.945 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:02:57.947 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:02:57.956 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:02:57.959 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:02:57.955(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 97(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:02:57.960 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:01.019 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:03:01.023 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 2(Long)
2020-06-12 16:03:01.025 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:03:01.038 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:01.039 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:03:01.038(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=2, status=2) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:01.041 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:01.057 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:03:01.057 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:03:01.059 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:03:01.059 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:03:01.065 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:03:01.067 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:01.067 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:03:01.068 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:03:01.068 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:01.068 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:03:01.070 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:01.070 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:01.071 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:03:01.072 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:01.076 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:01.077 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:03:01.075(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 19(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:01.078 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:03.950 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:03:03.951 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-12 16:03:03.954 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:03:03.966 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:03.966 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:03:03.968 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:03:04.176 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:03:04.176 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:03:04.178 DEBUG 7932 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 16:03:15.862 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:03:15.868 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), true(Boolean), true(Boolean), true(Boolean), 2(Long), 2020-06-12 16:03:15.86(Timestamp), 2(Integer), true(Boolean), false(Boolean), 1(Integer), 2(Long)
2020-06-12 16:03:15.873 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:03:15.875 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:03:15.877 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 16:03:15.879 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 16:03:16.067 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 16:03:16.068 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 16:03:16.069 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 16:03:16.589 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:16.589 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:03:16.588(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 726(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:16.590 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:18.535 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:03:18.535 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:03:18.537 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:03:18.537 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:03:18.544 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:03:18.546 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:18.546 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:03:18.548 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:03:18.549 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:18.549 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:03:18.551 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:18.552 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:18.552 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:03:18.554 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:18.563 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:18.563 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:03:18.56(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:18.565 DEBUG 7932 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:22.153 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:03:22.153 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 1(Long)
2020-06-12 16:03:22.154 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:03:22.159 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:22.159 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:03:22.158(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=2) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:22.161 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:22.183 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:03:22.183 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:03:22.184 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:03:22.185 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:03:22.188 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:03:22.190 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:22.190 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:03:22.192 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:03:22.193 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:22.193 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:03:22.194 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:22.195 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:22.195 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:03:22.196 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:22.200 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:22.201 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:03:22.199(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 20(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:22.203 DEBUG 7932 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:24.923 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:03:24.923 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-12 16:03:24.926 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:03:24.930 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:24.930 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:03:24.932 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:28.414 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:03:28.416 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://cdn.alanliang.site/note/oilpainting1.jpg(String), false(Boolean), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:03:28.412(Timestamp), 2(Integer), false(Boolean), false(Boolean), 1(Integer), 1(Long)
2020-06-12 16:03:28.418 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:03:28.419 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:03:28.419 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-06-12 16:03:28.420 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-06-12 16:03:28.438 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-12 16:03:28.441 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-06-12 16:03:28.443 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-12 16:03:28.792 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:28.793 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:03:28.791(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 375(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:28.795 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:30.596 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:03:30.596 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:03:30.598 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:03:30.598 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:03:30.602 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:03:30.604 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:30.604 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:03:30.609 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:03:30.609 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:30.609 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:03:30.611 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:30.612 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:03:30.613 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:03:30.614 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:03:30.620 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:30.620 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:03:30.619(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 25(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:30.625 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:03:34.792 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-12 16:03:34.793 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-12 16:03:34.794 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 0
2020-06-12 16:03:34.796 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 limit ? 
2020-06-12 16:03:34.797 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 16:03:34.798 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 16:03:34.807 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 16:03:34.810 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 16:03:34.816 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:34.817 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:03:34.815(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 25(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:34.819 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:03:38.201 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:03:38.202 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:03:38.2(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:03:38.205 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:04:11.517 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:04:11.517 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 2(Long)
2020-06-12 16:04:11.518 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:04:11.525 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:04:11.525 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:04:11.524(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=2, status=2) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:04:11.526 DEBUG 7932 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:04:11.547 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:04:11.548 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:04:11.549 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:04:11.549 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:04:11.561 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:04:11.562 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:11.563 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:04:11.565 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:04:11.567 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:11.567 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:04:11.568 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:04:11.569 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:11.570 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:04:11.571 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:04:11.576 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:04:11.576 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:04:11.575(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 29(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:04:11.577 DEBUG 7932 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:04:17.418 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:04:17.419 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 3(Long)
2020-06-12 16:04:17.420 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:04:17.425 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:04:17.425 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:04:17.424(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=3, status=2) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:04:17.426 DEBUG 7932 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:04:17.447 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:04:17.447 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:04:17.449 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:04:17.449 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:04:17.454 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:04:17.455 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:17.455 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:04:17.457 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:04:17.458 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:17.458 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:04:17.460 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:04:17.461 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:17.461 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:04:17.462 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:04:17.466 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:04:17.467 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:04:17.465(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 19(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:04:17.468 DEBUG 7932 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:04:23.146 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:04:23.147 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 1(Long)
2020-06-12 16:04:23.148 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:04:23.153 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:04:23.153 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:04:23.152(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=2) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:04:23.155 DEBUG 7932 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:04:23.169 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:04:23.169 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:04:23.170 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:04:23.170 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:04:23.174 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:04:23.176 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:23.176 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:04:23.178 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:04:23.179 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:23.179 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:04:23.180 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:04:23.181 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:23.181 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:04:23.182 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:04:23.186 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:04:23.186 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:04:23.185(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 16(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:04:23.188 DEBUG 7932 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:04:33.087 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-12 16:04:33.088 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-12 16:04:33.088 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-12 16:04:33.094 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 limit ? 
2020-06-12 16:04:33.094 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 16:04:33.097 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 16:04:33.101 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 16:04:33.101 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 16:04:33.102 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-12 16:04:33.104 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 16:04:33.113 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 3
2020-06-12 16:04:33.115 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:33.115 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:04:33.117 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:04:33.118 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:33.118 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:04:33.119 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:04:33.120 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:04:33.120 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:04:33.122 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:04:33.130 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:04:33.131 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:04:33.128(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 41(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:04:33.132 DEBUG 7932 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:05:18.540  INFO 7672 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 7672 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 16:05:18.547 DEBUG 7672 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 16:05:18.548  INFO 7672 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 16:05:18.667  INFO 7672 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 16:05:18.668  INFO 7672 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 16:05:20.047  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:05:20.051  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:05:20.163  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 105ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 16:05:20.170  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:05:20.170  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:05:20.186  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 16:05:20.208  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:05:20.209  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 16:05:20.232  INFO 7672 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 16:05:20.233  INFO 7672 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-06-12 16:05:20.744  INFO 7672 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:05:21.004  INFO 7672 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:05:21.008  INFO 7672 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4140269b' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:05:21.009  INFO 7672 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:05:21.020  INFO 7672 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:05:21.041  INFO 7672 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$b9c96309] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:05:21.564  INFO 7672 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 16:05:21.575  INFO 7672 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 16:05:21.575  INFO 7672 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 16:05:21.727  INFO 7672 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 16:05:21.728  INFO 7672 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3060 ms
2020-06-12 16:05:21.936  INFO 7672 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 16:05:21.937  INFO 7672 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 16:05:21.955 DEBUG 7672 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 16:05:22.088  INFO 7672 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 16:05:22.650  INFO 7672 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 16:05:24.967  WARN 7672 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:05:24.968  WARN 7672 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:05:24.969  WARN 7672 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:05:24.969  WARN 7672 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:05:25.003  WARN 7672 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:05:25.003  WARN 7672 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:05:25.004  WARN 7672 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:05:25.004  WARN 7672 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:05:25.184  INFO 7672 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 16:05:25.451  WARN 7672 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 16:05:27.073  INFO 7672 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 16:05:27.122  INFO 7672 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 16:05:27.622  INFO 7672 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3e432bc1, org.springframework.security.web.context.SecurityContextPersistenceFilter@48a8d1fc, org.springframework.security.web.header.HeaderWriterFilter@1f535dc0, org.springframework.security.web.authentication.logout.LogoutFilter@26182466, site.alanliang.geekblog.security.ValidateCodeFilter@5f3bfa1b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@328fec3d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@27fb0982, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4f5fe353, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@24c6c72e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1948336d, org.springframework.security.web.session.SessionManagementFilter@3e28a8cd, org.springframework.security.web.access.ExceptionTranslationFilter@2285c0a4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@260a2ef4]
2020-06-12 16:05:27.917  INFO 7672 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 16:05:29.493  INFO 7672 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 16:05:29.562  INFO 7672 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 16:05:29.751  INFO 7672 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 16:05:30.290  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 16:05:30.291  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 16:05:30.304  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 16:05:30.307  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 16:05:30.308  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 16:05:30.316  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 16:05:30.320  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 16:05:30.328  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 16:05:30.335  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 16:05:30.429  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 16:05:30.456  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 16:05:30.460  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 16:05:30.471  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 16:05:30.474  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 16:05:30.488  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 16:05:30.492  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 16:05:30.503  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 16:05:30.507  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 16:05:30.522  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 16:05:30.527  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 16:05:30.538  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 16:05:30.555  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 16:05:30.561  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 16:05:30.581  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 16:05:30.585  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 16:05:30.597  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 16:05:30.601  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 16:05:30.606  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 16:05:30.610  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 16:05:30.623  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 16:05:30.628  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 16:05:30.639  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 16:05:30.645  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 16:05:30.653  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 16:05:30.659  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 16:05:30.670  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 16:05:30.671  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 16:05:30.674  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 16:05:30.677  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 16:05:30.683  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 16:05:30.687  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 16:05:30.695  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 16:05:30.701  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 16:05:30.708  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 16:05:30.715  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 16:05:30.753  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 16:05:30.757  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 16:05:30.765  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 16:05:30.773  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 16:05:30.780  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 16:05:30.784  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 16:05:30.788  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 16:05:30.788  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 16:05:30.789  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 16:05:30.801  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 16:05:30.806  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 16:05:30.809  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 16:05:30.812  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 16:05:30.814  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 16:05:30.822  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 16:05:30.824  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 16:05:30.827  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 16:05:30.846  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 16:05:30.853  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 16:05:30.855  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 16:05:30.856  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 16:05:30.856  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 16:05:30.857  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 16:05:30.867  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 16:05:30.870  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 16:05:30.872  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 16:05:30.874  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 16:05:30.882  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 16:05:30.886  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 16:05:30.887  INFO 7672 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 16:05:30.971  INFO 7672 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 16:05:30.981  INFO 7672 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 13.736 seconds (JVM running for 15.704)
2020-06-12 16:05:31.155  INFO 7672 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 16:05:31.156  INFO 7672 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 16:05:31.190  INFO 7672 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 34 ms
2020-06-12 16:05:31.449 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:05:31.790 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:05:31.827 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:05:31.856 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:05:31.870 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:05:31.888 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:05:33.351  INFO 7672 --- [http-nio-8889-exec-10] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 16:05:33.353  INFO 7672 --- [http-nio-8889-exec-10] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 16:05:34.589 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:05:34.600 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:05:34.582(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 1465(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:05:34.603 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:05:38.144 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-12 16:05:38.151 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-12 16:05:38.153 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-12 16:05:38.184 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-12 16:05:38.187 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 16:05:38.190 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 16:05:38.247 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 16:05:38.249 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 16:05:38.262 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-12 16:05:38.264 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 16:05:38.331 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 3
2020-06-12 16:05:38.344 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:05:38.345 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:05:38.347 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:05:38.355 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:05:38.356 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:05:38.360 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:05:38.365 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:05:38.365 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:05:38.367 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:05:38.373 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:05:38.374 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:05:38.372(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 239(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:05:38.378 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:06:37.134 ERROR 7672 --- [http-nio-8889-exec-10] s.a.g.e.handler.GlobalExceptionHandler   : org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'PUT' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:150)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-12 16:06:37.142  WARN 7672 --- [http-nio-8889-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'PUT' not supported]
2020-06-12 16:07:05.925 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:07:05.926 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:07:05.928 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:07:05.930 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:07:05.930 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:07:05.938 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:07:06.044  INFO 7672 --- [http-nio-8889-exec-4] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 16:07:08.146 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:07:08.149 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:07:08.145(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:07:08.150 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:07:08.377 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 16:07:08.379 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 16:07:08.383 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 16:07:08.651 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 16:07:08.653 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 16:07:08.656 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:08.663 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 16:07:08.664 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 16:07:08.666 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 16:07:08.678 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 16:07:08.679 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 16:07:08.682 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 16:07:08.689 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 16:07:08.690 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 16:07:08.692 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:08.698 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 16:07:08.699 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 16:07:08.700 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 16:07:08.708 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 16:07:08.709 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 16:07:08.710 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:08.712 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 16:07:08.713 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 16:07:08.716 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:07:08.726 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 16:07:08.726 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 16:07:08.728 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:08.730 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 16:07:08.731 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 16:07:08.733 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 16:07:08.735 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 16:07:08.736 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 16:07:08.742 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 16:07:08.744 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 16:07:08.745 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 16:07:08.750 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 16:07:08.757 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 16:07:08.757 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 16:07:08.758 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 16:07:08.764 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 16:07:08.764 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 16:07:08.765 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 16:07:08.775 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 16:07:08.775 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 16:07:08.776 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 16:07:08.778 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:07:08.781 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 16:07:08.813 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 16:07:08.815 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:07:08.815 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 16:07:08.846 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 16:07:08.847 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:07:08.848 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:07:08.851 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:07:08.856 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:07:08.856 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 16:02:53.0(Timestamp), 2020-06-12 16:07:08.853(Timestamp)
2020-06-12 16:07:08.858 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:07:08.859 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:07:08.859 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:07:08.862 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:07:08.864 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:07:08.864 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 16:02:53.0(Timestamp), 2020-06-12 16:07:08.863(Timestamp)
2020-06-12 16:07:08.865 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:08.866 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:07:08.866 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:07:08.871 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:07:08.873 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:07:08.873 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 16:02:53.0(Timestamp), 2020-06-12 16:07:08.871(Timestamp)
2020-06-12 16:07:08.874 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:08.875 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:07:08.876 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:07:08.879 DEBUG 7672 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:07:08.880 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:07:08.880 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 16:02:53.0(Timestamp), 2020-06-12 16:07:08.879(Timestamp)
2020-06-12 16:07:08.881 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:08.889 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 16:07:08.890 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 16:07:08.892 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 16:07:11.668 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 16:07:11.671 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 16:07:11.673 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 16:07:11.707 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:07:11.707 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:07:11.709 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:07:11.710 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:07:11.715 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:07:11.716 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:11.717 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:07:11.720 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:07:11.723 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:11.724 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:07:11.726 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:07:11.727 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:11.727 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:07:11.728 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:07:11.732 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:07:11.737 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:07:11.731(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 36(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:07:11.740 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:07:14.314 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:07:14.315 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-12 16:07:14.318 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:07:14.329 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:14.329 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:07:14.330 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:07:14.529 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:07:14.529 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:07:14.531 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 16:07:21.177 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (recommend = ?) 
2020-06-12 16:07:21.178 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-06-12 16:07:21.179 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:22.461 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:07:22.466 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), false(Boolean), true(Boolean), false(Boolean), 2(Long), 2020-06-12 16:07:22.456(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Integer), 2(Long)
2020-06-12 16:07:22.469 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:07:22.471 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:07:22.472 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 16:07:22.473 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 16:07:22.500 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 16:07:22.500 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 16:07:22.501 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 16:07:22.817 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:07:22.818 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:07:22.816(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 358(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:07:22.819 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:07:30.200 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:07:30.201 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:07:30.202 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:07:30.202 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:07:30.207 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:07:30.208 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:30.208 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:07:30.210 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:07:30.211 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:30.211 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:07:30.213 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:07:30.214 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:30.215 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:07:30.217 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:07:30.228 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:07:30.229 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:07:30.227(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:07:30.231 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:07:35.031 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:07:35.031 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 3(Long)
2020-06-12 16:07:35.034 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:07:35.037 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:35.037 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:07:35.039 DEBUG 7672 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:07:43.693 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (recommend = ?) 
2020-06-12 16:07:43.694 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-06-12 16:07:43.695 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:07:45.019 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:07:45.023 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识Mybatis核心组件(String), JavaEE互联网轻量级框架整合开发第3章(String), <h2 id="h2-1-mybatis-"><a name="1    持久层的概念和MyBatis的特点" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    持久层的概念和MyBatis的特点</h2><p>持久层可以将业务数据存储到磁盘，具有长期存储能力。</p>
<p>Mybatis成功的原因：</p>
<ul>
<li>不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</li><li>提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</li><li>提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</li></ul>
<h2 id="h2-2-mybatis-"><a name="2    MyBatis的核心组件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    MyBatis的核心组件</h2><p>Mybatis的核心组件分为4个部分：</p>
<ul>
<li><code>SqlSessionFactoryBuilder</code>（构造器）:它会根据配置或者代码来生成<code>SqlSessionFactory</code>，采用的是分步构建的建造者模式。</li><li><code>SqlSessionFactory</code>（工厂接口）：依靠它来生成<code>SqlSession</code>，使用的是工厂模式。</li><li><code>SqlSession</code>（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</li><li><code>SQL Mapper</code>（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</li></ul>
<p>MyBatis核心组件如图1所示:</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Mybatis核心组件.jpg" alt="Mybatis核心组件"></p>
<p>&lt;center&gt;图1 MyBatis核心组件&lt;/center&gt;

</p>
<h2 id="h2-3-code-sqlsessionfactory-code-"><a name="3    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    <code>SqlSessionFactory</code></h2><p>为了生成<code>SqlSessionFactory</code>，MyBatis提供了构造器<code>SqlSessionFactoryBuilder</code>，它提供了一个类<code>Configuration</code>作为引导类，采用了<code>builder</code>模式，具体的分步则是在<code>Configuration</code>类中完成。</p>
<p>当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过<code>Configuration</code>类对象构建整个MyBatis的上下文。<code>SqlSessionFactory</code>是一个接口，有两个实现类，一般由<code>DefaultSqlSessionFactory</code>去实现，它们之间的关系如图2所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/SqlSessionFactory的生成.jpg" alt="SqlSessionFactory的生成"></p>
<p>&lt;center&gt;图1 SqlSessionFactory与其实现类&lt;/center&gt;

</p>
<h4 id="h4-3-1-xml-code-sqlsessionfactory-code-"><a name="3.1    使用XML构建<code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1    使用XML构建<code>SqlSessionFactory</code></h4><p>在MyBatis中的XML分为两类：</p>
<ul>
<li>一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</li><li>一类是映射文件，用来配置映射关系、SQL、参数等信息</li></ul>
<p>创建一份简易的基础配置文件，我们把它命名为<code>mybatis-config.xml</code>，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn/&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>生成<code>SqlSessionFactory</code>，代码如下：</p>
<pre><code class="lang-java">public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = &quot;mybatis-config.xml&quot;;

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<h2 id="h2-4-code-sqlsession-code-"><a name="4    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    <code>SqlSession</code></h2><p>在MyBatis中，<code>SqlSession</code>是其核心接口，作用类似于<code>JDBC</code>中的<code>Connnection</code>对象，代表一个连接资源的启用。</p>
<p>具体而言，它的作用有3个：</p>
<ul>
<li>获取Mapper接口。</li><li>发送SQL给数据库。</li><li>控制数据库事务。</li></ul>
<p>创建方法如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = SqlSessionFactory.openSession();
</code></pre>
<p><code>SqlSession</code>控制数据库事务的方法，代码如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
</code></pre>
<h2 id="h2-5-"><a name="5    映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    映射器</h2><p>映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</p>
<ul>
<li>描述映射规则</li><li>提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</li><li>配置缓存</li><li>提供动态SQL</li></ul>
<p>映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</p>
<h3 id="h3-5-1-xml-"><a name="5.1    用XML实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    用XML实现映射器</h3><p>定义接口，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>mapper中namespace的值对应于所映射接口的全限定名</li><li>select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</li><li>#{id}表示传递进去的参数</li></ul>
<p>MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</p>
<h3 id="h3-5-2-"><a name="5.2    用注解实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2    用注解实现映射器</h3><pre><code class="lang-java">public interface RoleMapper2 {
    @Select(&quot;select id, role_name as roleName, note from t_role where id = #{id}&quot;)
    public Role getRole(Long id);
}
</code></pre>
<h3 id="h3-5-3-xml-"><a name="5.3    对比XML方式和注解方式实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3    对比XML方式和注解方式实现映射器</h3><p>注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</p>
<p>这个接口也可以在XML中定义，例如只需将<code>mybatis-config.xml</code>中配置XML语句：</p>
<pre><code class="lang-xml">  &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
</code></pre>
<p>修改成下面的形式即可：</p>
<pre><code class="lang-xml">&lt;mapper class=&quot;com.ssm.learn.chapter3.mapper.RoleMapper2&quot;/&gt;
</code></pre>
<p>也可以使用<code>configuration</code>对象注册这个接口，比如：</p>
<pre><code class="lang-java">configuration.addMapper(RoleMapper2.class)；
</code></pre>
<h3 id="h3-5-4-code-sqlsession-code-sql"><a name="5.4    <code>SqlSession</code>发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4    <code>SqlSession</code>发送SQL</h3><pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;com.ssm.learn.chapter3.mapper.RoleMapper.getRole&quot;, 1L);
</code></pre>
<p><code>selectOne</code>方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为<code>getRole</code>的SQL，则可以简写为：</p>
<pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;getRole&quot;, 1L);
</code></pre>
<h3 id="h3-5-5-code-mapper-code-sql"><a name="5.5    用<code>Mapper</code>接口发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.5    用<code>Mapper</code>接口发送SQL</h3><p><code>SqlSession</code>还可以获取<code>Mapper</code>接口，通过<code>Mapper</code>接口发送SQL，代码如下：</p>
<pre><code class="lang-java">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
</code></pre>
<p>因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</p>
<h3 id="h3-5-6-sql-"><a name="5.6    对比两种发送SQL的方式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.6    对比两种发送SQL的方式</h3><ul>
<li><p>使用<code>SqlSession</code>直接发送</p>
</li><li><p><code>SqlSession</code>获取<code>Mapper</code>接口，再通过<code>Mapper</code>发送</p>
</li></ul>
<p>使用<code>Mapper</code>接口编程可以消除<code>SqlSession</code>带来的功能性代码，提高可读性。<code>SqlSession</code>需要<code>SQLid</code>，晦涩难懂，而<code>Mapper</code>更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用<code>Mapper</code>接口编程。</p>
<h2 id="h2-6-"><a name="6    生命周期" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    生命周期</h2><p>所谓生命周期就是每一个对象应该存活的时间。</p>
<h3 id="h3-6-1-code-sqlsessionfactorybuilder-code-"><a name="6.1    <code>SqlSessionFactoryBuilder</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    <code>SqlSessionFactoryBuilder</code></h3><p>其作用在于创建<code>SqlSessionFactory</code>，创建成功后就失去作用，所以它只能存在于创建<code>SqlSessionFactory</code>的方法中，而不能让其长期存在。</p>
<h3 id="h3-6-2-code-sqlsessionfactory-code-"><a name="6.2    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    <code>SqlSessionFactory</code></h3><p>可以被认为是数据库连接池，其作用是创建<code>SqlSession</code>接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个<code>SqlSessionFactory</code>可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</p>
<h3 id="h3-6-3-code-sqlsession-code-"><a name="6.3    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.3    <code>SqlSession</code></h3><p>相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至<code>SqlSessionFactory</code>，否则可能会导致数据库资源耗尽。</p>
<h3 id="h3-6-4-code-mapper-code-"><a name="6.4    <code>Mapper</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.4    <code>Mapper</code></h3><p>它由<code>SqlSession</code>创建，所以它的生命周期至多和<code>SqlSession</code>保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</p>
<h2 id="h2-7-"><a name="7    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    实例</h2><p>项目结构如图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/项目结构.png" alt="项目结构"></p>
<p><code>log4j.properties</code>文件，代码如下：</p>
<pre><code class="lang-properties">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
</code></pre>
<p><code>Role</code>类，代码如下：</p>
<pre><code class="lang-java">public class Role {
    private Long id;
    private String roleName;
    private String note;

    public Role() {}
    /*setter and getter*/
}
</code></pre>
<p><code>RoleMapper</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}
</code></pre>
<p><code>RoleMapper.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultType=&quot;role&quot;&gt;
        select id,role_name as roleName,note from t_role where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p><code>SqlSessionFactoryUtils</code>工具类，代码如下：</p>
<pre><code class="lang-java">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = &quot;mybatis-config.xml&quot;;
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
</code></pre>
<p>其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入<code>synchronized</code>关键字加锁，主要是防止在多线程中多次实例化<code>SqlSessionFactory</code>对象，保证唯一性。</p>
<p><code>mybatis-config.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!--type=&quot;POOLED&quot;表示采用MyBatis内部连接池--&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p><code>Chapter3Main</code>类，代码如下：</p>
<pre><code class="lang-java">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##1	持久层的概念和MyBatis的特点

持久层可以将业务数据存储到磁盘，具有长期存储能力。

Mybatis成功的原因：

- 不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；
- 提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；
- 提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。

##2    MyBatis的核心组件

Mybatis的核心组件分为4个部分：

- `SqlSessionFactoryBuilder`（构造器）:它会根据配置或者代码来生成`SqlSessionFactory`，采用的是分步构建的建造者模式。
- `SqlSessionFactory`（工厂接口）：依靠它来生成`SqlSession`，使用的是工厂模式。
- `SqlSession`（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。
- `SQL Mapper`（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。

MyBatis核心组件如图1所示:

![Mybatis核心组件](http://q8rsjstig.bkt.clouddn.com/note/Mybatis核心组件.jpg)

<center>图1 MyBatis核心组件</center>

##3	`SqlSessionFactory`

为了生成`SqlSessionFactory`，MyBatis提供了构造器`SqlSessionFactoryBuilder`，它提供了一个类`Configuration`作为引导类，采用了`builder`模式，具体的分步则是在`Configuration`类中完成。

当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过`Configuration`类对象构建整个MyBatis的上下文。`SqlSessionFactory`是一个接口，有两个实现类，一般由`DefaultSqlSessionFactory`去实现，它们之间的关系如图2所示：

![SqlSessionFactory的生成](http://q8rsjstig.bkt.clouddn.com/note/SqlSessionFactory的生成.jpg)

<center>图1 SqlSessionFactory与其实现类</center>

####3.1	使用XML构建`SqlSessionFactory`

在MyBatis中的XML分为两类：

- 一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境
- 一类是映射文件，用来配置映射关系、SQL、参数等信息

创建一份简易的基础配置文件，我们把它命名为`mybatis-config.xml`，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn/"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

生成`SqlSessionFactory`，代码如下：

```java
public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = "mybatis-config.xml";

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

##4	`SqlSession`

在MyBatis中，`SqlSession`是其核心接口，作用类似于`JDBC`中的`Connnection`对象，代表一个连接资源的启用。

具体而言，它的作用有3个：

- 获取Mapper接口。
- 发送SQL给数据库。
- 控制数据库事务。

创建方法如下：

```java
SqlSession sqlSession = SqlSessionFactory.openSession();
```

`SqlSession`控制数据库事务的方法，代码如下：

```java
SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
```

##5	映射器

映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：

- 描述映射规则
- 提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息
- 配置缓存
- 提供动态SQL

映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。

###5.1	用XML实现映射器

定义接口，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
   <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id}
   </select>
</mapper>
```

- mapper中namespace的值对应于所映射接口的全限定名
- select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型
- \#{id}表示传递进去的参数

MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。

###5.2	用注解实现映射器

```java
public interface RoleMapper2 {
    @Select("select id, role_name as roleName, note from t_role where id = #{id}")
    public Role getRole(Long id);
}
```

###5.3	对比XML方式和注解方式实现映射器

注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式

这个接口也可以在XML中定义，例如只需将`mybatis-config.xml`中配置XML语句：

```xml
  <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
```

修改成下面的形式即可：

```xml
<mapper class="com.ssm.learn.chapter3.mapper.RoleMapper2"/>
```

也可以使用`configuration`对象注册这个接口，比如：

```java
configuration.addMapper(RoleMapper2.class)；
```

###5.4	`SqlSession`发送SQL

```java
Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);
```

`selectOne`方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为`getRole`的SQL，则可以简写为：

```java
Role role = (Role)sqlSession.selectOne("getRole", 1L);
```

###5.5	用`Mapper`接口发送SQL

`SqlSession`还可以获取`Mapper`接口，通过`Mapper`接口发送SQL，代码如下：

```java
RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
```

因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。

###5.6	对比两种发送SQL的方式

- 使用`SqlSession`直接发送

- `SqlSession`获取`Mapper`接口，再通过`Mapper`发送

使用`Mapper`接口编程可以消除`SqlSession`带来的功能性代码，提高可读性。`SqlSession`需要`SQLid`，晦涩难懂，而`Mapper`更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用`Mapper`接口编程。

##6	生命周期

所谓生命周期就是每一个对象应该存活的时间。

###6.1	`SqlSessionFactoryBuilder`

其作用在于创建`SqlSessionFactory`，创建成功后就失去作用，所以它只能存在于创建`SqlSessionFactory`的方法中，而不能让其长期存在。

###6.2	`SqlSessionFactory`

可以被认为是数据库连接池，其作用是创建`SqlSession`接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个`SqlSessionFactory`可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。

###6.3	`SqlSession`

相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至`SqlSessionFactory`，否则可能会导致数据库资源耗尽。

###6.4	`Mapper`

它由`SqlSession`创建，所以它的生命周期至多和`SqlSession`保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。

##7	实例

项目结构如图：

![项目结构](http://q8rsjstig.bkt.clouddn.com/note/项目结构.png)

`log4j.properties`文件，代码如下：

```properties
log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
```

`Role`类，代码如下：

```java
public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}
```

`RoleMapper`接口，代码如下：

```java
public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List<Role> findRoles(String roleName);
}
```

`RoleMapper.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
    <insert id="insertRole" parameterType="role">
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    </insert>
    <delete id="deleteRole" parameterType="long">
        delete from t_role where id = #{id};
    </delete>
    <update id="updateRole" parameterType="role">
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    </update>
    <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id};
   </select>
    <select id="findRoles" parameterType="string" resultType="role">
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    </select>
</mapper>
```

`SqlSessionFactoryUtils`工具类，代码如下：

```java
public class SqlSessionFactoryUtils {
    private final static Class<SqlSessionFactoryUtils> LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
```

其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入`synchronized`关键字加锁，主要是防止在多线程中多次实例化`SqlSessionFactory`对象，保证唯一性。

`mybatis-config.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <!--配置事务管理器-->
            <transactionManager type="JDBC"></transactionManager>
            <!--配置数据源-->
            <dataSource type="POOLED"><!--type="POOLED"表示采用MyBatis内部连接池-->
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

`Chapter3Main`类，代码如下：

```java
public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting3.jpg(String), false(Boolean), true(Boolean), false(Boolean), 3(Long), 2020-06-12 16:07:45.018(Timestamp), 3(Integer), true(Boolean), true(Boolean), 1(Integer), 3(Long)
2020-06-12 16:07:45.025 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:07:45.027 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:07:45.027 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 3(Long)
2020-06-12 16:07:45.028 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-06-12 16:07:45.041 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-12 16:07:45.042 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 3(Long), 1(Long), 3(Long), 3(Long), 3(Long), 7(Long), 3(Long), 8(Long)
2020-06-12 16:07:45.042 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-12 16:07:45.358 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:07:45.358 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:07:45.357(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 337(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:07:45.360 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:07:55.150 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:07:55.150 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-12 16:07:55.152 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:07:55.155 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:07:55.155 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:07:55.158 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:08:00.266 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (recommend = ?) 
2020-06-12 16:08:00.267 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-06-12 16:08:00.268 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:08:00.866 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (top = ?) 
2020-06-12 16:08:00.867 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: true(Boolean)
2020-06-12 16:08:00.867 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:08:01.598 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:08:01.600 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://cdn.alanliang.site/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), false(Boolean), 14(Long), 2020-06-12 16:08:01.595(Timestamp), 2(Integer), true(Boolean), true(Boolean), 1(Integer), 1(Long)
2020-06-12 16:08:01.602 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:08:01.603 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:08:01.603 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-06-12 16:08:01.605 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-06-12 16:08:01.617 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-12 16:08:01.617 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-06-12 16:08:01.618 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-12 16:08:01.892 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:08:01.892 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:08:01.891(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 294(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:08:01.893 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:08:07.596 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:08:07.596 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:08:07.598 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:08:07.598 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:08:07.602 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:08:07.603 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:07.603 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:08:07.605 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:08:07.606 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:07.606 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:08:07.607 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:08:07.608 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:07.608 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:08:07.609 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:08:07.612 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:08:07.612 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:08:07.611(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:08:07.613 DEBUG 7672 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:08:25.895 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:08:25.895 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-12 16:08:25.897 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:08:25.902 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:25.902 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:08:25.904 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:08:38.980 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:08:38.981 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), false(Boolean), true(Boolean), true(Boolean), 2(Long), 2020-06-12 16:08:38.979(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Integer), 2(Long)
2020-06-12 16:08:38.986 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:08:38.987 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:08:38.988 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 16:08:38.989 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 16:08:39.182 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 16:08:39.182 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 16:08:39.183 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 16:08:39.416 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:08:39.416 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:08:39.415(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 434(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:08:39.417 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:08:41.375 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:08:41.375 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:08:41.377 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:08:41.377 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:08:41.387 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:08:41.388 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:41.388 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:08:41.390 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:08:41.391 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:41.391 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:08:41.392 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:08:41.393 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:41.393 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:08:41.394 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:08:41.401 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:08:41.401 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:08:41.4(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 22(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:08:41.403 DEBUG 7672 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:08:52.908 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:08:52.910 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), true(Boolean), true(Boolean), false(Boolean), 2(Long), 2020-06-12 16:08:52.907(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Integer), 2(Long)
2020-06-12 16:08:52.914 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:08:52.915 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:08:52.915 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 16:08:52.916 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 16:08:52.927 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 16:08:52.927 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 16:08:52.928 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 16:08:53.087 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:08:53.087 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:08:53.086(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 177(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:08:53.088 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:08:58.471 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:08:58.471 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:08:58.472 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:08:58.472 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:08:58.479 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:08:58.480 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:58.480 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:08:58.482 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:08:58.484 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:58.484 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:08:58.487 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:08:58.488 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:08:58.488 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:08:58.490 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:08:58.495 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:08:58.495 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:08:58.494(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 22(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:08:58.496 DEBUG 7672 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:10:20.992 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:10:20.993 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:10:20.991(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:10:20.994 DEBUG 7672 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:10:32.093 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:10:32.096 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), true(Boolean), true(Boolean), true(Boolean), 2(Long), 2020-06-12 16:10:32.091(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Integer), 2(Long)
2020-06-12 16:10:32.101 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:10:32.102 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:10:32.102 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 16:10:32.104 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 16:10:32.116 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 16:10:32.116 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 16:10:32.117 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 16:10:32.273 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:10:32.274 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:10:32.273(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 179(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:10:32.276 DEBUG 7672 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:10:34.193 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:10:34.193 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:10:34.195 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:10:34.195 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:10:34.210 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:10:34.212 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:10:34.212 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:10:34.214 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:10:34.215 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:10:34.216 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:10:34.220 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:10:34.223 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:10:34.223 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:10:34.225 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:10:34.229 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:10:34.229 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:10:34.228(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 36(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:10:34.230 DEBUG 7672 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:10:42.296 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:10:42.297 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), false(Boolean), true(Boolean), false(Boolean), 2(Long), 2020-06-12 16:10:42.295(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Integer), 2(Long)
2020-06-12 16:10:42.302 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:10:42.303 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:10:42.303 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 16:10:42.304 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 16:10:42.315 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 16:10:42.316 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 16:10:42.317 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 16:10:42.457 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:10:42.457 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:10:42.456(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 160(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:10:42.458 DEBUG 7672 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:10:54.188 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:10:54.188 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-12 16:10:54.192 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:10:54.197 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:10:54.197 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:10:54.200 DEBUG 7672 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:11:04.634 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:11:04.635 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:11:04.636 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:11:04.636 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:11:04.640 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:11:04.641 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:11:04.641 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:11:04.642 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:11:04.643 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:11:04.643 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:11:04.644 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:11:04.646 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:11:04.646 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:11:04.647 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:11:04.650 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:11:04.650 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:11:04.65(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 16(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:11:04.652 DEBUG 7672 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:13:37.134  INFO 12752 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 12752 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 16:13:37.137 DEBUG 12752 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 16:13:37.138  INFO 12752 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 16:13:37.188  INFO 12752 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 16:13:37.189  INFO 12752 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 16:13:38.018  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:13:38.020  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:13:38.086  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 62ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 16:13:38.091  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:13:38.091  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:13:38.103  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 16:13:38.114  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:13:38.116  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 16:13:38.133  INFO 12752 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 16:13:38.133  INFO 12752 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Redis repository interfaces.
2020-06-12 16:13:38.446  INFO 12752 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:13:38.586  INFO 12752 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:13:38.588  INFO 12752 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@61c86589' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:13:38.591  INFO 12752 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:13:38.597  INFO 12752 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:13:38.608  INFO 12752 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$a5090f1b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:13:38.937  INFO 12752 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 16:13:38.944  INFO 12752 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 16:13:38.944  INFO 12752 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 16:13:39.038  INFO 12752 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 16:13:39.038  INFO 12752 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1849 ms
2020-06-12 16:13:39.171  INFO 12752 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 16:13:39.172  INFO 12752 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 16:13:39.186 DEBUG 12752 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 16:13:39.278  INFO 12752 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 16:13:39.627  INFO 12752 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 16:13:41.052  WARN 12752 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:13:41.053  WARN 12752 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:13:41.053  WARN 12752 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:13:41.054  WARN 12752 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:13:41.075  WARN 12752 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:13:41.075  WARN 12752 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:13:41.075  WARN 12752 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:13:41.075  WARN 12752 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:13:41.194  INFO 12752 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 16:13:41.342  WARN 12752 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 16:13:42.364  INFO 12752 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 16:13:42.381  INFO 12752 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 16:13:42.535  INFO 12752 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5bc88c72, org.springframework.security.web.context.SecurityContextPersistenceFilter@7ec229c3, org.springframework.security.web.header.HeaderWriterFilter@323244f3, org.springframework.security.web.authentication.logout.LogoutFilter@3e7a10f7, site.alanliang.geekblog.security.ValidateCodeFilter@795bffbd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@60c77239, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@523b964e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@57ae26fb, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@258cdfb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@70eb6eb7, org.springframework.security.web.session.SessionManagementFilter@6372a073, org.springframework.security.web.access.ExceptionTranslationFilter@3e6aa325, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@66cbb217]
2020-06-12 16:13:42.606  INFO 12752 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 16:13:43.020  INFO 12752 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 16:13:43.032  INFO 12752 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 16:13:43.081  INFO 12752 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 16:13:43.245  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 16:13:43.246  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 16:13:43.249  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 16:13:43.250  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 16:13:43.251  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 16:13:43.253  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 16:13:43.254  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 16:13:43.257  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 16:13:43.258  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 16:13:43.288  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 16:13:43.298  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 16:13:43.300  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 16:13:43.303  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 16:13:43.304  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 16:13:43.308  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 16:13:43.309  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 16:13:43.311  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 16:13:43.312  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 16:13:43.314  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 16:13:43.315  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 16:13:43.317  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 16:13:43.319  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 16:13:43.321  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 16:13:43.324  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 16:13:43.325  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 16:13:43.326  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 16:13:43.327  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 16:13:43.329  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 16:13:43.329  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 16:13:43.333  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 16:13:43.334  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 16:13:43.337  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 16:13:43.338  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 16:13:43.341  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 16:13:43.343  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 16:13:43.346  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 16:13:43.346  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 16:13:43.348  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 16:13:43.348  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 16:13:43.349  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 16:13:43.350  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 16:13:43.352  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 16:13:43.353  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 16:13:43.354  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 16:13:43.355  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 16:13:43.362  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 16:13:43.363  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 16:13:43.364  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 16:13:43.366  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 16:13:43.368  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 16:13:43.369  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 16:13:43.369  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 16:13:43.370  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 16:13:43.370  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 16:13:43.373  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 16:13:43.375  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 16:13:43.375  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 16:13:43.376  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 16:13:43.376  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 16:13:43.378  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 16:13:43.379  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 16:13:43.379  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 16:13:43.383  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 16:13:43.385  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 16:13:43.386  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 16:13:43.387  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 16:13:43.387  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 16:13:43.388  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 16:13:43.390  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 16:13:43.391  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 16:13:43.392  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 16:13:43.393  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 16:13:43.394  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 16:13:43.396  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 16:13:43.396  INFO 12752 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 16:13:43.420  INFO 12752 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 16:13:43.422  INFO 12752 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.066 seconds (JVM running for 8.613)
2020-06-12 16:13:51.863  INFO 12752 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 16:13:51.863  INFO 12752 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 16:13:51.872  INFO 12752 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-06-12 16:13:51.935 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:13:52.019 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:13:52.032 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:13:52.041 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:13:52.045 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:13:52.053 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:13:56.527 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:13:56.527 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:13:56.529 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:13:56.530 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:13:56.530 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:13:56.538 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:13:56.638  INFO 12752 --- [http-nio-8889-exec-6] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 16:13:58.831 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:13:58.844 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:13:58.826(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:13:58.847 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:13:59.197  INFO 12752 --- [http-nio-8889-exec-2] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 16:13:59.198  INFO 12752 --- [http-nio-8889-exec-2] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 16:13:59.669 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 16:13:59.673 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 16:13:59.677 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 16:13:59.962 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 16:13:59.963 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 16:13:59.964 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:13:59.972 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 16:13:59.972 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 16:13:59.974 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 16:13:59.983 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 16:13:59.983 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 16:13:59.987 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 16:13:59.995 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 16:13:59.995 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 16:13:59.996 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:14:00.007 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 16:14:00.008 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 16:14:00.010 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 16:14:00.017 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 16:14:00.019 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 16:14:00.021 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 16:14:00.027 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 16:14:00.028 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 16:14:00.029 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:14:00.036 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 16:14:00.037 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 16:14:00.040 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:14:00.047 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 16:14:00.049 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 16:14:00.054 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 16:14:00.057 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 16:14:00.058 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 16:14:00.061 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 16:14:00.063 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 16:14:00.064 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 16:14:00.098 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 16:14:00.105 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 16:14:00.106 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 16:14:00.108 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 16:14:00.113 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 16:14:00.114 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 16:14:00.115 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 16:14:00.124 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 16:14:00.125 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 16:14:00.126 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 16:14:00.132 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:14:00.138 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 16:14:00.167 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 16:14:00.169 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:14:00.172 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 16:14:00.208 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 16:14:00.209 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:14:00.210 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:14:00.214 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:14:00.216 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:14:00.217 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 16:07:08.0(Timestamp), 2020-06-12 16:14:00.214(Timestamp)
2020-06-12 16:14:00.221 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:14:00.223 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:14:00.223 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:14:00.225 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:14:00.227 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:14:00.227 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 16:07:08.0(Timestamp), 2020-06-12 16:14:00.227(Timestamp)
2020-06-12 16:14:00.229 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:14:00.230 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:14:00.230 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:14:00.233 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:14:00.236 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:14:00.239 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 16:07:08.0(Timestamp), 2020-06-12 16:14:00.234(Timestamp)
2020-06-12 16:14:00.240 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:14:00.241 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:14:00.241 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:14:00.245 DEBUG 12752 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:14:00.246 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:14:00.247 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 16:07:08.0(Timestamp), 2020-06-12 16:14:00.245(Timestamp)
2020-06-12 16:14:00.249 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:14:00.257 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 16:14:00.258 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 16:14:00.260 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 16:14:03.328 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 16:14:03.328 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 16:14:03.330 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 16:14:03.400 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:14:03.404 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:14:03.414 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:14:03.416 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:14:03.438 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:14:03.442 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:03.444 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:14:03.446 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:14:03.449 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:03.449 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:14:03.455 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:03.457 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:03.457 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:14:03.459 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:03.464 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:14:03.468 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:14:03.463(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 102(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:14:03.473 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:14:06.708 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:14:06.709 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-12 16:14:06.712 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:14:06.724 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:06.724 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:14:06.726 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:14:06.940 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:14:06.941 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:14:06.943 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-12 16:14:11.628 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:14:11.636 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), false(Boolean), true(Boolean), true(Boolean), 2(Long), 2020-06-12 16:14:11.622(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Integer), 2(Long)
2020-06-12 16:14:11.641 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:14:11.643 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:14:11.645 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 16:14:11.646 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 16:14:11.678 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 16:14:11.679 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 16:14:11.680 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 16:14:11.857 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:14:11.858 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:14:11.856(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 232(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:14:11.859 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:14:13.839 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:14:13.839 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:14:13.841 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:14:13.841 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:14:13.847 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:14:13.852 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:13.853 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:14:13.855 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:14:13.856 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:13.856 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:14:13.858 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:13.859 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:13.859 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:14:13.860 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:13.866 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:14:13.867 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:14:13.863(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 27(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:14:13.871 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:14:25.281 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:14:25.286 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第2章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://q8rsjstig.bkt.clouddn.com/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://q8rsjstig.bkt.clouddn.com/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://q8rsjstig.bkt.clouddn.com/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://q8rsjstig.bkt.clouddn.com/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://q8rsjstig.bkt.clouddn.com/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://q8rsjstig.bkt.clouddn.com/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), true(Boolean), true(Boolean), 2(Long), 2020-06-12 16:14:25.279(Timestamp), 1(Integer), true(Boolean), true(Boolean), 1(Integer), 2(Long)
2020-06-12 16:14:25.293 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:14:25.294 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:14:25.294 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-12 16:14:25.295 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-12 16:14:25.307 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-12 16:14:25.307 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 1(Long), 2(Long), 5(Long), 2(Long), 6(Long)
2020-06-12 16:14:25.308 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-12 16:14:25.309 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:14:25.309 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 2(Long)
2020-06-12 16:14:25.311 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:14:25.465 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:14:25.465 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:14:25.463(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 182(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:14:25.466 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:14:30.171 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:14:30.171 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:14:30.172 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:14:30.173 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:14:30.179 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:14:30.180 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:30.180 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:14:30.182 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:14:30.183 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:30.183 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:14:30.185 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:30.188 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:30.188 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:14:30.190 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:30.196 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:14:30.197 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:14:30.195(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 25(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:14:30.199 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:14:34.002 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:14:34.002 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 3(Long)
2020-06-12 16:14:34.005 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:14:34.009 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:34.010 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:14:34.012 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:37.717 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:14:37.718 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识Mybatis核心组件(String), JavaEE互联网轻量级框架整合开发第3章(String), <h2 id="h2-1-mybatis-"><a name="1    持久层的概念和MyBatis的特点" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    持久层的概念和MyBatis的特点</h2><p>持久层可以将业务数据存储到磁盘，具有长期存储能力。</p>
<p>Mybatis成功的原因：</p>
<ul>
<li>不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</li><li>提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</li><li>提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</li></ul>
<h2 id="h2-2-mybatis-"><a name="2    MyBatis的核心组件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    MyBatis的核心组件</h2><p>Mybatis的核心组件分为4个部分：</p>
<ul>
<li><code>SqlSessionFactoryBuilder</code>（构造器）:它会根据配置或者代码来生成<code>SqlSessionFactory</code>，采用的是分步构建的建造者模式。</li><li><code>SqlSessionFactory</code>（工厂接口）：依靠它来生成<code>SqlSession</code>，使用的是工厂模式。</li><li><code>SqlSession</code>（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</li><li><code>SQL Mapper</code>（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</li></ul>
<p>MyBatis核心组件如图1所示:</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Mybatis核心组件.jpg" alt="Mybatis核心组件"></p>
<p>&lt;center&gt;图1 MyBatis核心组件&lt;/center&gt;

</p>
<h2 id="h2-3-code-sqlsessionfactory-code-"><a name="3    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    <code>SqlSessionFactory</code></h2><p>为了生成<code>SqlSessionFactory</code>，MyBatis提供了构造器<code>SqlSessionFactoryBuilder</code>，它提供了一个类<code>Configuration</code>作为引导类，采用了<code>builder</code>模式，具体的分步则是在<code>Configuration</code>类中完成。</p>
<p>当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过<code>Configuration</code>类对象构建整个MyBatis的上下文。<code>SqlSessionFactory</code>是一个接口，有两个实现类，一般由<code>DefaultSqlSessionFactory</code>去实现，它们之间的关系如图2所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/SqlSessionFactory的生成.jpg" alt="SqlSessionFactory的生成"></p>
<p>&lt;center&gt;图1 SqlSessionFactory与其实现类&lt;/center&gt;

</p>
<h4 id="h4-3-1-xml-code-sqlsessionfactory-code-"><a name="3.1    使用XML构建<code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1    使用XML构建<code>SqlSessionFactory</code></h4><p>在MyBatis中的XML分为两类：</p>
<ul>
<li>一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</li><li>一类是映射文件，用来配置映射关系、SQL、参数等信息</li></ul>
<p>创建一份简易的基础配置文件，我们把它命名为<code>mybatis-config.xml</code>，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn/&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>生成<code>SqlSessionFactory</code>，代码如下：</p>
<pre><code class="lang-java">public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = &quot;mybatis-config.xml&quot;;

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<h2 id="h2-4-code-sqlsession-code-"><a name="4    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    <code>SqlSession</code></h2><p>在MyBatis中，<code>SqlSession</code>是其核心接口，作用类似于<code>JDBC</code>中的<code>Connnection</code>对象，代表一个连接资源的启用。</p>
<p>具体而言，它的作用有3个：</p>
<ul>
<li>获取Mapper接口。</li><li>发送SQL给数据库。</li><li>控制数据库事务。</li></ul>
<p>创建方法如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = SqlSessionFactory.openSession();
</code></pre>
<p><code>SqlSession</code>控制数据库事务的方法，代码如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
</code></pre>
<h2 id="h2-5-"><a name="5    映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    映射器</h2><p>映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</p>
<ul>
<li>描述映射规则</li><li>提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</li><li>配置缓存</li><li>提供动态SQL</li></ul>
<p>映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</p>
<h3 id="h3-5-1-xml-"><a name="5.1    用XML实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    用XML实现映射器</h3><p>定义接口，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>mapper中namespace的值对应于所映射接口的全限定名</li><li>select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</li><li>#{id}表示传递进去的参数</li></ul>
<p>MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</p>
<h3 id="h3-5-2-"><a name="5.2    用注解实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2    用注解实现映射器</h3><pre><code class="lang-java">public interface RoleMapper2 {
    @Select(&quot;select id, role_name as roleName, note from t_role where id = #{id}&quot;)
    public Role getRole(Long id);
}
</code></pre>
<h3 id="h3-5-3-xml-"><a name="5.3    对比XML方式和注解方式实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3    对比XML方式和注解方式实现映射器</h3><p>注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</p>
<p>这个接口也可以在XML中定义，例如只需将<code>mybatis-config.xml</code>中配置XML语句：</p>
<pre><code class="lang-xml">  &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
</code></pre>
<p>修改成下面的形式即可：</p>
<pre><code class="lang-xml">&lt;mapper class=&quot;com.ssm.learn.chapter3.mapper.RoleMapper2&quot;/&gt;
</code></pre>
<p>也可以使用<code>configuration</code>对象注册这个接口，比如：</p>
<pre><code class="lang-java">configuration.addMapper(RoleMapper2.class)；
</code></pre>
<h3 id="h3-5-4-code-sqlsession-code-sql"><a name="5.4    <code>SqlSession</code>发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4    <code>SqlSession</code>发送SQL</h3><pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;com.ssm.learn.chapter3.mapper.RoleMapper.getRole&quot;, 1L);
</code></pre>
<p><code>selectOne</code>方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为<code>getRole</code>的SQL，则可以简写为：</p>
<pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;getRole&quot;, 1L);
</code></pre>
<h3 id="h3-5-5-code-mapper-code-sql"><a name="5.5    用<code>Mapper</code>接口发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.5    用<code>Mapper</code>接口发送SQL</h3><p><code>SqlSession</code>还可以获取<code>Mapper</code>接口，通过<code>Mapper</code>接口发送SQL，代码如下：</p>
<pre><code class="lang-java">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
</code></pre>
<p>因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</p>
<h3 id="h3-5-6-sql-"><a name="5.6    对比两种发送SQL的方式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.6    对比两种发送SQL的方式</h3><ul>
<li><p>使用<code>SqlSession</code>直接发送</p>
</li><li><p><code>SqlSession</code>获取<code>Mapper</code>接口，再通过<code>Mapper</code>发送</p>
</li></ul>
<p>使用<code>Mapper</code>接口编程可以消除<code>SqlSession</code>带来的功能性代码，提高可读性。<code>SqlSession</code>需要<code>SQLid</code>，晦涩难懂，而<code>Mapper</code>更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用<code>Mapper</code>接口编程。</p>
<h2 id="h2-6-"><a name="6    生命周期" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    生命周期</h2><p>所谓生命周期就是每一个对象应该存活的时间。</p>
<h3 id="h3-6-1-code-sqlsessionfactorybuilder-code-"><a name="6.1    <code>SqlSessionFactoryBuilder</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    <code>SqlSessionFactoryBuilder</code></h3><p>其作用在于创建<code>SqlSessionFactory</code>，创建成功后就失去作用，所以它只能存在于创建<code>SqlSessionFactory</code>的方法中，而不能让其长期存在。</p>
<h3 id="h3-6-2-code-sqlsessionfactory-code-"><a name="6.2    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    <code>SqlSessionFactory</code></h3><p>可以被认为是数据库连接池，其作用是创建<code>SqlSession</code>接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个<code>SqlSessionFactory</code>可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</p>
<h3 id="h3-6-3-code-sqlsession-code-"><a name="6.3    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.3    <code>SqlSession</code></h3><p>相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至<code>SqlSessionFactory</code>，否则可能会导致数据库资源耗尽。</p>
<h3 id="h3-6-4-code-mapper-code-"><a name="6.4    <code>Mapper</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.4    <code>Mapper</code></h3><p>它由<code>SqlSession</code>创建，所以它的生命周期至多和<code>SqlSession</code>保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</p>
<h2 id="h2-7-"><a name="7    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    实例</h2><p>项目结构如图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/项目结构.png" alt="项目结构"></p>
<p><code>log4j.properties</code>文件，代码如下：</p>
<pre><code class="lang-properties">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
</code></pre>
<p><code>Role</code>类，代码如下：</p>
<pre><code class="lang-java">public class Role {
    private Long id;
    private String roleName;
    private String note;

    public Role() {}
    /*setter and getter*/
}
</code></pre>
<p><code>RoleMapper</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}
</code></pre>
<p><code>RoleMapper.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultType=&quot;role&quot;&gt;
        select id,role_name as roleName,note from t_role where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p><code>SqlSessionFactoryUtils</code>工具类，代码如下：</p>
<pre><code class="lang-java">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = &quot;mybatis-config.xml&quot;;
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
</code></pre>
<p>其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入<code>synchronized</code>关键字加锁，主要是防止在多线程中多次实例化<code>SqlSessionFactory</code>对象，保证唯一性。</p>
<p><code>mybatis-config.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!--type=&quot;POOLED&quot;表示采用MyBatis内部连接池--&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p><code>Chapter3Main</code>类，代码如下：</p>
<pre><code class="lang-java">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##1	持久层的概念和MyBatis的特点

持久层可以将业务数据存储到磁盘，具有长期存储能力。

Mybatis成功的原因：

- 不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；
- 提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；
- 提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。

##2    MyBatis的核心组件

Mybatis的核心组件分为4个部分：

- `SqlSessionFactoryBuilder`（构造器）:它会根据配置或者代码来生成`SqlSessionFactory`，采用的是分步构建的建造者模式。
- `SqlSessionFactory`（工厂接口）：依靠它来生成`SqlSession`，使用的是工厂模式。
- `SqlSession`（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。
- `SQL Mapper`（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。

MyBatis核心组件如图1所示:

![Mybatis核心组件](http://q8rsjstig.bkt.clouddn.com/note/Mybatis核心组件.jpg)

<center>图1 MyBatis核心组件</center>

##3	`SqlSessionFactory`

为了生成`SqlSessionFactory`，MyBatis提供了构造器`SqlSessionFactoryBuilder`，它提供了一个类`Configuration`作为引导类，采用了`builder`模式，具体的分步则是在`Configuration`类中完成。

当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过`Configuration`类对象构建整个MyBatis的上下文。`SqlSessionFactory`是一个接口，有两个实现类，一般由`DefaultSqlSessionFactory`去实现，它们之间的关系如图2所示：

![SqlSessionFactory的生成](http://q8rsjstig.bkt.clouddn.com/note/SqlSessionFactory的生成.jpg)

<center>图1 SqlSessionFactory与其实现类</center>

####3.1	使用XML构建`SqlSessionFactory`

在MyBatis中的XML分为两类：

- 一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境
- 一类是映射文件，用来配置映射关系、SQL、参数等信息

创建一份简易的基础配置文件，我们把它命名为`mybatis-config.xml`，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn/"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

生成`SqlSessionFactory`，代码如下：

```java
public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = "mybatis-config.xml";

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

##4	`SqlSession`

在MyBatis中，`SqlSession`是其核心接口，作用类似于`JDBC`中的`Connnection`对象，代表一个连接资源的启用。

具体而言，它的作用有3个：

- 获取Mapper接口。
- 发送SQL给数据库。
- 控制数据库事务。

创建方法如下：

```java
SqlSession sqlSession = SqlSessionFactory.openSession();
```

`SqlSession`控制数据库事务的方法，代码如下：

```java
SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
```

##5	映射器

映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：

- 描述映射规则
- 提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息
- 配置缓存
- 提供动态SQL

映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。

###5.1	用XML实现映射器

定义接口，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
   <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id}
   </select>
</mapper>
```

- mapper中namespace的值对应于所映射接口的全限定名
- select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型
- \#{id}表示传递进去的参数

MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。

###5.2	用注解实现映射器

```java
public interface RoleMapper2 {
    @Select("select id, role_name as roleName, note from t_role where id = #{id}")
    public Role getRole(Long id);
}
```

###5.3	对比XML方式和注解方式实现映射器

注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式

这个接口也可以在XML中定义，例如只需将`mybatis-config.xml`中配置XML语句：

```xml
  <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
```

修改成下面的形式即可：

```xml
<mapper class="com.ssm.learn.chapter3.mapper.RoleMapper2"/>
```

也可以使用`configuration`对象注册这个接口，比如：

```java
configuration.addMapper(RoleMapper2.class)；
```

###5.4	`SqlSession`发送SQL

```java
Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);
```

`selectOne`方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为`getRole`的SQL，则可以简写为：

```java
Role role = (Role)sqlSession.selectOne("getRole", 1L);
```

###5.5	用`Mapper`接口发送SQL

`SqlSession`还可以获取`Mapper`接口，通过`Mapper`接口发送SQL，代码如下：

```java
RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
```

因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。

###5.6	对比两种发送SQL的方式

- 使用`SqlSession`直接发送

- `SqlSession`获取`Mapper`接口，再通过`Mapper`发送

使用`Mapper`接口编程可以消除`SqlSession`带来的功能性代码，提高可读性。`SqlSession`需要`SQLid`，晦涩难懂，而`Mapper`更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用`Mapper`接口编程。

##6	生命周期

所谓生命周期就是每一个对象应该存活的时间。

###6.1	`SqlSessionFactoryBuilder`

其作用在于创建`SqlSessionFactory`，创建成功后就失去作用，所以它只能存在于创建`SqlSessionFactory`的方法中，而不能让其长期存在。

###6.2	`SqlSessionFactory`

可以被认为是数据库连接池，其作用是创建`SqlSession`接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个`SqlSessionFactory`可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。

###6.3	`SqlSession`

相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至`SqlSessionFactory`，否则可能会导致数据库资源耗尽。

###6.4	`Mapper`

它由`SqlSession`创建，所以它的生命周期至多和`SqlSession`保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。

##7	实例

项目结构如图：

![项目结构](http://q8rsjstig.bkt.clouddn.com/note/项目结构.png)

`log4j.properties`文件，代码如下：

```properties
log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
```

`Role`类，代码如下：

```java
public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}
```

`RoleMapper`接口，代码如下：

```java
public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List<Role> findRoles(String roleName);
}
```

`RoleMapper.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
    <insert id="insertRole" parameterType="role">
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    </insert>
    <delete id="deleteRole" parameterType="long">
        delete from t_role where id = #{id};
    </delete>
    <update id="updateRole" parameterType="role">
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    </update>
    <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id};
   </select>
    <select id="findRoles" parameterType="string" resultType="role">
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    </select>
</mapper>
```

`SqlSessionFactoryUtils`工具类，代码如下：

```java
public class SqlSessionFactoryUtils {
    private final static Class<SqlSessionFactoryUtils> LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
```

其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入`synchronized`关键字加锁，主要是防止在多线程中多次实例化`SqlSessionFactory`对象，保证唯一性。

`mybatis-config.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <!--配置事务管理器-->
            <transactionManager type="JDBC"></transactionManager>
            <!--配置数据源-->
            <dataSource type="POOLED"><!--type="POOLED"表示采用MyBatis内部连接池-->
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

`Chapter3Main`类，代码如下：

```java
public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting3.jpg(String), true(Boolean), true(Boolean), 3(Long), 2020-06-12 16:14:37.716(Timestamp), 3(Integer), true(Boolean), true(Boolean), 1(Integer), 3(Long)
2020-06-12 16:14:37.721 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:14:37.723 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:14:37.723 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 3(Long)
2020-06-12 16:14:37.724 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-06-12 16:14:37.734 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-12 16:14:37.735 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 3(Long), 1(Long), 3(Long), 3(Long), 3(Long), 7(Long), 3(Long), 8(Long)
2020-06-12 16:14:37.736 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-12 16:14:37.737 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:14:37.738 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 3(Long)
2020-06-12 16:14:37.739 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:14:37.989 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:14:37.990 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:14:37.988(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 270(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:14:37.992 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:14:41.903 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:14:41.903 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:14:41.904 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:14:41.904 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:14:41.910 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:14:41.911 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:41.911 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:14:41.912 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:14:41.913 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:41.913 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:14:41.914 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:41.915 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:41.915 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:14:41.916 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:14:41.920 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:14:41.920 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:14:41.919(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 20(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:14:41.922 DEBUG 12752 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:14:45.296 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:14:45.296 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 3(Long)
2020-06-12 16:14:45.301 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:14:45.304 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:14:45.304 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:14:45.305 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:15:13.009 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:15:13.010 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:15:13.012 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:15:13.014 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:15:13.015 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:15:13.019 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:15:13.450 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-12 16:15:13.452 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-12 16:15:13.454 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 0
2020-06-12 16:15:13.458 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-12 16:15:13.460 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 16:15:13.461 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-12 16:15:13.468 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 16:15:13.468 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 16:15:13.474 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:13.475 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:15:13.473(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 26(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:13.477 DEBUG 12752 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:15:24.644 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:24.645 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:24.643(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 1(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:24.658 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:15:25.211 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 16:15:25.212 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 16:15:25.213 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:15:25.221 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 16:15:25.221 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 16:15:25.223 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:15:25.226 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 16:15:25.227 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 16:15:25.234 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 16:15:25.236 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 16:15:25.237 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 16:15:25.245 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 16:15:25.267 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 16:15:25.268 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 16:15:25.270 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 16:15:25.273 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:15:25.274 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 16:15:25.311 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 16:15:25.312 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:15:25.313 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 16:15:25.347 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 16:15:28.607 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:28.608 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:28.605(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 19(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:28.609 DEBUG 12752 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:15:35.251 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:15:35.252 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 2(Long)
2020-06-12 16:15:35.253 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:15:35.257 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:35.258 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:35.257(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=2, status=2) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:35.258 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:15:35.280 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:15:35.280 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:15:35.282 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:15:35.282 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:15:35.287 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:15:35.288 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:35.288 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:15:35.290 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:15:35.291 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:35.291 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:15:35.292 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:15:35.293 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:35.294 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:15:35.299 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:15:35.304 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:35.305 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:35.303(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:35.306 DEBUG 12752 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:15:38.529 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:15:38.530 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 3(Long)
2020-06-12 16:15:38.531 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:15:38.535 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:38.536 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:38.535(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=3, status=2) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:38.536 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:15:38.548 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:15:38.548 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:15:38.550 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:15:38.550 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:15:38.559 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:15:38.561 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:38.561 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:15:38.564 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:15:38.566 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:38.566 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:15:38.567 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:15:38.568 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:38.568 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:15:38.569 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:15:38.572 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:38.572 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:38.571(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:38.573 DEBUG 12752 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:15:42.150 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:15:42.150 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 1(Long)
2020-06-12 16:15:42.151 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:15:42.156 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:42.156 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:42.155(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=2) }(String), 0:0:0:0:0:0:0:1(String), 3(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:42.157 DEBUG 12752 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:15:42.169 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:15:42.169 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:15:42.170 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:15:42.171 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:15:42.176 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 16:15:42.177 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:42.177 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:15:42.178 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:15:42.179 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:42.180 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:15:42.181 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:15:42.182 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:15:42.182 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:15:42.184 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:15:42.189 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:42.189 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:42.188(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 19(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:42.190 DEBUG 12752 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:15:55.471 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:15:55.472 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:15:55.47(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:15:55.472 DEBUG 12752 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:16:03.103 ERROR 12752 --- [http-nio-8889-exec-6] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8889-exec-6] Exception processing template "admin/article/打印窗口": Error resolving template [admin/article/打印窗口], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/article/打印窗口], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-12 16:16:03.105 ERROR 12752 --- [http-nio-8889-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/article/打印窗口], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [admin/article/打印窗口], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-12 16:17:42.656 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, create_time, update_time, color ) VALUES ( ?, ?, ?, ? ) 
2020-06-12 16:17:42.656 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: 测试标签(String), 2020-06-12 16:17:42.655(Timestamp), 2020-06-12 16:17:42.655(Timestamp), #D5F5E3(String)
2020-06-12 16:17:42.658 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-12 16:17:42.660 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, category_id, create_time, update_time, type, top, recommend, sort ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:17:42.661 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 测试文章(String), 测试文章(String), <p>测试文章测试文章测试文章测试文章测试文章</p>
(String), 测试文章测试文章测试文章测试文章测试文章(String), (String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), 14(Long), 2020-06-12 16:17:42.653(Timestamp), 2020-06-12 16:17:42.653(Timestamp), 1(Integer), false(Boolean), false(Boolean), 2(Integer)
2020-06-12 16:17:42.662 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-12 16:17:42.663 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-12 16:17:42.663 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 47(Long), 11(Long)
2020-06-12 16:17:42.664 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-12 16:17:42.804 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:17:42.804 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:17:42.803(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: Article(id=47, title=测试文章, summary=测试文章, content=<p>测试文章测试文章测试文章测试文章测试文章</p>
, textContent=测试文章测试文章测试文章测试文章测试文章, cover=, views=0, likes=0, comments=0, appreciable=false, commentable=true, published=true, authorId=null, categoryId=14, createTime=Fri Jun 12 16:17:42 CST 2020, updateTime=Fri Jun 12 16:17:42 CST 2020, type=1, category=null, tagList=[Tag(id=11, name=测试标签, createTime=Fri Jun 12 16:17:42 CST 2020, updateTime=Fri Jun 12 16:17:42 CST 2020, color=#D5F5E3, articleCount=null)], top=false, recommend=false, author=null, status=null, sort=2) }(String), 0:0:0:0:0:0:0:1(String), 149(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:17:42.805 DEBUG 12752 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:17:44.491 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:17:44.491 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:17:44.492 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:17:44.493 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:17:44.502 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:17:44.503 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:17:44.503 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:17:44.504 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:17:44.505 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:17:44.505 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:17:44.506 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:17:44.507 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:17:44.507 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:17:44.508 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:17:44.509 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:17:44.510 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 47(Long)
2020-06-12 16:17:44.511 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:17:44.518 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:17:44.519 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:17:44.517(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:17:44.520 DEBUG 12752 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:21:00.782  INFO 14348 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 14348 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 16:21:00.786 DEBUG 14348 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 16:21:00.787  INFO 14348 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 16:21:00.828  INFO 14348 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 16:21:00.828  INFO 14348 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 16:21:01.679  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:21:01.681  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:21:01.755  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 70ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 16:21:01.761  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:21:01.761  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:21:01.778  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 16:21:01.794  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:21:01.796  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 16:21:01.818  INFO 14348 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 16:21:01.818  INFO 14348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 Redis repository interfaces.
2020-06-12 16:21:02.235  INFO 14348 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:21:02.385  INFO 14348 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:21:02.388  INFO 14348 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@d7dc3c7' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:21:02.390  INFO 14348 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:21:02.397  INFO 14348 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:21:02.409  INFO 14348 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$c2feea5e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:21:02.811  INFO 14348 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 16:21:02.819  INFO 14348 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 16:21:02.819  INFO 14348 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 16:21:02.929  INFO 14348 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 16:21:02.929  INFO 14348 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2101 ms
2020-06-12 16:21:03.100  INFO 14348 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 16:21:03.102  INFO 14348 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 16:21:03.118 DEBUG 14348 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 16:21:03.236  INFO 14348 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 16:21:03.676  INFO 14348 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 16:21:05.251  WARN 14348 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:21:05.251  WARN 14348 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:21:05.252  WARN 14348 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:21:05.252  WARN 14348 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:21:05.277  WARN 14348 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:21:05.278  WARN 14348 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:21:05.278  WARN 14348 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:21:05.278  WARN 14348 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:21:05.415  INFO 14348 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 16:21:05.565  WARN 14348 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 16:21:06.569  INFO 14348 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 16:21:06.585  INFO 14348 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 16:21:06.723  INFO 14348 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7efe8a03, org.springframework.security.web.context.SecurityContextPersistenceFilter@e7a5b84, org.springframework.security.web.header.HeaderWriterFilter@6230f694, org.springframework.security.web.authentication.logout.LogoutFilter@3c564fc9, site.alanliang.geekblog.security.ValidateCodeFilter@efbe1a5, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@78adb0e6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@316d9cfe, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@a4fc0fb, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4400241d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7636c290, org.springframework.security.web.session.SessionManagementFilter@3d4f9c21, org.springframework.security.web.access.ExceptionTranslationFilter@178fc190, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@cc51f13]
2020-06-12 16:21:06.807  INFO 14348 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 16:21:07.220  INFO 14348 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 16:21:07.233  INFO 14348 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 16:21:07.283  INFO 14348 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 16:21:07.443  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 16:21:07.444  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 16:21:07.448  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 16:21:07.449  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 16:21:07.450  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 16:21:07.451  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 16:21:07.452  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 16:21:07.454  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 16:21:07.455  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 16:21:07.481  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 16:21:07.490  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 16:21:07.491  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 16:21:07.493  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 16:21:07.494  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 16:21:07.496  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 16:21:07.498  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 16:21:07.499  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 16:21:07.501  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 16:21:07.503  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 16:21:07.504  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 16:21:07.505  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 16:21:07.507  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 16:21:07.509  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 16:21:07.514  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 16:21:07.515  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 16:21:07.517  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 16:21:07.517  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 16:21:07.520  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 16:21:07.521  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 16:21:07.524  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 16:21:07.525  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 16:21:07.528  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 16:21:07.530  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 16:21:07.532  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 16:21:07.535  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 16:21:07.537  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 16:21:07.538  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 16:21:07.540  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 16:21:07.541  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 16:21:07.541  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 16:21:07.542  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 16:21:07.544  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 16:21:07.545  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 16:21:07.546  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 16:21:07.547  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 16:21:07.553  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 16:21:07.555  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 16:21:07.556  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 16:21:07.557  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 16:21:07.559  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 16:21:07.560  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 16:21:07.560  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 16:21:07.561  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 16:21:07.562  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 16:21:07.564  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 16:21:07.566  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 16:21:07.567  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 16:21:07.567  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 16:21:07.568  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 16:21:07.569  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 16:21:07.570  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 16:21:07.571  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 16:21:07.575  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 16:21:07.577  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 16:21:07.578  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 16:21:07.579  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 16:21:07.580  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 16:21:07.580  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 16:21:07.583  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 16:21:07.583  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 16:21:07.584  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 16:21:07.585  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 16:21:07.586  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 16:21:07.587  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 16:21:07.588  INFO 14348 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 16:21:07.612  INFO 14348 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 16:21:07.615  INFO 14348 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.644 seconds (JVM running for 8.765)
2020-06-12 16:21:12.170  INFO 14348 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 16:21:12.170  INFO 14348 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 16:21:12.179  INFO 14348 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-06-12 16:21:12.248 DEBUG 14348 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:21:12.333 DEBUG 14348 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:21:12.346 DEBUG 14348 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:21:12.354 DEBUG 14348 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:21:12.358 DEBUG 14348 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:21:12.366 DEBUG 14348 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:21:18.644 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:21:18.646 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:21:18.649 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:21:18.650 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:21:18.651 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:21:18.656 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:21:18.754  INFO 14348 --- [http-nio-8889-exec-3] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 16:21:20.904 DEBUG 14348 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:21:20.909 DEBUG 14348 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:21:20.899(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:21:20.915 DEBUG 14348 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:21:21.269  INFO 14348 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 16:21:21.270  INFO 14348 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 16:21:22.010 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 16:21:22.014 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 16:21:22.015 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:21:22.040 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 16:21:22.041 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 16:21:22.044 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:21:22.051 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 16:21:22.053 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 16:21:22.056 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 16:21:22.057 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 16:21:22.058 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 16:21:22.064 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 16:21:22.077 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 16:21:22.079 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 16:21:22.081 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 4
2020-06-12 16:21:22.089 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:21:22.092 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 16:21:22.125 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 16:21:22.126 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:21:22.128 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 16:21:22.158 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 16:21:22.163 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:21:22.164 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:21:22.167 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:21:22.169 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:21:22.170 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 16:13:59.0(Timestamp), 2020-06-12 16:21:22.167(Timestamp)
2020-06-12 16:21:22.171 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:21:22.172 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:21:22.172 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:21:22.175 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:21:22.179 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:21:22.180 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 16:13:59.0(Timestamp), 2020-06-12 16:21:22.176(Timestamp)
2020-06-12 16:21:22.182 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:21:22.185 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:21:22.185 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:21:22.189 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:21:22.191 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:21:22.193 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 16:13:59.0(Timestamp), 2020-06-12 16:21:22.19(Timestamp)
2020-06-12 16:21:22.196 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:21:22.199 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:21:22.199 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:21:22.203 DEBUG 14348 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:21:22.205 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:21:22.205 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 16:13:59.0(Timestamp), 2020-06-12 16:21:22.203(Timestamp)
2020-06-12 16:21:22.206 DEBUG 14348 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:21:25.606 DEBUG 14348 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:21:25.610 DEBUG 14348 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:21:25.605(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 30(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:21:25.614 DEBUG 14348 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:21:28.990 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.deleteById       : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-06-12 16:21:28.993 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.deleteById       : ==> Parameters: 47(Long)
2020-06-12 16:21:28.994 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.deleteById       : <==    Updates: 1
2020-06-12 16:21:29.030 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:21:29.031 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:21:29.03(Timestamp), 删除文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.remove()(String), { id: 47 }(String), 0:0:0:0:0:0:0:1(String), 37(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:21:29.032 DEBUG 14348 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:24:07.235  INFO 7436 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 7436 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 16:24:07.238 DEBUG 7436 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 16:24:07.239  INFO 7436 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 16:24:07.284  INFO 7436 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 16:24:07.284  INFO 7436 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 16:24:08.111  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:24:08.113  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:24:08.180  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 63ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 16:24:08.184  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:24:08.185  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 16:24:08.196  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 16:24:08.207  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 16:24:08.208  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 16:24:08.224  INFO 7436 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 16:24:08.224  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 9ms. Found 0 Redis repository interfaces.
2020-06-12 16:24:08.544  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:24:08.690  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:24:08.692  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@3b0a6a0' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:24:08.693  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:24:08.699  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:24:08.710  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$d686916c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 16:24:09.036  INFO 7436 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 16:24:09.044  INFO 7436 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 16:24:09.044  INFO 7436 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 16:24:09.138  INFO 7436 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 16:24:09.138  INFO 7436 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1854 ms
2020-06-12 16:24:09.259  INFO 7436 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 16:24:09.260  INFO 7436 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 16:24:09.272 DEBUG 7436 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 16:24:09.360  INFO 7436 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 16:24:09.693  INFO 7436 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 16:24:11.078  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:24:11.079  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:24:11.079  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:24:11.079  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:24:11.102  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:24:11.102  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:24:11.102  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:24:11.102  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 16:24:11.222  INFO 7436 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 16:24:11.370  WARN 7436 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 16:24:12.432  INFO 7436 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 16:24:12.447  INFO 7436 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 16:24:12.602  INFO 7436 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6383a5a1, org.springframework.security.web.context.SecurityContextPersistenceFilter@149e3e1e, org.springframework.security.web.header.HeaderWriterFilter@134f25e2, org.springframework.security.web.authentication.logout.LogoutFilter@49d7eca5, site.alanliang.geekblog.security.ValidateCodeFilter@3efbf823, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2f99ea76, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4831f234, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@43760983, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@6ba7b817, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@8f2fe52, org.springframework.security.web.session.SessionManagementFilter@21fb2453, org.springframework.security.web.access.ExceptionTranslationFilter@1642fd1f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@13ef6227]
2020-06-12 16:24:12.673  INFO 7436 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 16:24:13.112  INFO 7436 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 16:24:13.124  INFO 7436 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 16:24:13.173  INFO 7436 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 16:24:13.342  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 16:24:13.343  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 16:24:13.346  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 16:24:13.347  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 16:24:13.348  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 16:24:13.350  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 16:24:13.351  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 16:24:13.355  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 16:24:13.356  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 16:24:13.385  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 16:24:13.394  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 16:24:13.396  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 16:24:13.398  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 16:24:13.399  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 16:24:13.402  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 16:24:13.403  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 16:24:13.405  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 16:24:13.407  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 16:24:13.409  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 16:24:13.410  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 16:24:13.412  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 16:24:13.415  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 16:24:13.416  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 16:24:13.419  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 16:24:13.420  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 16:24:13.421  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 16:24:13.421  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 16:24:13.423  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 16:24:13.424  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 16:24:13.427  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 16:24:13.428  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 16:24:13.431  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 16:24:13.433  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 16:24:13.435  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 16:24:13.437  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 16:24:13.440  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 16:24:13.440  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 16:24:13.442  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 16:24:13.442  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 16:24:13.443  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 16:24:13.444  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 16:24:13.446  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 16:24:13.447  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 16:24:13.449  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 16:24:13.450  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 16:24:13.457  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 16:24:13.459  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 16:24:13.461  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 16:24:13.464  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 16:24:13.466  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 16:24:13.468  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 16:24:13.472  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 16:24:13.473  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 16:24:13.474  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 16:24:13.477  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 16:24:13.480  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 16:24:13.480  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 16:24:13.481  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 16:24:13.481  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 16:24:13.483  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 16:24:13.484  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 16:24:13.485  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 16:24:13.489  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 16:24:13.492  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 16:24:13.493  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 16:24:13.494  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 16:24:13.494  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 16:24:13.495  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 16:24:13.497  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 16:24:13.498  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 16:24:13.499  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 16:24:13.500  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 16:24:13.502  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 16:24:13.503  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 16:24:13.504  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 16:24:13.532  INFO 7436 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 16:24:13.534  INFO 7436 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.123 seconds (JVM running for 8.113)
2020-06-12 16:24:17.528  INFO 7436 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 16:24:17.529  INFO 7436 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 16:24:17.546  INFO 7436 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2020-06-12 16:24:17.679 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:24:17.679 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:24:17.840 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:24:17.840 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:24:17.863 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:24:17.863 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:24:17.879 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:24:17.879 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:24:17.886 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:24:17.886 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:24:17.898 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:24:17.899 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:24:22.937 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 16:24:22.938 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 16:24:22.940 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 16:24:22.941 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 16:24:22.941 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 16:24:22.947 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 16:24:23.044  INFO 7436 --- [http-nio-8889-exec-7] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 16:24:25.209 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:24:25.216 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:24:25.203(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:24:25.219 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:24:25.545  INFO 7436 --- [http-nio-8889-exec-2] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 16:24:25.547  INFO 7436 --- [http-nio-8889-exec-2] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 16:24:26.020 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 16:24:26.023 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 16:24:26.027 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 16:24:26.263 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 16:24:26.265 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 16:24:26.269 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:24:26.278 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 16:24:26.280 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 16:24:26.284 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 16:24:26.291 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 16:24:26.291 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 16:24:26.292 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 16:24:26.300 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 16:24:26.301 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 16:24:26.302 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:24:26.308 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 16:24:26.309 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 16:24:26.311 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 16:24:26.321 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 16:24:26.321 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 16:24:26.322 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 16:24:26.326 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 16:24:26.327 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 16:24:26.327 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:24:26.334 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 16:24:26.335 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 16:24:26.336 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:24:26.340 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 16:24:26.342 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 16:24:26.344 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 16:24:26.346 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 16:24:26.348 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 16:24:26.354 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 16:24:26.356 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 16:24:26.357 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 16:24:26.391 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 16:24:26.396 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 16:24:26.397 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 16:24:26.401 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 16:24:26.406 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 16:24:26.407 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 16:24:26.408 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 16:24:26.415 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 16:24:26.417 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 16:24:26.418 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 16:24:26.424 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:24:26.428 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 16:24:26.457 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 16:24:26.458 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:24:26.458 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 16:24:26.493 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 16:24:26.494 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:24:26.495 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:24:26.499 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:24:26.504 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:24:26.505 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 16:21:21.0(Timestamp), 2020-06-12 16:24:26.501(Timestamp)
2020-06-12 16:24:26.506 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:24:26.507 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:24:26.507 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:24:26.510 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:24:26.511 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:24:26.512 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 16:21:21.0(Timestamp), 2020-06-12 16:24:26.51(Timestamp)
2020-06-12 16:24:26.513 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:24:26.514 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:24:26.514 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:24:26.521 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:24:26.522 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:24:26.523 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 16:21:21.0(Timestamp), 2020-06-12 16:24:26.521(Timestamp)
2020-06-12 16:24:26.524 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:24:26.525 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:24:26.525 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:24:26.528 DEBUG 7436 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:24:26.530 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:24:26.530 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 16:21:21.0(Timestamp), 2020-06-12 16:24:26.529(Timestamp)
2020-06-12 16:24:26.534 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:24:26.541 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 16:24:26.542 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 16:24:26.543 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 16:24:38.892 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:24:38.893 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:24:38.893 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 16:24:38.894 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 16:24:38.897 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 16:24:38.899 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-12 16:25:01.523 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, author_id, category_id, create_time, update_time, type, top, recommend, status, sort ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:25:01.525 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 测试文章(String), 测试文章(String), <p>测试文章测试文章测试文章测试文章测试文章</p>
(String), 测试文章测试文章测试文章测试文章测试文章(String), (String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), 1(Long), 14(Long), 2020-06-12 16:25:01.52(Timestamp), 2020-06-12 16:25:01.52(Timestamp), 1(Integer), false(Boolean), false(Boolean), 1(Integer), 2(Integer)
2020-06-12 16:25:01.527 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-12 16:25:01.529 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-12 16:25:01.530 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 48(Long), 11(Long)
2020-06-12 16:25:01.531 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-12 16:25:01.690 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:25:01.693 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:25:01.689(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: Article(id=48, title=测试文章, summary=测试文章, content=<p>测试文章测试文章测试文章测试文章测试文章</p>
, textContent=测试文章测试文章测试文章测试文章测试文章, cover=, views=0, likes=0, comments=0, appreciable=false, commentable=true, published=true, authorId=1, categoryId=14, createTime=Fri Jun 12 16:25:01 CST 2020, updateTime=Fri Jun 12 16:25:01 CST 2020, type=1, category=null, tagList=[Tag(id=11, name=测试标签, createTime=null, updateTime=null, color=null, articleCount=null)], top=false, recommend=false, author=null, status=1, sort=2) }(String), 0:0:0:0:0:0:0:1(String), 169(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:25:01.694 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:25:03.497 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:25:03.497 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:25:03.511 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:25:03.514 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:25:03.534 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:25:03.539 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:25:03.544 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:25:03.546 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:25:03.548 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:25:03.548 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:25:03.550 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:25:03.552 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:25:03.552 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:25:03.553 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:25:03.555 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:25:03.555 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:25:03.559 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:25:03.566 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:25:03.567 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:25:03.564(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 122(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:25:03.568 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:01.735 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:26:01.738 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 48(Long)
2020-06-12 16:26:01.738 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:26:01.744 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:01.745 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:01.743(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=48, status=2) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:01.746 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:01.765 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:26:01.765 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:26:01.767 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:26:01.767 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:26:01.773 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:26:01.776 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:01.776 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:26:01.778 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:26:01.780 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:01.780 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:26:01.782 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:01.782 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:01.782 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:26:01.784 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:01.784 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:01.785 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:26:01.785 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:26:01.789 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:01.789 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:01.788(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 25(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:01.796 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:06.462 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-12 16:26:06.464 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-12 16:26:06.466 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-12 16:26:06.472 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-12 16:26:06.473 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 16:26:06.476 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 1
2020-06-12 16:26:06.484 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 16:26:06.485 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 16:26:06.487 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-12 16:26:06.488 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 16:26:06.493 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 2
2020-06-12 16:26:06.496 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:06.496 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:26:06.497 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:26:06.498 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:06.498 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:26:06.499 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:26:06.505 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:06.508 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:26:06.504(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 49(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:06.512 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:26:17.953 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:26:17.954 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 3(Long)
2020-06-12 16:26:17.958 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:26:17.964 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:17.964 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:26:17.966 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:21.048 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:26:21.050 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识Mybatis核心组件(String), JavaEE互联网轻量级框架整合开发第3章(String), <h2 id="h2-1-mybatis-"><a name="1    持久层的概念和MyBatis的特点" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    持久层的概念和MyBatis的特点</h2><p>持久层可以将业务数据存储到磁盘，具有长期存储能力。</p>
<p>Mybatis成功的原因：</p>
<ul>
<li>不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</li><li>提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</li><li>提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</li></ul>
<h2 id="h2-2-mybatis-"><a name="2    MyBatis的核心组件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    MyBatis的核心组件</h2><p>Mybatis的核心组件分为4个部分：</p>
<ul>
<li><code>SqlSessionFactoryBuilder</code>（构造器）:它会根据配置或者代码来生成<code>SqlSessionFactory</code>，采用的是分步构建的建造者模式。</li><li><code>SqlSessionFactory</code>（工厂接口）：依靠它来生成<code>SqlSession</code>，使用的是工厂模式。</li><li><code>SqlSession</code>（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</li><li><code>SQL Mapper</code>（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</li></ul>
<p>MyBatis核心组件如图1所示:</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Mybatis核心组件.jpg" alt="Mybatis核心组件"></p>
<p>&lt;center&gt;图1 MyBatis核心组件&lt;/center&gt;

</p>
<h2 id="h2-3-code-sqlsessionfactory-code-"><a name="3    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    <code>SqlSessionFactory</code></h2><p>为了生成<code>SqlSessionFactory</code>，MyBatis提供了构造器<code>SqlSessionFactoryBuilder</code>，它提供了一个类<code>Configuration</code>作为引导类，采用了<code>builder</code>模式，具体的分步则是在<code>Configuration</code>类中完成。</p>
<p>当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过<code>Configuration</code>类对象构建整个MyBatis的上下文。<code>SqlSessionFactory</code>是一个接口，有两个实现类，一般由<code>DefaultSqlSessionFactory</code>去实现，它们之间的关系如图2所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/SqlSessionFactory的生成.jpg" alt="SqlSessionFactory的生成"></p>
<p>&lt;center&gt;图1 SqlSessionFactory与其实现类&lt;/center&gt;

</p>
<h4 id="h4-3-1-xml-code-sqlsessionfactory-code-"><a name="3.1    使用XML构建<code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1    使用XML构建<code>SqlSessionFactory</code></h4><p>在MyBatis中的XML分为两类：</p>
<ul>
<li>一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</li><li>一类是映射文件，用来配置映射关系、SQL、参数等信息</li></ul>
<p>创建一份简易的基础配置文件，我们把它命名为<code>mybatis-config.xml</code>，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn/&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>生成<code>SqlSessionFactory</code>，代码如下：</p>
<pre><code class="lang-java">public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = &quot;mybatis-config.xml&quot;;

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<h2 id="h2-4-code-sqlsession-code-"><a name="4    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    <code>SqlSession</code></h2><p>在MyBatis中，<code>SqlSession</code>是其核心接口，作用类似于<code>JDBC</code>中的<code>Connnection</code>对象，代表一个连接资源的启用。</p>
<p>具体而言，它的作用有3个：</p>
<ul>
<li>获取Mapper接口。</li><li>发送SQL给数据库。</li><li>控制数据库事务。</li></ul>
<p>创建方法如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = SqlSessionFactory.openSession();
</code></pre>
<p><code>SqlSession</code>控制数据库事务的方法，代码如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
</code></pre>
<h2 id="h2-5-"><a name="5    映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    映射器</h2><p>映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</p>
<ul>
<li>描述映射规则</li><li>提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</li><li>配置缓存</li><li>提供动态SQL</li></ul>
<p>映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</p>
<h3 id="h3-5-1-xml-"><a name="5.1    用XML实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    用XML实现映射器</h3><p>定义接口，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>mapper中namespace的值对应于所映射接口的全限定名</li><li>select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</li><li>#{id}表示传递进去的参数</li></ul>
<p>MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</p>
<h3 id="h3-5-2-"><a name="5.2    用注解实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2    用注解实现映射器</h3><pre><code class="lang-java">public interface RoleMapper2 {
    @Select(&quot;select id, role_name as roleName, note from t_role where id = #{id}&quot;)
    public Role getRole(Long id);
}
</code></pre>
<h3 id="h3-5-3-xml-"><a name="5.3    对比XML方式和注解方式实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3    对比XML方式和注解方式实现映射器</h3><p>注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</p>
<p>这个接口也可以在XML中定义，例如只需将<code>mybatis-config.xml</code>中配置XML语句：</p>
<pre><code class="lang-xml">  &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
</code></pre>
<p>修改成下面的形式即可：</p>
<pre><code class="lang-xml">&lt;mapper class=&quot;com.ssm.learn.chapter3.mapper.RoleMapper2&quot;/&gt;
</code></pre>
<p>也可以使用<code>configuration</code>对象注册这个接口，比如：</p>
<pre><code class="lang-java">configuration.addMapper(RoleMapper2.class)；
</code></pre>
<h3 id="h3-5-4-code-sqlsession-code-sql"><a name="5.4    <code>SqlSession</code>发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4    <code>SqlSession</code>发送SQL</h3><pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;com.ssm.learn.chapter3.mapper.RoleMapper.getRole&quot;, 1L);
</code></pre>
<p><code>selectOne</code>方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为<code>getRole</code>的SQL，则可以简写为：</p>
<pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;getRole&quot;, 1L);
</code></pre>
<h3 id="h3-5-5-code-mapper-code-sql"><a name="5.5    用<code>Mapper</code>接口发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.5    用<code>Mapper</code>接口发送SQL</h3><p><code>SqlSession</code>还可以获取<code>Mapper</code>接口，通过<code>Mapper</code>接口发送SQL，代码如下：</p>
<pre><code class="lang-java">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
</code></pre>
<p>因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</p>
<h3 id="h3-5-6-sql-"><a name="5.6    对比两种发送SQL的方式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.6    对比两种发送SQL的方式</h3><ul>
<li><p>使用<code>SqlSession</code>直接发送</p>
</li><li><p><code>SqlSession</code>获取<code>Mapper</code>接口，再通过<code>Mapper</code>发送</p>
</li></ul>
<p>使用<code>Mapper</code>接口编程可以消除<code>SqlSession</code>带来的功能性代码，提高可读性。<code>SqlSession</code>需要<code>SQLid</code>，晦涩难懂，而<code>Mapper</code>更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用<code>Mapper</code>接口编程。</p>
<h2 id="h2-6-"><a name="6    生命周期" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    生命周期</h2><p>所谓生命周期就是每一个对象应该存活的时间。</p>
<h3 id="h3-6-1-code-sqlsessionfactorybuilder-code-"><a name="6.1    <code>SqlSessionFactoryBuilder</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    <code>SqlSessionFactoryBuilder</code></h3><p>其作用在于创建<code>SqlSessionFactory</code>，创建成功后就失去作用，所以它只能存在于创建<code>SqlSessionFactory</code>的方法中，而不能让其长期存在。</p>
<h3 id="h3-6-2-code-sqlsessionfactory-code-"><a name="6.2    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    <code>SqlSessionFactory</code></h3><p>可以被认为是数据库连接池，其作用是创建<code>SqlSession</code>接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个<code>SqlSessionFactory</code>可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</p>
<h3 id="h3-6-3-code-sqlsession-code-"><a name="6.3    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.3    <code>SqlSession</code></h3><p>相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至<code>SqlSessionFactory</code>，否则可能会导致数据库资源耗尽。</p>
<h3 id="h3-6-4-code-mapper-code-"><a name="6.4    <code>Mapper</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.4    <code>Mapper</code></h3><p>它由<code>SqlSession</code>创建，所以它的生命周期至多和<code>SqlSession</code>保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</p>
<h2 id="h2-7-"><a name="7    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    实例</h2><p>项目结构如图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/项目结构.png" alt="项目结构"></p>
<p><code>log4j.properties</code>文件，代码如下：</p>
<pre><code class="lang-properties">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
</code></pre>
<p><code>Role</code>类，代码如下：</p>
<pre><code class="lang-java">public class Role {
    private Long id;
    private String roleName;
    private String note;

    public Role() {}
    /*setter and getter*/
}
</code></pre>
<p><code>RoleMapper</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}
</code></pre>
<p><code>RoleMapper.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultType=&quot;role&quot;&gt;
        select id,role_name as roleName,note from t_role where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p><code>SqlSessionFactoryUtils</code>工具类，代码如下：</p>
<pre><code class="lang-java">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = &quot;mybatis-config.xml&quot;;
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
</code></pre>
<p>其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入<code>synchronized</code>关键字加锁，主要是防止在多线程中多次实例化<code>SqlSessionFactory</code>对象，保证唯一性。</p>
<p><code>mybatis-config.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!--type=&quot;POOLED&quot;表示采用MyBatis内部连接池--&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p><code>Chapter3Main</code>类，代码如下：</p>
<pre><code class="lang-java">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##1	持久层的概念和MyBatis的特点

持久层可以将业务数据存储到磁盘，具有长期存储能力。

Mybatis成功的原因：

- 不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；
- 提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；
- 提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。

##2    MyBatis的核心组件

Mybatis的核心组件分为4个部分：

- `SqlSessionFactoryBuilder`（构造器）:它会根据配置或者代码来生成`SqlSessionFactory`，采用的是分步构建的建造者模式。
- `SqlSessionFactory`（工厂接口）：依靠它来生成`SqlSession`，使用的是工厂模式。
- `SqlSession`（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。
- `SQL Mapper`（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。

MyBatis核心组件如图1所示:

![Mybatis核心组件](http://q8rsjstig.bkt.clouddn.com/note/Mybatis核心组件.jpg)

<center>图1 MyBatis核心组件</center>

##3	`SqlSessionFactory`

为了生成`SqlSessionFactory`，MyBatis提供了构造器`SqlSessionFactoryBuilder`，它提供了一个类`Configuration`作为引导类，采用了`builder`模式，具体的分步则是在`Configuration`类中完成。

当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过`Configuration`类对象构建整个MyBatis的上下文。`SqlSessionFactory`是一个接口，有两个实现类，一般由`DefaultSqlSessionFactory`去实现，它们之间的关系如图2所示：

![SqlSessionFactory的生成](http://q8rsjstig.bkt.clouddn.com/note/SqlSessionFactory的生成.jpg)

<center>图1 SqlSessionFactory与其实现类</center>

####3.1	使用XML构建`SqlSessionFactory`

在MyBatis中的XML分为两类：

- 一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境
- 一类是映射文件，用来配置映射关系、SQL、参数等信息

创建一份简易的基础配置文件，我们把它命名为`mybatis-config.xml`，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn/"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

生成`SqlSessionFactory`，代码如下：

```java
public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = "mybatis-config.xml";

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

##4	`SqlSession`

在MyBatis中，`SqlSession`是其核心接口，作用类似于`JDBC`中的`Connnection`对象，代表一个连接资源的启用。

具体而言，它的作用有3个：

- 获取Mapper接口。
- 发送SQL给数据库。
- 控制数据库事务。

创建方法如下：

```java
SqlSession sqlSession = SqlSessionFactory.openSession();
```

`SqlSession`控制数据库事务的方法，代码如下：

```java
SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
```

##5	映射器

映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：

- 描述映射规则
- 提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息
- 配置缓存
- 提供动态SQL

映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。

###5.1	用XML实现映射器

定义接口，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
   <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id}
   </select>
</mapper>
```

- mapper中namespace的值对应于所映射接口的全限定名
- select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型
- \#{id}表示传递进去的参数

MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。

###5.2	用注解实现映射器

```java
public interface RoleMapper2 {
    @Select("select id, role_name as roleName, note from t_role where id = #{id}")
    public Role getRole(Long id);
}
```

###5.3	对比XML方式和注解方式实现映射器

注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式

这个接口也可以在XML中定义，例如只需将`mybatis-config.xml`中配置XML语句：

```xml
  <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
```

修改成下面的形式即可：

```xml
<mapper class="com.ssm.learn.chapter3.mapper.RoleMapper2"/>
```

也可以使用`configuration`对象注册这个接口，比如：

```java
configuration.addMapper(RoleMapper2.class)；
```

###5.4	`SqlSession`发送SQL

```java
Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);
```

`selectOne`方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为`getRole`的SQL，则可以简写为：

```java
Role role = (Role)sqlSession.selectOne("getRole", 1L);
```

###5.5	用`Mapper`接口发送SQL

`SqlSession`还可以获取`Mapper`接口，通过`Mapper`接口发送SQL，代码如下：

```java
RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
```

因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。

###5.6	对比两种发送SQL的方式

- 使用`SqlSession`直接发送

- `SqlSession`获取`Mapper`接口，再通过`Mapper`发送

使用`Mapper`接口编程可以消除`SqlSession`带来的功能性代码，提高可读性。`SqlSession`需要`SQLid`，晦涩难懂，而`Mapper`更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用`Mapper`接口编程。

##6	生命周期

所谓生命周期就是每一个对象应该存活的时间。

###6.1	`SqlSessionFactoryBuilder`

其作用在于创建`SqlSessionFactory`，创建成功后就失去作用，所以它只能存在于创建`SqlSessionFactory`的方法中，而不能让其长期存在。

###6.2	`SqlSessionFactory`

可以被认为是数据库连接池，其作用是创建`SqlSession`接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个`SqlSessionFactory`可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。

###6.3	`SqlSession`

相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至`SqlSessionFactory`，否则可能会导致数据库资源耗尽。

###6.4	`Mapper`

它由`SqlSession`创建，所以它的生命周期至多和`SqlSession`保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。

##7	实例

项目结构如图：

![项目结构](http://q8rsjstig.bkt.clouddn.com/note/项目结构.png)

`log4j.properties`文件，代码如下：

```properties
log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
```

`Role`类，代码如下：

```java
public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}
```

`RoleMapper`接口，代码如下：

```java
public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List<Role> findRoles(String roleName);
}
```

`RoleMapper.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
    <insert id="insertRole" parameterType="role">
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    </insert>
    <delete id="deleteRole" parameterType="long">
        delete from t_role where id = #{id};
    </delete>
    <update id="updateRole" parameterType="role">
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    </update>
    <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id};
   </select>
    <select id="findRoles" parameterType="string" resultType="role">
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    </select>
</mapper>
```

`SqlSessionFactoryUtils`工具类，代码如下：

```java
public class SqlSessionFactoryUtils {
    private final static Class<SqlSessionFactoryUtils> LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
```

其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入`synchronized`关键字加锁，主要是防止在多线程中多次实例化`SqlSessionFactory`对象，保证唯一性。

`mybatis-config.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <!--配置事务管理器-->
            <transactionManager type="JDBC"></transactionManager>
            <!--配置数据源-->
            <dataSource type="POOLED"><!--type="POOLED"表示采用MyBatis内部连接池-->
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

`Chapter3Main`类，代码如下：

```java
public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting3.jpg(String), true(Boolean), true(Boolean), true(Boolean), 3(Long), 2020-06-12 16:26:21.046(Timestamp), 3(Integer), true(Boolean), true(Boolean), 1(Integer), 3(Long)
2020-06-12 16:26:21.053 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:26:21.057 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:26:21.058 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 3(Long)
2020-06-12 16:26:21.060 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-06-12 16:26:21.088 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-12 16:26:21.090 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 3(Long), 1(Long), 3(Long), 3(Long), 3(Long), 7(Long), 3(Long), 8(Long)
2020-06-12 16:26:21.091 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-12 16:26:21.294 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:21.294 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:21.292(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 242(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:21.296 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:23.051 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:26:23.051 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:26:23.057 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:26:23.057 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:26:23.065 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:26:23.066 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:23.067 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:26:23.068 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:26:23.074 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:23.075 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:26:23.076 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:23.077 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:23.078 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:26:23.080 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:23.082 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:23.082 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:26:23.083 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:26:23.093 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:23.094 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:23.092(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 54(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:23.095 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:27.342 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:26:27.342 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 1(Long)
2020-06-12 16:26:27.343 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:26:27.349 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:27.349 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:27.348(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=2) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:27.350 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:27.365 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:26:27.365 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:26:27.367 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:26:27.367 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:26:27.383 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:26:27.384 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:27.384 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:26:27.386 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:26:27.388 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:27.388 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:26:27.390 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:27.394 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:27.394 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:26:27.396 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:27.397 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:27.397 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:26:27.398 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:26:27.401 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:27.402 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:27.401(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 38(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:27.404 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:30.520 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:26:30.520 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-12 16:26:30.522 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:26:30.526 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:30.526 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:26:30.528 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:30.645 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:26:30.645 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:26:30.648 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-12 16:26:33.901 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:26:33.904 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://cdn.alanliang.site/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), true(Boolean), 14(Long), 2020-06-12 16:26:33.899(Timestamp), 2(Integer), true(Boolean), true(Boolean), 1(Integer), 1(Long)
2020-06-12 16:26:33.906 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:26:33.908 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:26:33.908 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-06-12 16:26:33.909 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-06-12 16:26:33.921 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-12 16:26:33.921 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-06-12 16:26:33.922 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-12 16:26:34.047 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:34.047 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:34.046(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 146(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:34.048 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:35.756 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:26:35.756 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:26:35.757 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:26:35.757 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:26:35.763 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:26:35.764 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:35.764 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:26:35.767 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:26:35.772 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:35.773 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:26:35.775 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:35.776 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:35.777 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:26:35.778 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:35.779 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:35.779 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:26:35.780 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:26:35.787 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:35.788 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:35.783(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 33(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:35.790 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:43.262 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:26:43.262 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 3(Long)
2020-06-12 16:26:43.263 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:26:43.267 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:43.268 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:43.267(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=3, status=2) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:43.269 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:43.282 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:26:43.282 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:26:43.283 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:26:43.283 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:26:43.288 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:26:43.290 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:43.290 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:26:43.291 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:26:43.293 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:43.293 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:26:43.294 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:43.295 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:43.296 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:26:43.297 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:43.299 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:43.299 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:26:43.301 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:26:43.305 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:43.305 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:43.304(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 22(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:43.307 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:46.373 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:26:46.373 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 1(Long)
2020-06-12 16:26:46.374 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:26:46.379 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:46.379 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:46.378(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=2) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:46.380 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:46.394 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:26:46.395 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:26:46.396 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:26:46.396 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:26:46.401 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:26:46.402 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:46.402 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:26:46.403 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:26:46.404 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:46.404 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:26:46.405 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:46.406 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:46.406 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:26:46.407 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:46.408 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:46.408 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:26:46.409 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:26:46.415 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:46.416 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:26:46.415(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:46.417 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:26:53.733 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-12 16:26:53.733 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-12 16:26:53.735 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 16:26:53.737 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-12 16:26:53.737 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-12 16:26:53.741 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 3
2020-06-12 16:26:53.749 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-12 16:26:53.749 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-12 16:26:53.751 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-12 16:26:53.751 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-12 16:26:53.756 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 4
2020-06-12 16:26:53.757 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:53.757 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:26:53.759 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:53.764 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:53.764 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:26:53.768 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:26:53.771 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:53.771 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:26:53.773 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:26:53.775 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:26:53.775 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:26:53.776 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:26:53.784 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:26:53.786 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-12 16:26:53.783(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.web.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 49(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:26:53.787 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-12 16:30:17.953 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:30:17.954 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:30:17.952(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 21(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:30:17.956 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:30:19.597 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:30:19.597 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-12 16:30:19.600 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:30:19.604 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:30:19.604 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:30:19.606 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:30:19.727 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:30:19.727 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:30:19.729 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-12 16:32:49.477 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:32:49.478 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:32:49.476(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:32:49.480 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:32:49.710 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 16:32:49.712 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 16:32:49.716 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 16:32:50.368 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 16:32:50.369 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 16:32:50.370 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:32:50.373 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 16:32:50.374 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 16:32:50.376 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 16:32:50.379 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 16:32:50.379 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 16:32:50.380 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 16:32:50.383 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 16:32:50.383 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 16:32:50.384 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:32:50.386 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 16:32:50.387 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 16:32:50.388 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 16:32:50.391 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 16:32:50.391 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 16:32:50.394 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 16:32:50.396 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 16:32:50.396 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 16:32:50.398 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:32:50.399 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 16:32:50.400 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 16:32:50.401 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:32:50.403 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 16:32:50.403 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 16:32:50.406 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 16:32:50.408 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 16:32:50.408 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 16:32:50.413 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 16:32:50.415 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 16:32:50.415 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 16:32:50.417 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 16:32:50.418 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 16:32:50.419 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 16:32:50.420 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 16:32:50.422 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 16:32:50.423 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 16:32:50.424 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 16:32:50.428 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 16:32:50.428 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 16:32:50.429 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 4
2020-06-12 16:32:50.431 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:32:50.432 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 16:32:50.482 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 16:32:50.482 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 16:32:50.483 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 16:32:50.521 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 16:32:50.521 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:32:50.522 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:32:50.525 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:32:50.528 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:32:50.529 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 16:24:25.0(Timestamp), 2020-06-12 16:32:50.526(Timestamp)
2020-06-12 16:32:50.530 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 16:32:50.531 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:32:50.531 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:32:50.534 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:32:50.535 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:32:50.535 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 16:24:25.0(Timestamp), 2020-06-12 16:32:50.534(Timestamp)
2020-06-12 16:32:50.536 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 16:32:50.536 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:32:50.537 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:32:50.540 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:32:50.541 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:32:50.544 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 16:24:25.0(Timestamp), 2020-06-12 16:32:50.54(Timestamp)
2020-06-12 16:32:50.545 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 16:32:50.546 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 16:32:50.546 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 16:32:50.549 DEBUG 7436 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 16:32:50.551 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 16:32:50.551 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 16:24:25.0(Timestamp), 2020-06-12 16:32:50.55(Timestamp)
2020-06-12 16:32:50.552 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 16:32:50.554 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 16:32:50.554 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 16:32:50.555 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 16:34:41.037 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 16:34:41.037 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 16:34:41.038 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 16:34:41.054 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:34:41.055 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:34:41.054(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:34:41.056 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:34:50.223 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:34:50.223 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 3(Long)
2020-06-12 16:34:50.226 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:34:50.230 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:34:50.231 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:34:50.232 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:34:53.907 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:34:53.908 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-12 16:34:53.911 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:34:53.914 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:34:53.915 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:34:53.916 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:38:16.438 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:38:16.439 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:38:16.441 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:38:16.442 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:38:16.451 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:38:16.453 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:38:16.453 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:38:16.455 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:38:16.457 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:38:16.457 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:38:16.458 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:38:16.460 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:38:16.460 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:38:16.462 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:38:16.464 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:38:16.464 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:38:16.466 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:38:16.472 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:38:16.473 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:38:16.471(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 32(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:38:16.482 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:38:32.782 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:38:32.783 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://cdn.alanliang.site/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:38:32.781(Timestamp), 2(Integer), true(Boolean), true(Boolean), 1(Integer), 1(Long)
2020-06-12 16:38:32.785 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:38:32.785 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:38:32.786 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-06-12 16:38:32.787 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-06-12 16:38:32.806 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-12 16:38:32.807 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-06-12 16:38:32.808 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-12 16:38:32.812 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:38:32.812 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 1(Long)
2020-06-12 16:38:32.813 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:38:32.990 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:38:32.991 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:38:32.99(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 207(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:38:32.994 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:38:44.247 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:38:44.247 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:38:44.249 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:38:44.249 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:38:44.252 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:38:44.253 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:38:44.253 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:38:44.255 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:38:44.257 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:38:44.257 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:38:44.259 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:38:44.260 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:38:44.260 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:38:44.261 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:38:44.263 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:38:44.263 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:38:44.266 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:38:44.271 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:38:44.271 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:38:44.27(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:38:44.274 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:41:04.594 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:41:04.595 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 48(Long)
2020-06-12 16:41:04.597 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:41:04.599 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:04.599 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:41:04.601 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:41:04.732 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:41:04.732 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:41:04.733 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-12 16:41:12.284 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:41:12.285 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试文章(String), 测试文章(String), <p>测试文章测试文章测试文章测试文章测试文章</p>
(String), 测试文章测试文章测试文章测试文章测试文章(String), (String), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:41:12.283(Timestamp), 1(Integer), false(Boolean), false(Boolean), 1(Integer), 48(Long)
2020-06-12 16:41:12.287 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:41:12.288 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:41:12.288 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 48(Long)
2020-06-12 16:41:12.289 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 1
2020-06-12 16:41:12.300 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-12 16:41:12.301 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 48(Long), 11(Long)
2020-06-12 16:41:12.301 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-12 16:41:12.303 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:41:12.303 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 48(Long)
2020-06-12 16:41:12.304 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:41:12.442 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:41:12.442 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:41:12.441(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 157(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:41:12.443 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:41:17.114 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:41:17.114 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:41:17.115 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:41:17.116 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:41:17.122 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:41:17.123 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:17.123 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:41:17.124 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:41:17.125 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:17.125 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:41:17.126 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:41:17.127 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:17.127 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:41:17.129 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:41:17.131 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:17.132 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:41:17.134 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:41:17.141 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:41:17.141 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:41:17.14(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 26(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:41:17.142 DEBUG 7436 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:41:25.908 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:41:25.909 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试文章(String), 测试文章(String), <p>测试文章测试文章测试文章测试文章测试文章</p>
(String), 测试文章测试文章测试文章测试文章测试文章(String), (String), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:41:25.908(Timestamp), 1(Integer), false(Boolean), false(Boolean), 1(Integer), 48(Long)
2020-06-12 16:41:25.910 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:41:25.910 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:41:25.910 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 48(Long)
2020-06-12 16:41:25.911 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 1
2020-06-12 16:41:25.928 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-12 16:41:25.928 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 48(Long), 11(Long)
2020-06-12 16:41:25.929 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-12 16:41:25.930 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:41:25.930 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 48(Long)
2020-06-12 16:41:25.930 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:41:26.095 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:41:26.095 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:41:26.094(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 185(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:41:26.096 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:41:29.275 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:41:29.275 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:41:29.277 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:41:29.277 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:41:29.282 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:41:29.284 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:29.284 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:41:29.286 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:41:29.286 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:29.286 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:41:29.288 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:41:29.289 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:29.289 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:41:29.290 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:41:29.292 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:29.292 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:41:29.294 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:41:29.303 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:41:29.303 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:41:29.303(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:41:29.305 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:41:53.277 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:41:53.278 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 48(Long)
2020-06-12 16:41:53.279 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:41:53.281 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:41:53.282 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:41:53.283 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:41:53.399 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:41:53.399 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:41:53.400 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-12 16:42:15.415 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:42:15.415 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试文章(String), 测试文章(String), <p>测试文章测试文章测试文章测试文章测试文章</p>
(String), 测试文章测试文章测试文章测试文章测试文章(String), (String), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:42:15.413(Timestamp), 1(Integer), false(Boolean), false(Boolean), 1(Integer), 48(Long)
2020-06-12 16:42:15.416 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:42:15.417 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:42:15.417 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 48(Long)
2020-06-12 16:42:15.418 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 1
2020-06-12 16:42:15.430 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-12 16:42:15.431 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 48(Long), 11(Long)
2020-06-12 16:42:15.431 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-12 16:42:15.432 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:42:15.432 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 48(Long)
2020-06-12 16:42:15.433 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:42:15.565 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:42:15.565 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:42:15.564(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 150(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:42:15.566 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:42:20.282 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:42:20.282 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:42:20.284 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:42:20.284 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:42:20.289 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:42:20.290 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:42:20.290 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:42:20.292 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:42:20.293 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:42:20.293 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:42:20.294 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:42:20.294 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:42:20.294 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:42:20.295 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:42:20.296 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:42:20.296 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:42:20.297 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:42:20.302 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:42:20.302 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:42:20.3(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:42:20.304 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:42:56.829 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:42:56.830 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:42:56.828(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:42:56.831 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:43:16.319 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:43:16.319 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试文章(String), 测试文章(String), <p>测试文章测试文章测试文章测试文章测试文章</p>
(String), 测试文章测试文章测试文章测试文章测试文章(String), (String), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:43:16.318(Timestamp), 1(Integer), false(Boolean), false(Boolean), 1(Integer), 48(Long)
2020-06-12 16:43:16.320 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:43:16.321 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:43:16.321 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 48(Long)
2020-06-12 16:43:16.322 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 1
2020-06-12 16:43:16.333 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-12 16:43:16.333 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 48(Long), 11(Long)
2020-06-12 16:43:16.333 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-12 16:43:16.334 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:43:16.334 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 48(Long)
2020-06-12 16:43:16.335 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:43:16.478 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:43:16.478 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:43:16.477(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 158(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:43:16.479 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:43:20.844 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:43:20.844 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:43:20.846 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:43:20.846 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:43:20.850 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:43:20.851 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:20.851 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:43:20.852 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:43:20.853 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:20.853 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:43:20.856 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:43:20.857 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:20.857 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:43:20.858 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:43:20.859 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:20.859 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:43:20.860 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:43:20.864 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:43:20.864 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:43:20.863(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 20(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:43:20.865 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:43:29.791 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=? WHERE id=? 
2020-06-12 16:43:29.791 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试文章(String), 测试文章(String), <p>测试文章测试文章测试文章测试文章测试文章</p>
(String), 测试文章测试文章测试文章测试文章测试文章(String), (String), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:43:29.789(Timestamp), 1(Integer), false(Boolean), false(Boolean), 1(Integer), 48(Long)
2020-06-12 16:43:29.793 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:43:29.794 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:43:29.794 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 48(Long)
2020-06-12 16:43:29.795 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 1
2020-06-12 16:43:29.813 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-12 16:43:29.813 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 48(Long), 11(Long)
2020-06-12 16:43:29.814 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-12 16:43:29.815 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:43:29.816 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 48(Long)
2020-06-12 16:43:29.817 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:43:29.951 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:43:29.952 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:43:29.951(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 160(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:43:29.953 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:43:32.778 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:43:32.778 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:43:32.780 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:43:32.780 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:43:32.784 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:43:32.788 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:32.788 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:43:32.789 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:43:32.790 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:32.790 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:43:32.791 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:43:32.792 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:32.792 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:43:32.793 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:43:32.794 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:32.795 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:43:32.796 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:43:32.806 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:43:32.808 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:43:32.804(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:43:32.809 DEBUG 7436 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:43:48.387 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 16:43:48.387 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 48(Long)
2020-06-12 16:43:48.388 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:43:48.392 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:43:48.393 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:43:48.392(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=48, status=2) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:43:48.393 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:43:48.405 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:43:48.405 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:43:48.407 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:43:48.407 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:43:48.412 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:43:48.412 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:48.413 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:43:48.414 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:43:48.416 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:48.416 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:43:48.417 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:43:48.418 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:48.418 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:43:48.419 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:43:48.420 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:48.420 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:43:48.421 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:43:48.424 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:43:48.424 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:43:48.423(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:43:48.425 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:43:56.792 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:43:56.793 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-12 16:43:56.795 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:43:56.800 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:43:56.800 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:43:56.802 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:43:56.920 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:43:56.920 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:43:56.921 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-12 16:44:03.091 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=?, sort=? WHERE id=? 
2020-06-12 16:44:03.092 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第1章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://q8rsjstig.bkt.clouddn.com/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://q8rsjstig.bkt.clouddn.com/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://q8rsjstig.bkt.clouddn.com/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://cdn.alanliang.site/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:44:03.09(Timestamp), 2(Integer), true(Boolean), true(Boolean), 1(Integer), 3(Integer), 1(Long)
2020-06-12 16:44:03.094 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:44:03.096 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:44:03.097 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-06-12 16:44:03.099 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 4
2020-06-12 16:44:03.118 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-12 16:44:03.118 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 1(Long), 1(Long), 2(Long), 1(Long), 3(Long), 1(Long), 4(Long)
2020-06-12 16:44:03.119 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-12 16:44:03.120 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:44:03.120 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 1(Long)
2020-06-12 16:44:03.120 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:44:03.305 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:44:03.305 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:44:03.304(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 212(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:44:03.307 DEBUG 7436 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:44:09.168 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:44:09.168 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:44:09.169 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:44:09.169 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:44:09.172 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:44:09.173 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:09.173 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:44:09.175 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:44:09.176 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:09.177 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:44:09.178 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:44:09.179 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:09.179 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:44:09.181 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:44:09.182 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:09.183 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:44:09.185 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:44:09.189 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:44:09.189 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:44:09.188(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 21(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:44:09.190 DEBUG 7436 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:44:19.471 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 16:44:19.472 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 16:44:19.473 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 16:44:19.482 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:44:19.482 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:44:19.483 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:44:19.484 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:44:19.489 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:44:19.491 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:19.491 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:44:19.492 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:44:19.512 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:19.513 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:44:19.514 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:44:19.514 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:19.515 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:44:19.516 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:44:19.516 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:19.516 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:44:19.518 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:44:19.521 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:44:19.521 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:44:19.52(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 38(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:44:19.522 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:44:25.776 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article WHERE id=? 
2020-06-12 16:44:25.777 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 48(Long)
2020-06-12 16:44:25.779 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-12 16:44:25.781 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:25.781 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:44:25.782 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:44:25.902 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,create_time,update_time,color FROM t_tag 
2020-06-12 16:44:25.902 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-12 16:44:25.903 DEBUG 7436 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-12 16:44:29.320 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, category_id=?, update_time=?, type=?, top=?, recommend=?, status=?, sort=? WHERE id=? 
2020-06-12 16:44:29.321 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 测试文章(String), 测试文章(String), <p>测试文章测试文章测试文章测试文章测试文章</p>
(String), 测试文章测试文章测试文章测试文章测试文章(String), (String), false(Boolean), true(Boolean), 14(Long), 2020-06-12 16:44:29.318(Timestamp), 1(Integer), false(Boolean), false(Boolean), 1(Integer), 5(Integer), 48(Long)
2020-06-12 16:44:29.322 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 16:44:29.324 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-12 16:44:29.324 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 48(Long)
2020-06-12 16:44:29.325 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 1
2020-06-12 16:44:29.335 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-12 16:44:29.335 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 48(Long), 11(Long)
2020-06-12 16:44:29.336 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-12 16:44:29.336 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 16:44:29.337 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 48(Long)
2020-06-12 16:44:29.338 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 16:44:29.462 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:44:29.462 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:44:29.461(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 142(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:44:29.463 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:44:36.067 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 16:44:36.067 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 16:44:36.069 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 16:44:36.069 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 16:44:36.075 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-12 16:44:36.076 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:36.076 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 16:44:36.077 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 16:44:36.078 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:36.078 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 16:44:36.079 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:44:36.080 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:36.080 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 16:44:36.081 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 16:44:36.083 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 16:44:36.083 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 48(Long)
2020-06-12 16:44:36.086 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-12 16:44:36.093 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:44:36.094 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:44:36.093(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:44:36.095 DEBUG 7436 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:46:04.226 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:46:04.226 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:46:04.225(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:46:04.227 DEBUG 7436 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 16:46:51.087 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.deleteById       : ==>  Preparing: DELETE FROM t_article WHERE id=? 
2020-06-12 16:46:51.088 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.deleteById       : ==> Parameters: 48(Long)
2020-06-12 16:46:51.089 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.deleteById       : <==    Updates: 1
2020-06-12 16:46:51.109 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 16:46:51.109 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 16:46:51.108(Timestamp), 删除文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.remove()(String), { id: 48 }(String), 0:0:0:0:0:0:0:1(String), 21(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 16:46:51.110 DEBUG 7436 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:11:25.261 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 17:11:25.261 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 1(Long)
2020-06-12 17:11:25.263 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 17:11:25.268 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:11:25.269 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:11:25.268(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=2) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:11:25.270 DEBUG 7436 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:11:25.285 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 17:11:25.285 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 17:11:25.286 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 17:11:25.287 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 17:11:25.291 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 17:11:25.292 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:11:25.292 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 17:11:25.293 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 17:11:25.294 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:11:25.294 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 17:11:25.295 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 17:11:25.295 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:11:25.295 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 17:11:25.296 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 17:11:25.301 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:11:25.301 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:11:25.3(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 15(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:11:25.302 DEBUG 7436 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:13:42.346  INFO 16656 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Starting ElasticSearchTest on DESKTOP-QNDK7AF with PID 16656 (started by AlanLiang in D:\idea\geekblog)
2020-06-12 17:13:42.347 DEBUG 16656 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 17:13:42.347  INFO 16656 --- [main] s.a.geekblog.utils.ElasticSearchTest     : The following profiles are active: dev
2020-06-12 17:13:43.640  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:13:43.643  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:13:43.934  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 282ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 17:13:43.940  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:13:43.941  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:13:43.957  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 17:13:43.973  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:13:43.974  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 17:13:44.002  INFO 16656 --- [main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 17:13:44.002  INFO 16656 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18ms. Found 0 Redis repository interfaces.
2020-06-12 17:13:44.664  INFO 16656 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:13:44.813  INFO 16656 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:13:44.815  INFO 16656 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@22a260ff' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:13:44.824  INFO 16656 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:13:44.836  INFO 16656 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:13:44.857  INFO 16656 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$9004c27f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:13:45.263  INFO 16656 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 17:13:46.012  INFO 16656 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 17:13:49.998  WARN 16656 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:13:49.999  WARN 16656 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:13:50.000  WARN 16656 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:13:50.001  WARN 16656 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:13:50.058  WARN 16656 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:13:50.058  WARN 16656 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:13:50.058  WARN 16656 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:13:50.059  WARN 16656 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:13:50.583  WARN 16656 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 17:13:52.740  INFO 16656 --- [main] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 17:13:52.824  INFO 16656 --- [main] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 17:13:53.192  INFO 16656 --- [main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@24731caf, org.springframework.security.web.context.SecurityContextPersistenceFilter@5535e9, org.springframework.security.web.header.HeaderWriterFilter@76c587ce, org.springframework.security.web.authentication.logout.LogoutFilter@2914a328, site.alanliang.geekblog.security.ValidateCodeFilter@6e1ad658, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@507f7cd1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@e3692ca, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@757c685d, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4c1b4e07, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@486dd616, org.springframework.security.web.session.SessionManagementFilter@5265a8dd, org.springframework.security.web.access.ExceptionTranslationFilter@e4bb10b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7112b21a]
2020-06-12 17:13:53.627  INFO 16656 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 17:13:54.436  INFO 16656 --- [main] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 17:13:54.467  INFO 16656 --- [main] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 17:13:54.555  INFO 16656 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 17:13:54.857  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 17:13:54.859  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 17:13:54.866  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 17:13:54.873  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 17:13:54.876  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 17:13:54.884  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 17:13:54.886  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 17:13:54.892  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 17:13:54.895  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 17:13:54.944  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 17:13:54.960  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 17:13:54.961  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 17:13:54.965  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 17:13:54.966  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 17:13:54.970  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 17:13:54.972  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 17:13:54.977  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 17:13:54.982  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 17:13:54.988  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 17:13:54.990  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 17:13:54.995  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 17:13:54.999  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 17:13:55.002  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 17:13:55.007  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 17:13:55.009  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 17:13:55.012  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 17:13:55.013  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 17:13:55.018  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 17:13:55.020  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 17:13:55.029  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 17:13:55.031  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 17:13:55.037  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 17:13:55.040  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 17:13:55.046  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 17:13:55.053  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 17:13:55.059  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 17:13:55.062  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 17:13:55.066  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 17:13:55.068  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 17:13:55.070  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 17:13:55.073  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 17:13:55.079  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 17:13:55.084  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 17:13:55.087  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 17:13:55.089  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 17:13:55.109  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 17:13:55.115  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 17:13:55.120  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 17:13:55.124  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 17:13:55.134  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 17:13:55.136  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 17:13:55.138  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 17:13:55.141  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 17:13:55.143  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 17:13:55.150  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 17:13:55.156  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 17:13:55.157  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 17:13:55.159  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 17:13:55.159  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 17:13:55.165  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 17:13:55.168  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 17:13:55.170  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 17:13:55.182  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 17:13:55.188  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 17:13:55.190  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 17:13:55.191  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 17:13:55.193  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 17:13:55.194  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 17:13:55.200  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 17:13:55.202  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 17:13:55.204  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 17:13:55.206  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 17:13:55.211  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 17:13:55.212  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 17:13:55.213  INFO 16656 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 17:13:55.250  INFO 16656 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Started ElasticSearchTest in 13.478 seconds (JVM running for 15.428)
2020-06-12 17:13:55.822  INFO 16656 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-12 17:13:55.849  INFO 16656 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-06-12 17:14:48.365  INFO 7436 --- [Thread-14] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-12 17:14:48.595  INFO 7436 --- [Thread-14] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-06-12 17:14:49.379  INFO 7436 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 7436 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 17:14:49.380 DEBUG 7436 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 17:14:49.380  INFO 7436 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 17:14:49.981  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:14:49.981  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:14:50.040  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 59ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 17:14:50.043  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:14:50.043  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:14:50.062  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 17:14:50.076  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:14:50.076  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 17:14:50.105  INFO 7436 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 17:14:50.105  INFO 7436 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 28ms. Found 0 Redis repository interfaces.
2020-06-12 17:14:50.320  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:50.330  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:50.331  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@40cc5a1c' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:50.332  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:50.334  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:50.337  INFO 7436 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$d686916c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:50.669  INFO 7436 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 17:14:50.670  INFO 7436 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 17:14:50.670  INFO 7436 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 17:14:50.739  INFO 7436 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 17:14:50.740  INFO 7436 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1353 ms
2020-06-12 17:14:50.995  INFO 7436 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 17:14:50.996  INFO 7436 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 17:14:51.010  WARN 7436 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Cannot deserialize session attribute [user] for session [700CDA54FD029BD959343B7274B68FE9]
2020-06-12 17:14:51.018 ERROR 7436 --- [restartedMain] o.a.catalina.session.StandardManager     : Exception loading sessions from persistent storage

java.lang.ClassCastException: java.lang.String cannot be cast to java.io.ObjectStreamClass
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1745)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2042)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at java.util.ArrayList.readObject(ArrayList.java:797)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1170)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2178)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1597)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1049)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:218)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:162)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:354)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5168)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:468)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:88)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:191)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at site.alanliang.geekblog.GeekBlogApplication.main(GeekBlogApplication.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)

2020-06-12 17:14:51.019 DEBUG 7436 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 17:14:51.178  INFO 7436 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 17:14:51.718  INFO 7436 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-06-12 17:14:52.011  INFO 15816 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Starting ElasticSearchTest on DESKTOP-QNDK7AF with PID 15816 (started by AlanLiang in D:\idea\geekblog)
2020-06-12 17:14:52.013 DEBUG 15816 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 17:14:52.014  INFO 15816 --- [main] s.a.geekblog.utils.ElasticSearchTest     : The following profiles are active: dev
2020-06-12 17:14:52.953  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:52.953  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:52.953  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:52.953  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:52.972  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:52.972  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:52.972  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:52.972  WARN 7436 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:53.045  INFO 7436 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 17:14:53.321  WARN 7436 --- [I/O dispatcher 25] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 17:14:53.457  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:14:53.461  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:14:53.846  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 377ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 17:14:53.855  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:14:53.856  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:14:53.879  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 21ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 17:14:53.909  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:14:53.911  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 17:14:53.941  INFO 15816 --- [main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 17:14:53.941  INFO 15816 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-06-12 17:14:54.202  INFO 7436 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 17:14:54.211  INFO 7436 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 17:14:54.307  INFO 7436 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2837dec, org.springframework.security.web.context.SecurityContextPersistenceFilter@36d2d5fa, org.springframework.security.web.header.HeaderWriterFilter@4cb23a47, org.springframework.security.web.authentication.logout.LogoutFilter@4363d45a, site.alanliang.geekblog.security.ValidateCodeFilter@6e40a97c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@d96fe4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2574628b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@78c91460, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@3254d6ee, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@53f547ab, org.springframework.security.web.session.SessionManagementFilter@22d7377c, org.springframework.security.web.access.ExceptionTranslationFilter@34d4fc2f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3dd2549a]
2020-06-12 17:14:54.379  INFO 7436 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 17:14:54.688  INFO 15816 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:54.774  INFO 7436 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 17:14:54.774  INFO 7436 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 17:14:54.804  INFO 7436 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 17:14:54.880  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 17:14:54.882  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 17:14:54.887  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 17:14:54.889  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 17:14:54.890  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 17:14:54.892  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 17:14:54.892  INFO 15816 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:54.893  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 17:14:54.896  INFO 15816 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@22a260ff' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:54.898  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 17:14:54.899  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 17:14:54.908  INFO 15816 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:54.929  INFO 15816 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:54.934  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 17:14:54.950  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 17:14:54.952  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 17:14:54.957  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 17:14:54.958  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 17:14:54.962  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 17:14:54.963  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 17:14:54.964  INFO 15816 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$9004c27f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:14:54.966  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 17:14:54.969  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 17:14:54.973  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 17:14:54.975  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 17:14:54.979  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 17:14:54.983  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 17:14:54.986  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 17:14:54.990  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 17:14:54.992  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 17:14:54.993  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 17:14:54.994  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 17:14:54.997  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 17:14:54.999  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 17:14:55.005  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 17:14:55.007  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 17:14:55.011  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 17:14:55.013  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 17:14:55.017  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 17:14:55.022  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 17:14:55.025  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 17:14:55.027  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 17:14:55.030  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 17:14:55.031  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 17:14:55.032  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 17:14:55.034  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 17:14:55.037  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 17:14:55.039  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 17:14:55.042  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 17:14:55.043  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 17:14:55.054  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 17:14:55.056  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 17:14:55.058  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 17:14:55.060  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 17:14:55.063  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 17:14:55.065  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 17:14:55.065  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 17:14:55.066  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 17:14:55.067  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 17:14:55.072  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 17:14:55.073  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 17:14:55.074  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 17:14:55.075  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 17:14:55.075  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 17:14:55.077  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 17:14:55.077  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 17:14:55.078  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 17:14:55.084  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 17:14:55.086  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 17:14:55.087  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 17:14:55.088  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 17:14:55.088  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 17:14:55.089  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 17:14:55.092  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 17:14:55.092  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 17:14:55.094  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 17:14:55.095  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 17:14:55.099  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 17:14:55.100  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 17:14:55.101  INFO 7436 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 17:14:55.113  INFO 7436 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 17:14:55.114  INFO 7436 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 5.804 seconds (JVM running for 3049.694)
2020-06-12 17:14:55.118  INFO 7436 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-06-12 17:14:55.372  INFO 15816 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 17:14:56.041  INFO 15816 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 17:14:59.124  WARN 15816 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:59.126  WARN 15816 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:59.127  WARN 15816 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:59.128  WARN 15816 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:59.179  WARN 15816 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:59.180  WARN 15816 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:59.180  WARN 15816 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:59.180  WARN 15816 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:14:59.642  WARN 15816 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 17:15:02.046  INFO 15816 --- [main] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 17:15:02.193  INFO 15816 --- [main] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 17:15:02.731  INFO 15816 --- [main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@38af386e, org.springframework.security.web.context.SecurityContextPersistenceFilter@397dfbe8, org.springframework.security.web.header.HeaderWriterFilter@b5390, org.springframework.security.web.authentication.logout.LogoutFilter@40d370fa, site.alanliang.geekblog.security.ValidateCodeFilter@33827b88, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3b839f68, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3791af, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@78e50fca, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@74d53d63, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7526bb18, org.springframework.security.web.session.SessionManagementFilter@37f71e8, org.springframework.security.web.access.ExceptionTranslationFilter@6c46dc02, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@546c30c2]
2020-06-12 17:15:03.321  INFO 15816 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 17:15:05.331  INFO 15816 --- [main] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 17:15:05.396  INFO 15816 --- [main] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 17:15:05.570  INFO 15816 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 17:15:06.042  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 17:15:06.045  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 17:15:06.056  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 17:15:06.096  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 17:15:06.104  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 17:15:06.113  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 17:15:06.117  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 17:15:06.128  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 17:15:06.135  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 17:15:06.331  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 17:15:06.365  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 17:15:06.369  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 17:15:06.375  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 17:15:06.378  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 17:15:06.384  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 17:15:06.388  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 17:15:06.392  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 17:15:06.397  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 17:15:06.404  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 17:15:06.408  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 17:15:06.417  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 17:15:06.423  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 17:15:06.430  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 17:15:06.441  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 17:15:06.443  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 17:15:06.447  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 17:15:06.449  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 17:15:06.456  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 17:15:06.458  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 17:15:06.469  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 17:15:06.472  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 17:15:06.481  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 17:15:06.486  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 17:15:06.492  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 17:15:06.500  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 17:15:06.507  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 17:15:06.510  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 17:15:06.514  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 17:15:06.516  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 17:15:06.518  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 17:15:06.523  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 17:15:06.529  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 17:15:06.545  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 17:15:06.551  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 17:15:06.556  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 17:15:06.581  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 17:15:06.587  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 17:15:06.591  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 17:15:06.598  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 17:15:06.605  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 17:15:06.606  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 17:15:06.607  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 17:15:06.609  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 17:15:06.614  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 17:15:06.620  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 17:15:06.626  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 17:15:06.629  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 17:15:06.630  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 17:15:06.631  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 17:15:06.637  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 17:15:06.639  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 17:15:06.640  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 17:15:06.653  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 17:15:06.659  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 17:15:06.661  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 17:15:06.663  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 17:15:06.665  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 17:15:06.667  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 17:15:06.671  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 17:15:06.672  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 17:15:06.674  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 17:15:06.676  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 17:15:06.682  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 17:15:06.684  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 17:15:06.685  INFO 15816 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 17:15:06.724  INFO 15816 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Started ElasticSearchTest in 15.834 seconds (JVM running for 17.756)
2020-06-12 17:15:07.057  WARN 15816 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 17:15:07.084  INFO 15816 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-12 17:15:07.117  INFO 15816 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-06-12 17:15:40.314  INFO 17768 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Starting ElasticSearchTest on DESKTOP-QNDK7AF with PID 17768 (started by AlanLiang in D:\idea\geekblog)
2020-06-12 17:15:40.316 DEBUG 17768 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 17:15:40.316  INFO 17768 --- [main] s.a.geekblog.utils.ElasticSearchTest     : The following profiles are active: dev
2020-06-12 17:15:41.588  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:15:41.591  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:15:41.921  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 323ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 17:15:41.926  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:15:41.927  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:15:41.949  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 21ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 17:15:41.967  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:15:41.969  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 17:15:41.998  INFO 17768 --- [main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 17:15:41.999  INFO 17768 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 20ms. Found 0 Redis repository interfaces.
2020-06-12 17:15:42.790  INFO 17768 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:15:42.963  INFO 17768 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:15:42.965  INFO 17768 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@50b734c4' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:15:42.975  INFO 17768 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:15:42.988  INFO 17768 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:15:43.010  INFO 17768 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$9004c27f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:15:43.409  INFO 17768 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 17:15:44.166  INFO 17768 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 17:15:47.291  WARN 17768 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:15:47.292  WARN 17768 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:15:47.293  WARN 17768 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:15:47.294  WARN 17768 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:15:47.348  WARN 17768 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:15:47.349  WARN 17768 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:15:47.349  WARN 17768 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:15:47.349  WARN 17768 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:15:47.796  WARN 17768 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 17:15:49.839  INFO 17768 --- [main] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 17:15:49.921  INFO 17768 --- [main] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 17:15:50.281  INFO 17768 --- [main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7f8f5d37, org.springframework.security.web.context.SecurityContextPersistenceFilter@78aa1753, org.springframework.security.web.header.HeaderWriterFilter@30bf881e, org.springframework.security.web.authentication.logout.LogoutFilter@1ab502f6, site.alanliang.geekblog.security.ValidateCodeFilter@f9cd1e6, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1468fc85, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4c1b4e07, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@486dd616, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4deca78, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3ff53704, org.springframework.security.web.session.SessionManagementFilter@507f7cd1, org.springframework.security.web.access.ExceptionTranslationFilter@7526bb18, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3aa1c45]
2020-06-12 17:15:50.701  INFO 17768 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 17:15:51.548  INFO 17768 --- [main] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 17:15:51.582  INFO 17768 --- [main] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 17:15:51.681  INFO 17768 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 17:15:51.967  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 17:15:51.968  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 17:15:51.974  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 17:15:51.976  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 17:15:51.977  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 17:15:51.979  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 17:15:51.980  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 17:15:51.985  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 17:15:51.987  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 17:15:52.037  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 17:15:52.053  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 17:15:52.055  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 17:15:52.058  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 17:15:52.060  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 17:15:52.063  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 17:15:52.066  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 17:15:52.068  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 17:15:52.070  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 17:15:52.075  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 17:15:52.076  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 17:15:52.081  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 17:15:52.084  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 17:15:52.086  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 17:15:52.089  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 17:15:52.091  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 17:15:52.092  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 17:15:52.093  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 17:15:52.096  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 17:15:52.098  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 17:15:52.104  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 17:15:52.106  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 17:15:52.111  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 17:15:52.113  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 17:15:52.117  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 17:15:52.122  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 17:15:52.126  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 17:15:52.128  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 17:15:52.130  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 17:15:52.132  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 17:15:52.134  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 17:15:52.136  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 17:15:52.139  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 17:15:52.140  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 17:15:52.143  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 17:15:52.145  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 17:15:52.155  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 17:15:52.158  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 17:15:52.160  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 17:15:52.163  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 17:15:52.166  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 17:15:52.168  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 17:15:52.169  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 17:15:52.170  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 17:15:52.172  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 17:15:52.176  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 17:15:52.181  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 17:15:52.182  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 17:15:52.184  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 17:15:52.185  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 17:15:52.189  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 17:15:52.191  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 17:15:52.193  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 17:15:52.202  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 17:15:52.207  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 17:15:52.208  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 17:15:52.210  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 17:15:52.211  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 17:15:52.212  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 17:15:52.218  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 17:15:52.220  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 17:15:52.222  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 17:15:52.223  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 17:15:52.227  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 17:15:52.230  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 17:15:52.231  INFO 17768 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 17:15:52.271  INFO 17768 --- [main] s.a.geekblog.utils.ElasticSearchTest     : Started ElasticSearchTest in 12.811 seconds (JVM running for 14.271)
2020-06-12 17:15:52.556 DEBUG 17768 --- [main] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,author_id,category_id,create_time,update_time,type,top,recommend,status,sort FROM t_article 
2020-06-12 17:15:52.722 DEBUG 17768 --- [main] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 17:15:52.751 DEBUG 17768 --- [main] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 17:15:53.178  INFO 17768 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-12 17:15:53.213  INFO 17768 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-06-12 17:20:24.534  INFO 10080 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 10080 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 17:20:24.538 DEBUG 10080 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 17:20:24.539  INFO 10080 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 17:20:24.608  INFO 10080 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 17:20:24.608  INFO 10080 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 17:20:25.623  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:20:25.625  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:20:25.691  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 62ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 17:20:25.695  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:20:25.695  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:20:25.706  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 17:20:25.717  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:20:25.718  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 17:20:25.733  INFO 10080 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 17:20:25.733  INFO 10080 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 9ms. Found 0 Redis repository interfaces.
2020-06-12 17:20:26.045  INFO 10080 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:20:26.193  INFO 10080 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:20:26.196  INFO 10080 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2b0522cb' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:20:26.197  INFO 10080 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:20:26.204  INFO 10080 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:20:26.215  INFO 10080 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$9063f7f8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:20:26.608  INFO 10080 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 17:20:26.618  INFO 10080 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 17:20:26.618  INFO 10080 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 17:20:26.743  INFO 10080 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 17:20:26.743  INFO 10080 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2135 ms
2020-06-12 17:20:26.878  INFO 10080 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 17:20:26.880  INFO 10080 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 17:20:26.897 DEBUG 10080 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 17:20:26.993  INFO 10080 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 17:20:27.361  INFO 10080 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 17:20:28.784  WARN 10080 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:20:28.785  WARN 10080 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:20:28.785  WARN 10080 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:20:28.786  WARN 10080 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:20:28.807  WARN 10080 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:20:28.808  WARN 10080 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:20:28.808  WARN 10080 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:20:28.808  WARN 10080 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:20:28.933  INFO 10080 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 17:20:29.124  WARN 10080 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 17:20:30.159  INFO 10080 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 17:20:30.174  INFO 10080 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 17:20:30.307  INFO 10080 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@56afb243, org.springframework.security.web.context.SecurityContextPersistenceFilter@76aff02f, org.springframework.security.web.header.HeaderWriterFilter@36328b8a, org.springframework.security.web.authentication.logout.LogoutFilter@43cc2f65, site.alanliang.geekblog.security.ValidateCodeFilter@4502588a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@59f9e24e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@142fde76, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7dd2fd0, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@31586345, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@217af807, org.springframework.security.web.session.SessionManagementFilter@5d3a3c13, org.springframework.security.web.access.ExceptionTranslationFilter@565ad6ce, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@516e367d]
2020-06-12 17:20:30.383  INFO 10080 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 17:20:30.801  INFO 10080 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 17:20:30.814  INFO 10080 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 17:20:30.865  INFO 10080 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 17:20:31.028  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 17:20:31.029  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 17:20:31.033  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 17:20:31.034  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 17:20:31.035  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 17:20:31.036  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 17:20:31.037  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 17:20:31.040  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 17:20:31.040  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 17:20:31.066  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 17:20:31.075  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 17:20:31.076  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 17:20:31.078  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 17:20:31.079  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 17:20:31.082  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 17:20:31.083  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 17:20:31.085  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 17:20:31.086  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 17:20:31.088  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 17:20:31.089  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 17:20:31.091  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 17:20:31.093  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 17:20:31.095  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 17:20:31.097  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 17:20:31.098  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 17:20:31.100  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 17:20:31.101  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 17:20:31.103  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 17:20:31.105  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 17:20:31.110  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 17:20:31.111  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 17:20:31.115  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 17:20:31.116  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 17:20:31.118  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 17:20:31.121  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 17:20:31.124  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 17:20:31.125  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 17:20:31.126  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 17:20:31.127  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 17:20:31.128  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 17:20:31.129  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 17:20:31.131  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 17:20:31.132  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 17:20:31.134  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 17:20:31.135  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 17:20:31.141  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 17:20:31.142  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 17:20:31.144  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 17:20:31.146  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 17:20:31.147  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 17:20:31.148  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 17:20:31.149  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 17:20:31.149  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 17:20:31.150  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 17:20:31.152  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 17:20:31.154  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 17:20:31.155  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 17:20:31.155  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 17:20:31.155  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 17:20:31.157  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 17:20:31.158  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 17:20:31.158  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 17:20:31.162  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 17:20:31.165  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 17:20:31.166  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 17:20:31.166  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 17:20:31.167  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 17:20:31.167  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 17:20:31.170  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 17:20:31.171  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 17:20:31.171  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 17:20:31.172  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 17:20:31.174  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 17:20:31.175  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 17:20:31.175  INFO 10080 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 17:20:31.200  INFO 10080 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 17:20:31.202  INFO 10080 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.665 seconds (JVM running for 8.827)
2020-06-12 17:20:45.248  INFO 10080 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 17:20:45.249  INFO 10080 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 17:20:45.257  INFO 10080 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-06-12 17:20:45.333 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 17:20:45.435 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 17:20:45.454 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 17:20:45.465 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 17:20:45.470 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 17:20:45.485 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 17:20:54.238 DEBUG 10080 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 17:20:54.239 DEBUG 10080 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 17:20:54.241 DEBUG 10080 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 17:20:54.243 DEBUG 10080 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 17:20:54.243 DEBUG 10080 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 17:20:54.252 DEBUG 10080 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 17:20:54.367  INFO 10080 --- [http-nio-8889-exec-3] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 17:20:56.560 DEBUG 10080 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:20:56.569 DEBUG 10080 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:20:56.553(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:20:56.573 DEBUG 10080 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:20:56.963  INFO 10080 --- [http-nio-8889-exec-8] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 17:20:56.964  INFO 10080 --- [http-nio-8889-exec-8] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 17:20:57.501 DEBUG 10080 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-12 17:20:57.509 DEBUG 10080 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-12 17:20:57.525 DEBUG 10080 --- [http-nio-8889-exec-8] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-12 17:20:57.799 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 17:20:57.800 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 17:20:57.802 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 17:20:57.810 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-12 17:20:57.810 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-12 17:20:57.812 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-12 17:20:57.818 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-12 17:20:57.820 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-12 17:20:57.822 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-12 17:20:57.834 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-12 17:20:57.835 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-12 17:20:57.836 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 17:20:57.843 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-12 17:20:57.844 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-12 17:20:57.845 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-12 17:20:57.850 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-12 17:20:57.850 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-12 17:20:57.852 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-12 17:20:57.867 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 17:20:57.868 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 17:20:57.870 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 17:20:57.877 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-12 17:20:57.878 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-12 17:20:57.879 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 17:20:57.885 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 17:20:57.887 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 17:20:57.890 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 17:20:57.894 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 17:20:57.895 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 17:20:57.902 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 17:20:57.904 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-12 17:20:57.905 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-12 17:20:57.952 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 1
2020-06-12 17:20:57.963 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-12 17:20:57.964 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 6(Long)
2020-06-12 17:20:57.966 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-12 17:20:57.974 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-12 17:20:57.976 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-12 17:20:57.978 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : <==      Total: 2
2020-06-12 17:20:57.986 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 17:20:57.987 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 17:20:57.989 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 17:20:57.997 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 17:20:58.002 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 17:20:58.049 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 17:20:58.050 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 17:20:58.051 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 17:20:58.087 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 17:20:58.089 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 17:20:58.089 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 17:20:58.096 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 17:20:58.098 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 17:20:58.100 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 16:32:49.0(Timestamp), 2020-06-12 17:20:58.096(Timestamp)
2020-06-12 17:20:58.102 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 17:20:58.103 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 17:20:58.104 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 17:20:58.109 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 17:20:58.113 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 17:20:58.114 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 16:32:49.0(Timestamp), 2020-06-12 17:20:58.111(Timestamp)
2020-06-12 17:20:58.115 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 17:20:58.116 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 17:20:58.116 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 17:20:58.119 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 17:20:58.120 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 17:20:58.121 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 16:32:49.0(Timestamp), 2020-06-12 17:20:58.119(Timestamp)
2020-06-12 17:20:58.122 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 17:20:58.123 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 17:20:58.124 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 17:20:58.130 DEBUG 10080 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 17:20:58.132 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 17:20:58.133 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 16:32:49.0(Timestamp), 2020-06-12 17:20:58.13(Timestamp)
2020-06-12 17:20:58.133 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 17:20:58.138 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,title,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-12 17:20:58.139 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-12 17:20:58.141 DEBUG 10080 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 7
2020-06-12 17:21:19.312 DEBUG 10080 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 17:21:19.313 DEBUG 10080 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 17:21:19.314 DEBUG 10080 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 17:21:19.384 DEBUG 10080 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:21:19.391 DEBUG 10080 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:21:19.383(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 36(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:21:19.392 DEBUG 10080 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:21:26.627 DEBUG 10080 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 17:21:26.629 DEBUG 10080 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 0(Integer), 1(Long)
2020-06-12 17:21:26.630 DEBUG 10080 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 17:21:26.645 DEBUG 10080 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:21:26.646 DEBUG 10080 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:21:26.644(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=0) }(String), 0:0:0:0:0:0:0:1(String), 21(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:21:26.647 DEBUG 10080 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:21:26.696 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 17:21:26.697 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 17:21:26.709 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 17:21:26.710 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 17:21:26.723 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 17:21:26.727 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:21:26.728 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 17:21:26.729 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 17:21:26.731 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:21:26.731 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 17:21:26.732 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 17:21:26.734 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:21:26.735 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 17:21:26.737 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 17:21:26.743 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:21:26.744 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:21:26.743(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 81(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:21:26.746 DEBUG 10080 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:28:58.697  INFO 10888 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 10888 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-12 17:28:58.700 DEBUG 10888 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-12 17:28:58.700  INFO 10888 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-12 17:28:58.748  INFO 10888 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-12 17:28:58.749  INFO 10888 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-12 17:28:59.571  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:28:59.572  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:28:59.635  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 60ms. Found 1 Elasticsearch repository interfaces.
2020-06-12 17:28:59.639  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:28:59.639  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-12 17:28:59.650  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-12 17:28:59.660  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-12 17:28:59.661  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-12 17:28:59.677  INFO 10888 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-12 17:28:59.678  INFO 10888 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 9ms. Found 0 Redis repository interfaces.
2020-06-12 17:28:59.983  INFO 10888 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:29:00.130  INFO 10888 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:29:00.132  INFO 10888 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@bee7c28' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:29:00.133  INFO 10888 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:29:00.139  INFO 10888 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:29:00.150  INFO 10888 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$b4a6225b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-12 17:29:00.462  INFO 10888 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-12 17:29:00.469  INFO 10888 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-12 17:29:00.469  INFO 10888 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-12 17:29:00.561  INFO 10888 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-12 17:29:00.561  INFO 10888 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1812 ms
2020-06-12 17:29:00.683  INFO 10888 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-12 17:29:00.684  INFO 10888 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-12 17:29:00.696 DEBUG 10888 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-12 17:29:00.782  INFO 10888 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-12 17:29:01.107  INFO 10888 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-12 17:29:02.561  WARN 10888 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:29:02.561  WARN 10888 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:29:02.562  WARN 10888 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:29:02.562  WARN 10888 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:29:02.585  WARN 10888 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:29:02.585  WARN 10888 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:29:02.585  WARN 10888 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:29:02.586  WARN 10888 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-12 17:29:02.706  INFO 10888 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-12 17:29:02.854  WARN 10888 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-12 17:29:03.862  INFO 10888 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-12 17:29:03.876  INFO 10888 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-12 17:29:04.025  INFO 10888 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@573a1481, org.springframework.security.web.context.SecurityContextPersistenceFilter@5dd9e047, org.springframework.security.web.header.HeaderWriterFilter@40a2c050, org.springframework.security.web.authentication.logout.LogoutFilter@7fc14144, site.alanliang.geekblog.security.ValidateCodeFilter@5d46d0a3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@22ffe018, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7f6f44fc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4e62fc97, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@66f94e86, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@368c6ac9, org.springframework.security.web.session.SessionManagementFilter@707eaee2, org.springframework.security.web.access.ExceptionTranslationFilter@261363b2, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@ce9d133]
2020-06-12 17:29:04.096  INFO 10888 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-12 17:29:04.500  INFO 10888 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-12 17:29:04.513  INFO 10888 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-12 17:29:04.564  INFO 10888 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-12 17:29:04.719  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-12 17:29:04.720  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-12 17:29:04.723  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-12 17:29:04.724  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-12 17:29:04.725  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-12 17:29:04.726  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-12 17:29:04.728  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-12 17:29:04.730  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-12 17:29:04.731  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-12 17:29:04.756  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-12 17:29:04.765  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-12 17:29:04.767  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-12 17:29:04.769  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-12 17:29:04.770  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-12 17:29:04.772  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-12 17:29:04.774  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-12 17:29:04.775  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-12 17:29:04.777  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-12 17:29:04.779  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-12 17:29:04.780  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-12 17:29:04.782  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-12 17:29:04.784  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-12 17:29:04.786  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-12 17:29:04.788  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-12 17:29:04.790  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-12 17:29:04.791  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-12 17:29:04.792  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-12 17:29:04.794  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-12 17:29:04.795  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-12 17:29:04.799  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-12 17:29:04.800  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-12 17:29:04.803  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-12 17:29:04.804  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-12 17:29:04.806  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-12 17:29:04.809  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-12 17:29:04.811  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-12 17:29:04.812  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-12 17:29:04.814  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-12 17:29:04.814  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-12 17:29:04.815  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-12 17:29:04.817  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-12 17:29:04.819  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-12 17:29:04.820  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-12 17:29:04.821  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-12 17:29:04.822  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-12 17:29:04.828  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-12 17:29:04.830  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-12 17:29:04.831  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-12 17:29:04.833  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-12 17:29:04.835  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-12 17:29:04.836  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-12 17:29:04.836  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-12 17:29:04.837  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-12 17:29:04.837  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-12 17:29:04.840  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-12 17:29:04.842  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-12 17:29:04.842  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-12 17:29:04.843  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-12 17:29:04.843  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-12 17:29:04.845  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-12 17:29:04.845  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-12 17:29:04.846  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-12 17:29:04.849  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-12 17:29:04.852  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-12 17:29:04.853  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-12 17:29:04.853  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-12 17:29:04.854  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-12 17:29:04.855  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-12 17:29:04.857  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-12 17:29:04.858  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-12 17:29:04.859  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-12 17:29:04.859  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-12 17:29:04.861  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-12 17:29:04.862  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-12 17:29:04.863  INFO 10888 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-12 17:29:04.890  INFO 10888 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-12 17:29:04.891  INFO 10888 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.008 seconds (JVM running for 7.984)
2020-06-12 17:29:30.087  INFO 10888 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-12 17:29:30.087  INFO 10888 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-12 17:29:30.095  INFO 10888 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-06-12 17:29:30.161 DEBUG 10888 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 17:29:30.277 DEBUG 10888 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 17:29:30.291 DEBUG 10888 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 17:29:30.302 DEBUG 10888 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 17:29:30.306 DEBUG 10888 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 17:29:30.314 DEBUG 10888 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 17:29:34.642 DEBUG 10888 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-12 17:29:34.642 DEBUG 10888 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-12 17:29:34.644 DEBUG 10888 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-12 17:29:34.645 DEBUG 10888 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-12 17:29:34.646 DEBUG 10888 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-12 17:29:34.654 DEBUG 10888 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-12 17:29:34.747  INFO 10888 --- [http-nio-8889-exec-3] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-12 17:29:36.909 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:29:36.918 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:29:36.905(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:29:36.921 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:29:37.269  INFO 10888 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-12 17:29:37.271  INFO 10888 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-12 17:29:38.004 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-12 17:29:38.006 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-12 17:29:38.008 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 17:29:38.036 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-12 17:29:38.037 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-12 17:29:38.038 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 17:29:38.043 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-12 17:29:38.046 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-12 17:29:38.050 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-12 17:29:38.052 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-12 17:29:38.052 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-12 17:29:38.057 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-12 17:29:38.072 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-12 17:29:38.073 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-12 17:29:38.075 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-12 17:29:38.085 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 17:29:38.089 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-12 17:29:38.124 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 7
2020-06-12 17:29:38.125 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-12 17:29:38.126 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-12 17:29:38.159 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 7
2020-06-12 17:29:38.160 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 17:29:38.161 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 17:29:38.166 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 17:29:38.168 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 17:29:38.169 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-12 17:20:57.0(Timestamp), 2020-06-12 17:29:38.167(Timestamp)
2020-06-12 17:29:38.171 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-12 17:29:38.172 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 17:29:38.172 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 17:29:38.175 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 17:29:38.177 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 17:29:38.178 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-12 17:20:57.0(Timestamp), 2020-06-12 17:29:38.175(Timestamp)
2020-06-12 17:29:38.179 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-12 17:29:38.185 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 17:29:38.185 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 17:29:38.190 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 17:29:38.192 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 17:29:38.193 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-12 17:20:57.0(Timestamp), 2020-06-12 17:29:38.19(Timestamp)
2020-06-12 17:29:38.193 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-12 17:29:38.197 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-12 17:29:38.198 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin(String)
2020-06-12 17:29:38.202 DEBUG 10888 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-12 17:29:38.204 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-12 17:29:38.205 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-12 17:20:57.0(Timestamp), 2020-06-12 17:29:38.203(Timestamp)
2020-06-12 17:29:38.206 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-12 17:29:42.306 DEBUG 10888 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:29:42.308 DEBUG 10888 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:29:42.305(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:29:42.310 DEBUG 10888 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:29:59.100 DEBUG 10888 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-12 17:29:59.101 DEBUG 10888 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-12 17:29:59.104 DEBUG 10888 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 3
2020-06-12 17:29:59.173 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 17:29:59.177 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 17:29:59.197 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 17:29:59.199 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 17:29:59.285 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 17:29:59.290 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:29:59.292 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 17:29:59.295 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 17:29:59.300 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:29:59.300 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 17:29:59.301 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 17:29:59.304 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:29:59.304 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 17:29:59.307 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 17:29:59.316 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:29:59.317 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:29:59.313(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 198(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:29:59.320 DEBUG 10888 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:30:28.227 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-12 17:30:28.229 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 0(Integer), 1(Long)
2020-06-12 17:30:28.231 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-12 17:30:28.266 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-12 17:30:28.266 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 1(Long)
2020-06-12 17:30:28.270 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 17:30:28.283 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-12 17:30:28.284 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 1(Long)
2020-06-12 17:30:28.286 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-12 17:30:28.500 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:30:28.501 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:30:28.499(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=0) }(String), 0:0:0:0:0:0:0:1(String), 279(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:30:28.502 DEBUG 10888 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-12 17:30:28.518 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-12 17:30:28.519 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-12 17:30:28.521 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-12 17:30:28.521 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-12 17:30:28.526 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-12 17:30:28.528 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:30:28.528 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-12 17:30:28.530 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-12 17:30:28.531 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:30:28.532 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-12 17:30:28.537 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 17:30:28.539 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-12 17:30:28.539 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-12 17:30:28.541 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-12 17:30:28.546 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-12 17:30:28.546 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-12 17:30:28.545(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 28(Long), admin(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-12 17:30:28.547 DEBUG 10888 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
